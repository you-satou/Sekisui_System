export declare class SHCtlCommon {
    static readonly Const: {
        keyCodes: {
            numerics: {
                min: number;
                max: number;
            };
            tenKeyNumerics: {
                min: number;
                max: number;
            };
            enter: number;
            chars: {
                min: number;
                max: number;
            };
            space: number;
            wideChara: number;
            okCharas: {
                "65": string;
                "67": string;
                "86": string;
                "88": string;
                "90": string;
            };
            signs: {
                "186": string;
                "187": string;
                "188": string;
                "189": string;
                "190": string;
                "191": string;
                "192": string;
                "219": string;
                "220": string;
                "221": string;
                "222": string;
                "226": string;
                "111": string;
                "106": string;
                "109": string;
                "107": string;
                "110": string;
            };
            minus: number[];
            dot: number[];
            slash: number[];
            plus: number[];
        };
        state: {
            none: string;
            danger: string;
            warning: string;
            success: string;
        };
        timeFormat: {
            HH: number;
            HHMM: number;
            HHMMSS: number;
        };
    };
    private static signs;
    /**
     * 指定したフォーマットでDateをstringに変換
     * @param date
     * @param format
     */
    static getDateStr(date: Date, format: string): string;
    /**
     * 中身が空かどうかの判定
     * @param obj
     */
    static isBlank(obj: any): boolean;
    /**
     * 指定された値または0でパディングする
     * @param num パディング対象値
     * @param length　値の長さ
     * @param option 何でパディングしたいか
     */
    static padding(num: any, length: number, option?: any): string;
    /**
     * 改行の削除
     * @param str　改行削除したい文字列
     */
    static LineBreak(str: string): string;
    /*********************************************************
     * 新:入力チェック
     * ********************************************************/
    /**
     * 全角入力チェック
     * @param event inputイベント
     */
    static replaceFullWidth(event: any): void;
    /**
     * 半角入力チェック
     * @param event inputイベント
     */
    static replaceHalfChar(event: any): void;
    /**
    * 数値入力チェック
    * @param event inputイベント
    */
    static replaceNumeric(event: any): void;
    /**
     * スペース入力チェック(半角)
     * @param event inputイベント
     */
    static replaceSpace(event: any): void;
    /**
     * スペース入力チェック(半角)→(全角)
     * @param event inputイベント
     */
    static replaceHalfSpaceToFull(event: any): void;
    /**
     * スペース入力チェック(全角)
     * @param event inputイベント
     */
    static replaceFUllSpace(event: any): void;
    /**
    * アルファベット入力チェック
    * @param event inputイベント
    */
    static replaceHalfWidth(event: any): void;
    /**
    * 記号入力チェック
    * @param event inputイベント
    * @param exclusionValue 入力を許容したい記号の配列
    */
    static replaceSign(event: any, exclusionValue?: string[]): void;
    /**
     * 全角ダブルクォーテーション入力チェック
     * @param event inputイベント
     */
    static replaceFullDoubleQuote(event: any): void;
    /**
     * 半角ダブルクォーテーション入力チェック
     * @param event inputイベント
     */
    static replaceHalfDoubleQuote(event: any): void;
    /**
     * フォーマット設定
     * @param inputTargetValue event.target.value
     */
    static replaceHalf(event: any): any;
    /**
     * フォーマット設定
     * @param inputTargetValue event.target.value
     */
    static replaceHalfKana(event: any): any;
    /**
     * input値の入力文字数制限
     * @param event inputイベント
     * @param maxlength 入力制限文字数
     */
    static sliceLength(event: any, maxlength: number): void;
    /**
     * 入力制限記号の取得
     * @param exclusionValue 入力可能文字の配列
     */
    private static getRestrictedSign;
    /**
     * itemが条件に適しているならtrueを返す
     * @param item
     */
    static needsEscape(item: any): boolean;
    /**
     * itemの前にダブルバックスラッシュ付与する
     * @param item
     */
    static escapeByBackSlash(item: any): string;
    /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @param exclusionValue 入力可能文字の配列
     */
    private static exclude;
    /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
    */
    static getUniqueStr(): string;
    /**
    * 従業員コードの変換(6桁→8桁)
    * @param s コード文字列
    * @return 変換後のコード文字列
    */
    static convJyuCode6To8(s: String): String;
}
