import { SimpleChanges } from "@angular/core";
import { SmplPopupService } from "../services/smpl-popup.service";
import { MatDialog, MatDialogRef } from "@angular/material";
import { SHFormControl } from "./ShFormControl";
import { SHCtlPopupDialogComponent } from "../components/sh-ctl-popup-dialog/sh-ctl-popup-dialog.component";
import { BindCtlService } from "../services/bind-ctl.service";
import { LockScreenService } from "../services/lock-screen.service";
import { NoChangeFlg } from "../types/NoChangeFlg";
export declare class SHFormPopup extends SHFormControl<any> {
    protected SmplPopupService: SmplPopupService;
    protected dialog: MatDialog;
    protected bindCtlService: BindCtlService;
    protected lockScreenService: LockScreenService;
    dataTitle: string;
    dataKbnName: string;
    apiUrl: string;
    bindColumnKey: number;
    bindColumnValue: number;
    ctlName: any;
    popupLabelName: any;
    bindColumnArray: any;
    hiddenInput: boolean;
    hiddenLabel: boolean;
    hiddenPopupButton: boolean;
    dataCache: boolean;
    hiddenColumns: number[];
    popupWidth: string;
    name: string;
    event: any;
    codes: any[];
    codesHeader: any[];
    extendWidth: string;
    dialogRef: MatDialogRef<SHCtlPopupDialogComponent, any>;
    initFetchFlg: boolean;
    readonly noChangeFlgCtlName: string;
    readonly ownValueInputElm: HTMLInputElement | null;
    readonly ownLabelInputElm: HTMLInputElement | null;
    noChangeFlg: NoChangeFlg;
    isBusy: boolean;
    constructor(SmplPopupService: SmplPopupService, dialog: MatDialog, bindCtlService: BindCtlService, lockScreenService: LockScreenService);
    /**
     *
     */
    noChangeFlgChange(event: any): void;
    /**
     * 入力コントロールの幅を指定
     */
    setInputWidth(): {
        width: string;
    };
    /**
     * ラベルコントロールの幅を指定
     */
    setLabelWidth(): {
        width: string;
    };
    /**
     * データバインドされた値を再設定する際に値を検証し
     * 親コンポーネントに渡す
     * @param changes 現在の値と直前の値を取得出来る
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     *プロパティの初期化
     *通常サービスにキャッシュしているが、無ければ再度マスタより取得
     */
    ngOnInit(): void;
    /**
     *api 通信 マスタから取得
     */
    fetchCodes(url: string, value?: string): Promise<{}>;
    /**
     * onInput
     * @param event input
     */
    onInput(event: any): void;
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     */
    openDialog(): void;
    /**
     *@ 自身のvalueに紐づくinputのチェンジイベントを発火
     */
    private dispatchOwnValueInputChangeEvent;
    /**
     *@ bind先のinputがnullかどうか
     */
    isBindInputNull(bindColumnArray: {
        [key: string]: string;
    }[]): boolean;
    /**
     * onClick
     * @param event click
     */
    onClick(event: any): void;
    /**
     * onFocus
     * @param event focus
     */
    onFocus(event: any): void;
    clearAll(): void;
    /**
     * onChange
     * @param event change
     */
    onChange(event: any): void;
    /**
     * onBlur
     * @param event blur
     */
    onBlur(event: any): void;
    /**
     *手入力の値からの検索結果が複数あった場合はアラートを出す
     */
    checkValue(value: any): boolean;
    /**
     * マスタ情報よりコードを取得
     */
    getCodes(): void;
    /**
     * 自コントロールのinput value に値を渡す
     * @param matchedArray
     */
    setValueName(matchedArray: any): void;
    /**
     *親子関係になっているinputがある場合に検索対象を親まで広げる
     */
    private hasMatchRecords;
    /**
     * 選択された区分コードに紐づく区分名を設定
     */
    setName(val: any): any;
    /**
     * 入力のクリア
     */
    clearValue(): void;
    /**
     * サブクラスでオーバーライドして使うので消さない
     */
    toText(s: string): string;
    extractBindValue(result: any): {};
}
