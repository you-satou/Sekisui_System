import { EventEmitter, ElementRef } from "@angular/core";
import { MaxByteLengthHistory } from "./MaxByteLengthHistory";
export declare class SHFormControl<T> {
    ctlName: string;
    isDisabled: boolean;
    value: T;
    title: string;
    floatLabel: string;
    labelWidth: string;
    maxlength: number;
    maxByteLength: number;
    styles: any;
    classes: any;
    required: boolean;
    state: string;
    message: string[];
    items: any[];
    disabled: boolean;
    valueChange: EventEmitter<{}>;
    beforeClick: EventEmitter<{}>;
    afterClick: EventEmitter<{}>;
    beforeFocus: EventEmitter<{}>;
    afterFocus: EventEmitter<{}>;
    beforeBlur: EventEmitter<{}>;
    afterBlur: EventEmitter<{}>;
    beforeChange: EventEmitter<{}>;
    afterChange: EventEmitter<{}>;
    selfInputElm: ElementRef<HTMLInputElement>;
    objClass: object;
    strClass: string;
    isComp: boolean;
    array: any[];
    maxByteLengthHistory: MaxByteLengthHistory;
    isfocused: boolean;
    onlyField: boolean;
    constructor();
    onInit(): void;
    /**
     * onInput
     * @param event input
     */
    onInput(event: any): void;
    /**
     * onKeyDown
     * @param event keydown
     */
    onKeyDown(event: any): void;
    ngAfterViewInit(): void;
    /**
     *maxByteLengthの制御
     */
    protected handleKeydown(e: any): void;
    /**
     *@ あと何byte許容できるかを更新
     */
    protected handleInput(e: any): void;
    protected handleCompositionStart(e: any): void;
    protected handleCompositionEnd(e: any): void;
    /**
     * onFocusin
     * @param event focusin
     */
    onFocusin(event: any): void;
    /**
     * onFocusout
     * @param event focusout
     */
    onFocusout(event: any): void;
    /**
     * clickClearButton
     * @param event keydown
     */
    clickClearButton(event: any): boolean;
    /**
     * onChange
     * @param event change
     */
    onChange(event: any): void;
    /**
     * onFocus
     * @param event focus
     */
    onFocus(event: any): void;
    /**
     * onBlur
     * @param event blur
     */
    onBlur(event: any): void;
    /**
     * onBeforeClick
     * @param event
     */
    onBeforeClick(event: any): void;
    /**
     * onAfterClick
     * @param event
     */
    onAfterClick(event: any): void;
    /**
     * onBeforeFocus
     * @param event
     */
    onBeforeFocus(event: any): void;
    /**
     * onAfterFocus
     * @param event
     */
    onAfterFocus(event: any): void;
    /**
     * onBeforeBlur
     * @param event
     */
    onBeforeBlur(event: any): void;
    /**
     * onAfterBlur
     * @param event
     */
    onAfterBlur(event: any): void;
    /**
     * onBeforeChange
     * @param event
     */
    onBeforeChange(event: any): void;
    /**
     * onAfterChange
     * @param event
     */
    onAfterChange(event: any): void;
    /**
     * 値のクリア
     */
    clearValue(): void;
}
