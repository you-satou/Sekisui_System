import { Injectable, ɵɵdefineInjectable, EventEmitter, Input, Output, ViewChild, Component, Inject, ɵɵinject, ElementRef, Pipe, Directive, NgModule } from '@angular/core';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { NativeDateAdapter, DateAdapter, MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatInputModule, MatFormFieldModule, MatDialogModule, MatTableModule, MatButtonModule, MatButtonToggleModule, MatRadioModule, MatSelectModule, MatDatepickerModule, MatNativeDateModule, MatIconModule, MatCheckboxModule, MatProgressSpinnerModule } from '@angular/material';
import { __awaiter } from 'tslib';
import { ShHttpClientService, ValidationErrorService, ShHttpClient, ShHttpClientConst } from 'sh-http-client';
import { Subject } from 'rxjs';
import { SelectionModel } from '@angular/cdk/collections';
import { MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular/material-moment-adapter';
import { DateAdapter as DateAdapter$1, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';
import * as _moment from 'moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlCommon {
    /**
     * 指定したフォーマットでDateをstringに変換
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    static getDateStr(date, format) {
        format = format.replace(/YYYY/g, date.getFullYear().toString());
        format = format.replace(/MM/g, ('0' + (date.getMonth() + 1).toString()).slice(-2).toString());
        format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2).toString());
        return format;
    }
    /**
     * 中身が空かどうかの判定
     * @param {?} obj
     * @return {?}
     */
    static isBlank(obj) {
        if (obj === undefined)
            return true;
        if (obj === null)
            return true;
        if (typeof (obj) === "string" && obj === "")
            return true;
        if (typeof (obj) === "object" && (obj.length !== undefined && obj.length <= 0))
            return true;
        return false;
    }
    /**
     * 指定された値または0でパディングする
     * @param {?} num パディング対象値
     * @param {?} length 　値の長さ
     * @param {?=} option 何でパディングしたいか
     * @return {?}
     */
    static padding(num, length, option) {
        //指定がなければ0
        option = option || "0";
        //数値型に変換
        num = Number(num);
        //数値でなければnullを返す
        if (isNaN(num))
            return null;
        return (Array(length).join(option) + num).slice(-length);
    }
    /**
     * 改行の削除
     * @param {?} str 　改行削除したい文字列
     * @return {?}
     */
    static LineBreak(str) {
        /** @type {?} */
        let tmp = str.replace(/\r?\n/g, "");
        return tmp;
    }
    /*********************************************************
       * 新:入力チェック
       * ********************************************************/
    /**
     * 全角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFullWidth(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, '');
    }
    /**
     * 半角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfChar(event) {
        if (!event)
            return;
        event.target.value = event.target.value.match(/[ -~｡-ﾟ]+/g);
    }
    /**
     * 数値入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceNumeric(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/\d*/g, "");
    }
    /**
     * スペース入力チェック(半角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceSpace(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "");
    }
    /**
     * スペース入力チェック(半角)→(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfSpaceToFull(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "　");
    }
    /**
     * スペース入力チェック(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFUllSpace(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/　/g, "");
    }
    /**
     * アルファベット入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfWidth(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[a-zA-Z]/g, "");
    }
    /**
     * 記号入力チェック
     * @param {?} event inputイベント
     * @param {?=} exclusionValue 入力を許容したい記号の配列
     * @return {?}
     */
    static replaceSign(event, exclusionValue) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(new RegExp(SHCtlCommon.getRestrictedSign(exclusionValue), "g"), "");
    }
    /**
     * 全角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFullDoubleQuote(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("”", "＂");
    }
    /**
     * 半角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfDoubleQuote(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("\"", "ﾞ");
    }
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    static replaceHalf(event) {
        event.target.value = event.target.value.replace(/[A-Za-z0-9-!"#$%&'()=<>,.?_\[\]|{}@`^~\\/+;*:}]/g, (/**
         * @param {?} inputTargetValue
         * @return {?}
         */
        function (inputTargetValue) {
            return String.fromCharCode(inputTargetValue.charCodeAt(0) + 65248);
        }));
        return event.target.value;
    }
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    static replaceHalfKana(event) {
        /** @type {?} */
        let kanaMap = {
            'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
            'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
            'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
            'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
            'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
            'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
            'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
            'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
            'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
            'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
            'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
            'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
            'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
            'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
            'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
            'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
            'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
            'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ'
        };
        /** @type {?} */
        let reg = new RegExp('[' + Object.keys(kanaMap) + ']', 'g');
        return event.target.value = event.target.value.replace(reg, (/**
         * @param {?} match
         * @return {?}
         */
        match => {
            return kanaMap[match];
        }));
    }
    /**
     * input値の入力文字数制限
     * @param {?} event inputイベント
     * @param {?} maxlength 入力制限文字数
     * @return {?}
     */
    static sliceLength(event, maxlength) {
        if (!event)
            return;
        event.target.value = event.target.value.slice(0, maxlength);
    }
    /**
     * 入力制限記号の取得
     * @private
     * @param {?} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    static getRestrictedSign(exclusionValue) {
        if (exclusionValue === undefined || exclusionValue.length === 0)
            return SHCtlCommon.exclude();
        return SHCtlCommon.exclude(exclusionValue);
    }
    /**
     * itemが条件に適しているならtrueを返す
     * @param {?} item
     * @return {?}
     */
    static needsEscape(item) {
        if (item === "." || item === "*" || item === "-" || item === "+" || item === "[" || item === "]")
            return true;
    }
    /**
     * itemの前にダブルバックスラッシュ付与する
     * @param {?} item
     * @return {?}
     */
    static escapeByBackSlash(item) {
        /** @type {?} */
        const escapedValue = "\\" + item;
        return escapedValue;
    }
    /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @private
     * @param {?=} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    static exclude(exclusionValue) {
        /** @type {?} */
        let excludeIndex = null;
        /** @type {?} */
        let signsList = this.signs.split("");
        signsList.map((/**
         * @param {?} item
         * @param {?} index
         * @param {?} array
         * @return {?}
         */
        (item, index, array) => {
            if (exclusionValue !== undefined)
                excludeIndex = exclusionValue.indexOf(item);
            if (excludeIndex !== -1 && excludeIndex !== null)
                array[index] = "";
            if (array[index] !== "" && index !== 0 && index !== signsList.length - 1) {
                if (this.needsEscape(item))
                    array[index] = this.escapeByBackSlash(item);
            }
        }));
        return signsList.join("");
    }
    /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
     * @return {?}
     */
    static getUniqueStr() {
        return "uk-" + Math.random().toString(36).slice(-8);
    }
    /**
     * 従業員コードの変換(6桁→8桁)
     * @param {?} s コード文字列
     * @return {?} 変換後のコード文字列
     */
    static convJyuCode6To8(s) {
        // ブランクなら
        if (this.isBlank(s))
            return '';
        // 6桁以外処理しない
        if (s.trim().length != 6 && !isNaN(parseInt(s.toString())))
            return s;
        /** @type {?} */
        let sJyuCode = s;
        /** @type {?} */
        let result = '00';
        if (((sJyuCode == '922222') || (sJyuCode == '933333') ||
            (sJyuCode == '944444') || (sJyuCode == '955555') ||
            (sJyuCode == '966666') || (sJyuCode == '977777') ||
            (sJyuCode == '988888')) || ((sJyuCode >= '999000') && (sJyuCode <= '999999'))) {
            result = '99' + sJyuCode;
        }
        else {
            /** @type {?} */
            let strCd = sJyuCode.substr(0, 1).toUpperCase();
            sJyuCode = sJyuCode.replace(/[c|k|s]/g, '');
            if (strCd == 'C' || strCd == 'S') {
                //左1文字　[C]か[S]のとき
                /** @type {?} */
                let subNumber = sJyuCode.substr(2, 2);
                //左に文字目から自分含め２文字目が　
                if (Number(subNumber) >= 0 && Number(subNumber) <= 49) {
                    //>= 0 および　 <=49 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 および　 <=49 でない場合
                    result = '19' + sJyuCode;
                }
            }
            else if (strCd == 'K') {
                //左1文字　[C]か[S]のときでなく[K]の場合
                result = '00' + sJyuCode;
            }
            else {
                //左1文字　上記以外
                /** @type {?} */
                let rStr = sJyuCode.substr(-2, 2);
                //左２文字が
                if (Number(rStr) >= 0 && Number(rStr) <= 43) {
                    //     >= 0 及び　<= 43 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 及び　<= 43 でない場合
                    result = '19' + sJyuCode;
                }
            }
        }
        // 整形文字返却
        return result;
    }
}
SHCtlCommon.Const = {
    keyCodes: {
        numerics: { min: 48, max: 57 },
        // 半角1 to 0
        tenKeyNumerics: { min: 96, max: 105 },
        // テンキーの半角0 to 9
        enter: 13,
        // エンター
        chars: { min: 65, max: 90 },
        // 半角a to z
        space: 32,
        // 半角スペース
        wideChara: 229,
        // 全角
        okCharas: {
            "65": "a", "67": "c", "86": "v", "88": "x", "90": "z"
        },
        // Ctrlとの組み合わせ
        signs: {
            // 半角記号
            "186": ":", "187": ";", "188": ",", "189": "-", "190": ".", "191": "/",
            "192": "@", "219": "[", "220": "\\", "221": "]", "222": "^", "226": "_",
            "111": "/", "106": "*", "109": "-", "107": "+", "110": "." // テンキーの分
        },
        minus: [109, 189],
        // 半角マイナス(ハイフン)
        dot: [110, 190],
        // 半角ドット
        slash: [111, 191],
        // 半角スラッシュ
        plus: [107, 187],
    },
    state: {
        none: 'none',
        danger: 'danger',
        warning: 'warning',
        success: 'success',
    },
    timeFormat: {
        HH: 3600,
        HHMM: 60,
        HHMMSS: 1,
    }
};
SHCtlCommon.signs = "[\\\\!\"#$%&'()\*\+\-\.,\/:;<=>?@\[\]^_`{|}~]";
SHCtlCommon.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ SHCtlCommon.ngInjectableDef = ɵɵdefineInjectable({ factory: function SHCtlCommon_Factory() { return new SHCtlCommon(); }, token: SHCtlCommon, providedIn: "root" });
if (false) {
    /** @type {?} */
    SHCtlCommon.Const;
    /**
     * @type {?}
     * @private
     */
    SHCtlCommon.signs;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaxByteLengthService {
    constructor() { }
    /**
     * @param {?} value
     * @return {?}
     */
    generateByteInfo(value) {
        /** @type {?} */
        var length = 0;
        /** @type {?} */
        let bytes = [];
        if (!value)
            return { length, bytes };
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var c = value.charCodeAt(i);
            if ((c >= 0x0 && c < 0x81) ||
                c === 0xf8f0 ||
                (c >= 0xff61 && c < 0xffa0) ||
                (c >= 0xf8f1 && c < 0xf8f4)) {
                length += 1;
                bytes.push(1);
            }
            else {
                length += 2;
                bytes.push(2);
            }
        }
        return { length, bytes };
    }
    /**
     * @param {?} bytes
     * @param {?} maxBytelength
     * @param {?=} total
     * @return {?}
     */
    calcMaxLength(bytes, maxBytelength, total = 0) {
        /** @type {?} */
        let i;
        for (i = 0; i < bytes.length; i++) {
            total += bytes[i];
            if (total >= maxBytelength) {
                break;
            }
        }
        return (total - maxBytelength) > 0 ? i : i + 1;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static isAllowOperation(e) {
        if (e.ctrlKey && MaxByteLengthService.isAllowWithCtlKey(e.key))
            return true;
        if (e.shiftKey && MaxByteLengthService.isAllowWithShiftKey(e.key))
            return true;
        if (MaxByteLengthService.isAllowCodes(e.code))
            return true;
        if (MaxByteLengthService.isAllowKey(e.key))
            return true;
        return false;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static isAllowKey(key) {
        if (MaxByteLengthService.allowKeys.includes(key))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    static isAllowCodes(code) {
        if (MaxByteLengthService.allowCodes.includes(code))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    static isAllowWithCtlKey(key) {
        if (MaxByteLengthService.allowWithCtlKey.includes(key))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    static isAllowWithShiftKey(key) {
        if (MaxByteLengthService.allowWithShiftKey.includes(key))
            return true;
        return false;
    }
}
MaxByteLengthService.allowKeys = ["ArrowRight", "ArrowLeft", "Backspace", "ArrowDown", "ArrowUp"];
MaxByteLengthService.allowCodes = ["Enter", "Tab"];
MaxByteLengthService.allowWithCtlKey = ["a", "Home", "End"];
MaxByteLengthService.allowWithShiftKey = ["Home", "End"];
MaxByteLengthService.decorators = [
    { type: Injectable, args: [{
                providedIn: `root`,
            },] }
];
/** @nocollapse */
MaxByteLengthService.ctorParameters = () => [];
/** @nocollapse */ MaxByteLengthService.ngInjectableDef = ɵɵdefineInjectable({ factory: function MaxByteLengthService_Factory() { return new MaxByteLengthService(); }, token: MaxByteLengthService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowKeys;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowCodes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithCtlKey;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithShiftKey;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaxByteLengthHistory {
    /**
     * @param {?} value
     * @param {?} startPoint
     * @param {?} maxByteLength
     */
    constructor(value, startPoint, maxByteLength) {
        this.enterableBytes = 0;
        this.service = new MaxByteLengthService();
        this.cache = value;
        this.startPoint = value.length == 1 && startPoint == 1 ? 0 : startPoint;
        this.maxByteLength = maxByteLength;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static isAllowOperation(e) {
        return MaxByteLengthService.isAllowOperation(e);
    }
    /**
     * \@ enterableBytesを書き換えます
     * @param {?} value
     * @return {?}
     */
    changeEnterableBytes(value) {
        /** @type {?} */
        const info = this.service.generateByteInfo(value);
        /** @type {?} */
        const entarableByte = this.maxByteLength - info.length;
        this.enterableBytes = entarableByte >= 0 ? entarableByte : 0;
    }
    /**
     * \@ 残りの入力可能byte数を返す
     * @return {?}
     */
    getEnterableBytes() {
        return this.enterableBytes;
    }
    /**
     * \@ inputにセットする値を返す
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    getResult(data, value) {
        if (!value)
            return "";
        // // 許容バイト数がまだある時
        if (this.enterableBytes)
            return value;
        if (this.startPoint === 0) {
            const { bytes } = this.service.generateByteInfo(value);
            /** @type {?} */
            const maxByteLength = this.service.calcMaxLength(bytes, this.maxByteLength);
            return value.substr(0, maxByteLength);
        }
        const { bytes } = this.service.generateByteInfo(data);
        const { length } = this.service.generateByteInfo(this.cache);
        /** @type {?} */
        const len = this.service.calcMaxLength(bytes, this.maxByteLength, length);
        /** @type {?} */
        const insertStr = data.substr(0, len);
        /** @type {?} */
        const h = this.cache.substr(0, this.startPoint);
        /** @type {?} */
        const f = this.cache.substring(this.startPoint);
        return h + insertStr + f;
    }
    /**
     * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
     * @param {?} value
     * @return {?}
     */
    getMaxLength(value) {
        const { bytes } = this.service.generateByteInfo(value);
        return this.service.calcMaxLength(bytes, this.maxByteLength);
    }
    /**
     * デバッグ用
     * @return {?}
     */
    toString() {
        return JSON.stringify({
            cache: this.cache,
            startPoint: this.startPoint,
            enterableBytes: this.enterableBytes,
            maxByteLength: this.maxByteLength,
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.startPoint;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.enterableBytes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.maxByteLength;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.service;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class SHFormControl {
    constructor() {
        //要素コントロール名
        this.ctlName = "SHFormControl";
        //表示レイアウト切り替えフラグ(true:閲覧専用/false:編集可能)
        this.isDisabled = false;
        //値バインド変数
        this.value = null;
        //タイトル名
        this.title = " ";
        //コントロール挙動(auto/always/nevwer)
        this.floatLabel = "auto";
        //閲覧専用画面でのラベル幅(px)
        this.labelWidth = "150";
        //input要素に対するstyleの指定(形式：{ color: "red" })
        this.styles = {};
        //input要素に対するclassの指定(形式：{ "className": true } or "className className2")
        this.classes = {};
        //input要素に対する必須入力フラグ
        this.required = false;
        //input要素に対する状態の指定
        this.state = "";
        //input要素に対する文言の指定
        this.message = [""];
        //input要素に対する必須入力フラグ
        this.disabled = false;
        //値バインド結果の返却を担う
        this.valueChange = new EventEmitter();
        //BeforeClickイベント返却
        this.beforeClick = new EventEmitter();
        //AfterClickイベント返却
        this.afterClick = new EventEmitter();
        //BeforeFocusイベント返却
        this.beforeFocus = new EventEmitter();
        //AfterFocusイベント返却
        this.afterFocus = new EventEmitter();
        //BeforeBlurイベント返却
        this.beforeBlur = new EventEmitter();
        //AfterBlurイベント返却
        this.afterBlur = new EventEmitter();
        //BeforeChangeイベント返却
        this.beforeChange = new EventEmitter();
        //AfterChangeイベント返却
        this.afterChange = new EventEmitter();
        this.objClass = {};
        this.strClass = "";
        this.isComp = false;
        this.array = [];
        //forcusの保持変数
        this.isfocused = false;
        this.onlyField = false;
    }
    /**
     * @return {?}
     */
    onInit() {
        //クラスの指定方法によって分岐する
        if (typeof this.classes === "string") {
            this.strClass = this.classes;
            this.objClass = null;
        }
        else {
            this.strClass = "";
            this.objClass = this.classes;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) { }
    /**
     * onKeyDown
     * @param {?} event keydown
     * @return {?}
     */
    onKeyDown(event) { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.maxByteLength)
            return;
        if (this.selfInputElm) {
            this.selfInputElm.nativeElement.addEventListener("keydown", this.handleKeydown.bind(this));
            this.selfInputElm.nativeElement.addEventListener("input", this.handleInput.bind(this));
            this.selfInputElm.nativeElement.addEventListener("compositionstart", this.handleCompositionStart.bind(this));
            this.selfInputElm.nativeElement.addEventListener("compositionend", this.handleCompositionEnd.bind(this));
        }
    }
    /**
     * maxByteLengthの制御
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleKeydown(e) {
        if (!this.maxByteLength)
            return;
        /** @type {?} */
        const value = e.target.value;
        if (value &&
            !this.maxByteLengthHistory &&
            !MaxByteLengthHistory.isAllowOperation(e)) {
            this.maxByteLengthHistory = new MaxByteLengthHistory(value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
    }
    /**
     * \@ あと何byte許容できるかを更新
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleInput(e) {
        if (!this.maxByteLength)
            return;
        this.maxlength = undefined;
        if (!this.maxByteLengthHistory && e.target.value) {
            this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
        if (this.maxByteLengthHistory) {
            this.maxByteLengthHistory.changeEnterableBytes(e.target.value);
            if (!this.maxByteLengthHistory.getEnterableBytes() && !this.isComp) {
                /** @type {?} */
                const maxLen = this.maxByteLengthHistory.getMaxLength(e.target.value);
                this.maxlength = maxLen;
                if (e.target.value.length > maxLen) {
                    e.target.value = e.target.value.substr(0, maxLen);
                    this.valueChange.emit(e.target.value);
                }
            }
        }
    }
    /**
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleCompositionStart(e) {
        if (!this.maxByteLength)
            return;
        this.isComp = true;
        this.maxlength = undefined;
        if (e.target.value) {
            this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
        else {
            this.isComp = false;
        }
    }
    /**
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleCompositionEnd(e) {
        if (!this.maxByteLength)
            return;
        /** @type {?} */
        const result = this.maxByteLengthHistory.getResult(e.data, e.target.value.replace(/\n/g, '##')).replace(/##/g, '\n');
        e.target.value = result;
        this.valueChange.emit(result);
        this.maxByteLengthHistory = null;
        this.isComp = false;
    }
    /**
     * onFocusin
     * @param {?} event focusin
     * @return {?}
     */
    onFocusin(event) {
        this.isfocused = true;
    }
    /**
     * onFocusout
     * @param {?} event focusout
     * @return {?}
     */
    onFocusout(event) {
        this.isfocused = false;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!this.isfocused)
                this.onBlur(event);
        }), 0);
    }
    /**
     * clickClearButton
     * @param {?} event keydown
     * @return {?}
     */
    clickClearButton(event) {
        if (event.keyCode == SHCtlCommon.Const.keyCodes.enter ||
            event.keyCode == SHCtlCommon.Const.keyCodes.space) {
            //エンターキーで別コントロールにフォーカスが移動しないようにフォーカスを当て直す
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
                inputValue.dispatchEvent(new Event('focus'));
            }), 0);
            this.clearValue();
            return false;
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.valueChange.emit(this.value);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        event.target.select();
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) { }
    /**
     * onBeforeClick
     * @param {?} event
     * @return {?}
     */
    onBeforeClick(event) {
        this.beforeClick.emit(event);
    }
    /**
     * onAfterClick
     * @param {?} event
     * @return {?}
     */
    onAfterClick(event) {
        this.afterClick.emit(event);
    }
    /**
     * onBeforeFocus
     * @param {?} event
     * @return {?}
     */
    onBeforeFocus(event) {
        this.beforeFocus.emit(event);
    }
    /**
     * onAfterFocus
     * @param {?} event
     * @return {?}
     */
    onAfterFocus(event) {
        this.afterFocus.emit(event);
    }
    /**
     * onBeforeBlur
     * @param {?} event
     * @return {?}
     */
    onBeforeBlur(event) {
        this.beforeBlur.emit(event);
    }
    /**
     * onAfterBlur
     * @param {?} event
     * @return {?}
     */
    onAfterBlur(event) {
        this.afterBlur.emit(event);
    }
    /**
     * onBeforeChange
     * @param {?} event
     * @return {?}
     */
    onBeforeChange(event) {
        this.beforeChange.emit(event);
    }
    /**
     * onAfterChange
     * @param {?} event
     * @return {?}
     */
    onAfterChange(event) {
        this.afterChange.emit(event);
    }
    /**
     * 値のクリア
     * @return {?}
     */
    clearValue() {
        this.value = null;
        /** @type {?} */
        let inputValue = (/** @type {?} */ ((document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`))));
        //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
        setTimeout((/**
         * @return {?}
         */
        function () {
            inputValue.dispatchEvent(new Event('change'));
            inputValue.dispatchEvent(new Event('focus'));
        }), 10);
    }
}
SHFormControl.propDecorators = {
    ctlName: [{ type: Input }],
    isDisabled: [{ type: Input }],
    value: [{ type: Input }],
    title: [{ type: Input }],
    floatLabel: [{ type: Input }],
    labelWidth: [{ type: Input }],
    maxlength: [{ type: Input }],
    maxByteLength: [{ type: Input }],
    styles: [{ type: Input }],
    classes: [{ type: Input }],
    required: [{ type: Input }],
    state: [{ type: Input }],
    message: [{ type: Input }],
    items: [{ type: Input }],
    disabled: [{ type: Input }],
    valueChange: [{ type: Output }],
    beforeClick: [{ type: Output }],
    afterClick: [{ type: Output }],
    beforeFocus: [{ type: Output }],
    afterFocus: [{ type: Output }],
    beforeBlur: [{ type: Output }],
    afterBlur: [{ type: Output }],
    beforeChange: [{ type: Output }],
    afterChange: [{ type: Output }],
    selfInputElm: [{ type: ViewChild, args: [`inputElm`, { static: false },] }],
    onlyField: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHFormControl.prototype.ctlName;
    /** @type {?} */
    SHFormControl.prototype.isDisabled;
    /** @type {?} */
    SHFormControl.prototype.value;
    /** @type {?} */
    SHFormControl.prototype.title;
    /** @type {?} */
    SHFormControl.prototype.floatLabel;
    /** @type {?} */
    SHFormControl.prototype.labelWidth;
    /** @type {?} */
    SHFormControl.prototype.maxlength;
    /** @type {?} */
    SHFormControl.prototype.maxByteLength;
    /** @type {?} */
    SHFormControl.prototype.styles;
    /** @type {?} */
    SHFormControl.prototype.classes;
    /** @type {?} */
    SHFormControl.prototype.required;
    /** @type {?} */
    SHFormControl.prototype.state;
    /** @type {?} */
    SHFormControl.prototype.message;
    /** @type {?} */
    SHFormControl.prototype.items;
    /** @type {?} */
    SHFormControl.prototype.disabled;
    /** @type {?} */
    SHFormControl.prototype.valueChange;
    /** @type {?} */
    SHFormControl.prototype.beforeClick;
    /** @type {?} */
    SHFormControl.prototype.afterClick;
    /** @type {?} */
    SHFormControl.prototype.beforeFocus;
    /** @type {?} */
    SHFormControl.prototype.afterFocus;
    /** @type {?} */
    SHFormControl.prototype.beforeBlur;
    /** @type {?} */
    SHFormControl.prototype.afterBlur;
    /** @type {?} */
    SHFormControl.prototype.beforeChange;
    /** @type {?} */
    SHFormControl.prototype.afterChange;
    /** @type {?} */
    SHFormControl.prototype.selfInputElm;
    /** @type {?} */
    SHFormControl.prototype.objClass;
    /** @type {?} */
    SHFormControl.prototype.strClass;
    /** @type {?} */
    SHFormControl.prototype.isComp;
    /** @type {?} */
    SHFormControl.prototype.array;
    /** @type {?} */
    SHFormControl.prototype.maxByteLengthHistory;
    /** @type {?} */
    SHFormControl.prototype.isfocused;
    /** @type {?} */
    SHFormControl.prototype.onlyField;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlAllCharComponent extends SHFormControl {
    constructor() {
        super();
        //入力変換時を補足するための値保持
        this._data = "";
        this.ctlName = "SHCtlAllChar";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const isSameData = this._data == event.data;
        this._data = event.data;
        //入力変換中は書き換えを行わない
        if (event.isComposing && (!event.isComposing || !isSameData))
            return;
        if (event.inputType !== "insertCompositionText") {
            SHCtlCommon.sliceLength(event, this.maxlength);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        SHCtlCommon.replaceFullDoubleQuote(event);
        SHCtlCommon.replaceHalfDoubleQuote(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterChange(event);
        }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = SHCtlCommon.LineBreak(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = SHCtlCommon.LineBreak(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
}
SHCtlAllCharComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-all-char",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field id=\"mat-all-char\" class=\"example-full-width mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: ["mat-card-actions,mat-card-content,mat-card-title{text-align:center}mat-card-content{padding-top:20px;padding-bottom:20px}.advanced-color{color:#3f51b5}.beginner-color{color:#f44336}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlAllCharComponent.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SHCtlAllCharComponent.prototype._data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlAllCharMLComponent extends SHFormControl {
    constructor() {
        super();
        //入力変換時を補足するための値保持
        this._data = "";
        this.ctlName = "SHCtlAllCharML";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const isSameData = (this._data == event.data);
        this._data = event.data;
        //入力変換中は書き換えを行わない
        if (event.isComposing && (!event.isComposing || !isSameData))
            return;
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.sliceLength(event, this.maxlength);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        SHCtlCommon.replaceFullDoubleQuote(event);
        SHCtlCommon.replaceHalfDoubleQuote(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        if (this.value == undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterBlur(event); }), 0);
            ;
            return false;
        }
        this.value = String(this.value);
        this.value = this.value.trim();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
}
SHCtlAllCharMLComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-all-char-ml",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <textarea #inputElm matInput [required]=\"required\" [placeholder]=\"title\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlAllCharMl can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"></textarea>\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <textarea #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlAllCharMl can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" \r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"></textarea>\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div *ngIf=\"title\" [ngStyle]=\"{'width.px': labelWidth}\" class=\"display-result\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: ["textarea{min-height:2em}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlAllCharMLComponent.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SHCtlAllCharMLComponent.prototype._data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlBunjNoComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlBunjNo";
        this.maxlength = 9;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceSign(event);
        SHCtlCommon.sliceLength(event, this.maxlength);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        event.target.value = this.toText(event.target.value);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toValue(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
        return true;
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = this.toText(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * ゼロパディング
     * @param {?} inputValue inputの値
     * @return {?}
     */
    toText(inputValue) {
        // ブランクなら
        if (SHCtlCommon.isBlank(inputValue))
            return "";
        if (inputValue.length > 9)
            return inputValue;
        inputValue = inputValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        /** @type {?} */
        const result = (('00000000' + inputValue).slice(-9));
        return result;
    }
    /**
     * ゼロサプレス
     * @param {?} inputValue inputの値
     * @return {?}
     */
    toValue(inputValue) {
        if (!inputValue)
            return "";
        return inputValue.replace(/^0*/, "");
    }
}
SHCtlBunjNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-bunj-no',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlBunj can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlBunj can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n      [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlBunjNoComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * DatePickerの設定
 */
class JpDateAdapter extends NativeDateAdapter {
    /**
     * 日付設定
     * @return {?}
     */
    getDateNames() {
        /** @type {?} */
        const dateNames = [];
        for (let i = 0; i < 31; i++) {
            dateNames[i] = (i + 1).toString();
        }
        return dateNames;
    }
    /**
     * フォーマット設定
     * @param {?} date 入力された日付
     * @param {?} displayFormat 使用しないがinterfaceで指定があるため定義から消さないこと
     * @return {?}
     */
    format(date, displayFormat) {
        if (!date)
            return '';
        /** @type {?} */
        const dateStr = SHCtlCommon.getDateStr(date, 'YYYY-MM-dd');
        return dateStr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlDateComponent extends SHFormControl {
    /**
     * @param {?} dataAdapter
     */
    constructor(dataAdapter) {
        super();
        this.ctlName = "SHCtlDate";
        dataAdapter.setLocale("ja");
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                /** @type {?} */
                const result = this.getfomatedDate(changes.value.currentValue.replace(/\-/g, '/'));
                this.value = new Date(result);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null && this.isDisabled) {
            this.stringValue = this.changeFormat(this.value);
        }
    }
    /**
     * onOpened
     * @return {?}
     */
    onOpened() {
        /** @type {?} */
        let el = document.querySelector("mat-datepicker-content");
        el.addEventListener("focusin", (/**
         * @return {?}
         */
        () => {
            this.isfocused = true;
        }));
    }
    /**
     * onClosed
     * @return {?}
     */
    onClosed() {
        /** @type {?} */
        let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
        setTimeout((/**
         * @return {?}
         */
        function () { inputValue.dispatchEvent(new Event('focus')); }), 0);
    }
    /**
     * onKeypress
     * @param {?} event keyPress
     * @return {?}
     */
    onKeypress(event) {
        this.setCurrentDate(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(this.getfomatedDate(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterChange(event);
        }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 本日日付の設定
     * @param {?} event
     * @return {?}
     */
    setCurrentDate(event) {
        if (event.key === "/") {
            this.value = new Date();
            event.target.value = this.getfomatedDate(this.value).split('/').join('-');
            this.onChange(event);
        }
    }
    /**
     * 日付データのフォーマット変更を行う
     * @private
     * @param {?} date 日付データ
     * @return {?} 日付文字列
     */
    getfomatedDate(date) {
        if (!date)
            return "";
        /** @type {?} */
        const toString = Object.prototype.toString;
        if (toString.call(date) == "[object Date]") {
            const { year, month, day } = this.paddingDate(date.toLocaleDateString());
            return `${year}/${month}/${day}`;
        }
        else {
            const { year, month, day } = this.paddingDate(date);
            if (date.match(/-/))
                return `${year}/${month}/${day}`;
            else
                return `${year}-${month}-${day}`;
        }
    }
    /**
     * 日付文字列の年月日分割オブジェクトを返却する
     * @param {?} dateStr 日付文字列
     * @return {?} 分割オブジェクト(year, month, day)
     */
    paddingDate(dateStr) {
        if (!dateStr)
            return;
        /** @type {?} */
        const dateArr = dateStr.split(/[-/]/);
        /** @type {?} */
        let year = (Array(4).join("0") + dateArr[0]).slice(-4);
        /** @type {?} */
        const month = (Array(2).join('0') + dateArr[1]).slice(-2);
        /** @type {?} */
        const day = (Array(2).join('0') + dateArr[2]).slice(-2);
        return { year, month, day };
    }
    /**
     * フォーマット編集
     * @param {?} value
     * @return {?}
     */
    changeFormat(value) {
        if (!value) {
            this.stringValue = "";
            return;
        }
        /** @type {?} */
        const dataStr = value.toLocaleDateString();
        /** @type {?} */
        const result = dataStr.replace('/', "年").replace('/', '月') + '日';
        return result;
    }
}
SHCtlDateComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-date",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation {{strClass}}\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm [required]=\"required\" matInput type=\"date\" [matDatepicker]=\"picker\" [placeholder]=\"title\" max=\"9999-12-31\"\r\n        attr.name=\"{{ctlName}}\" (click)=\"onClick($event)\" (dateChange)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\" [(ngModel)]=\"value\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"can-moved-with-the-enter-key\">\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\" (mousedown)=\"picker.open(); $event.preventDefault(); $event.stopPropagation();\" ></mat-datepicker-toggle>\r\n      <mat-datepicker #picker (opened)=\"onOpened()\" (closed)=\"onClosed()\"></mat-datepicker>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm [required]=\"required\" matInput type=\"date\" [matDatepicker]=\"picker\" max=\"9999-12-31\"\r\n      attr.name=\"{{ctlName}}\" (click)=\"onClick($event)\" (dateChange)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\" [(ngModel)]=\"value\"\r\n      maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"can-moved-with-the-enter-key\">\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-datepicker-toggle matSuffix [for]=\"picker\" (mousedown)=\"picker.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n    <mat-datepicker #picker (opened)=\"onOpened()\" (closed)=\"onClosed()\"></mat-datepicker>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [{ provide: DateAdapter, useClass: JpDateAdapter }],
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}input[type=date]::-webkit-calendar-picker-indicator{display:none}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}input[type=date]::-webkit-inner-spin-button,input[type=date]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=date]::-webkit-clear-button{display:none}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlDateComponent.ctorParameters = () => [
    { type: DateAdapter }
];
if (false) {
    /** @type {?} */
    SHCtlDateComponent.prototype.stringValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlHalfCharComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlHalfChar";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceFullWidth(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = !event.target.value ? "" : event.target.value;
        event.target.value = event.target.value.replace(/^[^\x01-\x7E\uFF61-\uFF9F]+$/g, '');
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
}
SHCtlHalfCharComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-half-char',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" type=\"tel\"\r\n        class=\"form-control SHCtlHalfChar can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" type=\"tel\"\r\n      class=\"form-control SHCtlHalfChar can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlHalfCharComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ShCtlConst = {
    STATUS_OK: 200,
    DIALOG_WIDTH: "650px",
    DIALOG_HEIGHT: "750px",
    DIALOG_MAX_WIDTH: "1000px",
    ORDINAL: {
        KEYS: {
            KEY_ENTER: 13,
            KEY_LEFT: 37,
            KEY_RIGHT: 39,
            KEY_D: 68,
            KEY_N: 78,
            KEY_R: 82,
            KEY_F1: 112,
            KEY_F2: 113,
            KEY_F3: 114,
            KEY_F4: 115,
            KEY_F5: 116,
            KEY_F6: 117,
            KEY_F10: 121,
            KEY_F11: 122,
            KEY_F12: 123
        },
    },
    NO_CHANGE: {
        FLG_SUFFIX: `NO_CHANGE_FLG_SUFFIX`,
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Data() { }
if (false) {
    /** @type {?} */
    Data.prototype.dataTitle;
    /** @type {?} */
    Data.prototype.hiddenColumns;
}
class SHCtlPopupDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.displayedColumns = [];
        this.name = "";
        this.uniqueStr = "";
    }
    /**
     * 値がバインドされる時に呼ばれる
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * 値の初期化
     * @private
     * @return {?}
     */
    init() {
        this.dataTitle = this.data.dataTitle;
        /** @type {?} */
        let cols = [];
        this.getHashKeys().forEach((/**
         * @param {?} name
         * @param {?} idx
         * @return {?}
         */
        (name, idx) => {
            if (!this.data.hiddenColumns.find((/**
             * @param {?} _
             * @return {?}
             */
            _ => _ == (idx + 1))))
                cols.push(name);
        }));
        this.displayedColumns = cols;
        this.uniqueStr = SHCtlCommon.getUniqueStr();
    }
    /**
     * テーブルのヘッダーを編集
     * @return {?}
     */
    ngAfterViewChecked() {
        /** @type {?} */
        let headerElement = document.getElementsByTagName('th');
        /** @type {?} */
        let countBlank = 0;
        if (!this.codesHeader)
            return;
        for (let i = 0; i < headerElement.length; i++) {
            if (this.codesHeader[i] != "") {
                for (let e = 1; e <= countBlank; e++) {
                    headerElement[i - e].style.display = 'none';
                }
                countBlank = 0;
            }
            else if (this.codesHeader[i] === "") {
                countBlank += 1;
                headerElement[i - countBlank].colSpan = countBlank + 1;
                headerElement[i - countBlank].style.textAlign = 'center';
                if (i === headerElement.length - 1) {
                    for (let j = 0; j < countBlank; j++) {
                        headerElement[i - j].style.display = 'none';
                    }
                }
            }
        }
    }
    /**
     * ダイアログを閉じる
     * @return {?}
     */
    closeDialog() {
        this.dialogRef.close();
    }
    /**
     * ポップアップから選択されたデータを親に返す
     * @param {?} item 事業所コード一覧から選択された1つ
     * @return {?}
     */
    selectCode(item) {
        //ダイアログを閉める時に値を親に渡す
        this.dialogRef.close(item);
    }
    /**
     * データのkeyを返す
     * @return {?}
     */
    getHashKeys() {
        if (!this.unchangeableCodes || this.unchangeableCodes.length == 0) {
            return [];
        }
        else {
            return Object.keys(this.unchangeableCodes[0]);
        }
    }
    /**
     * ポップアップ内での曖昧検索
     * スペース区切りで1キーワードとする
     * @param {?} event inputイベント
     * @return {?}
     */
    filter(event) {
        if (!this.unchangeableCodes)
            return;
        /** @type {?} */
        const filterString = event.target.value;
        /** @type {?} */
        let fileterStrArray = filterString.replace(/　/g, " ").split(" ");
        fileterStrArray = fileterStrArray.filter((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            return value;
        }));
        /** @type {?} */
        let resultArray;
        resultArray = this.unchangeableCodes.concat();
        for (let i = 0; i < fileterStrArray.length; i++) {
            /** @type {?} */
            let obj = this;
            resultArray = resultArray.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                let values = Object.values(value);
                for (let j = 0; j < values.length; j++) {
                    if (obj.data.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    _ => _ == (j + 1))))
                        continue;
                    if (values[j] != null && values[j].toString().match(fileterStrArray[i])) {
                        return true;
                    }
                }
                return false;
            }));
        }
        this.codes = resultArray;
    }
}
SHCtlPopupDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-popup-dialog',
                template: "<div *ngIf=\"!unchangeableCodes\" class=\"overlay\">\r\n  <mat-spinner></mat-spinner>\r\n  <span class=\"loader-text\">Loading...</span>\r\n</div> \r\n<div class=\"sh-container\" id={{uniqueStr}}>\r\n    <h1 mat-dialog-title class=\"sh-text-center\">{{dataTitle}}</h1>\r\n    <div mat-dialog-content class=\"sh-dialog-content\">\r\n      <mat-form-field class=\"sh-width-100\">\r\n        <input matInput placeholder=\"\u691C\u7D22\u6B04\" (input)=\"filter($event)\"/>\r\n      </mat-form-field>\r\n      <div class=\"sh-dialog-table-container mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"codes\" class=\"sh-width-100\">\r\n          <span *ngFor=\"let key of getHashKeys(); let i = index\">\r\n            <ng-container matColumnDef=\"{{key}}\">\r\n              <th mat-header-cell *matHeaderCellDef>{{codesHeader[i]}}</th>\r\n              <td mat-cell *matCellDef=\"let element\">{{element[key]}}</td>\r\n            </ng-container>\r\n          </span>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selectCode(row)\"></tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-raised-button (click)=\"closeDialog()\">\u623B\u308B</button>\r\n    </div>\r\n  </div>\r\n  ",
                styles: ["", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlPopupDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.displayedColumns;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.name;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.uniqueStr;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.dataTitle;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.codes;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.unchangeableCodes;
    /** @type {?} */
    SHCtlPopupDialogComponent.prototype.codesHeader;
    /**
     * @type {?}
     * @private
     */
    SHCtlPopupDialogComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    SHCtlPopupDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHFormPopup extends SHFormControl {
    /**
     * @param {?} SmplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(SmplPopupService, dialog, bindCtlService, lockScreenService) {
        super();
        this.SmplPopupService = SmplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        //データタイトル名
        this.dataTitle = "";
        //データ区分名
        this.dataKbnName = "";
        //API URL
        this.apiUrl = "/api/";
        //入力コントロールに紐づく列番号
        this.bindColumnKey = 1;
        //ラベルコントロールに紐づく列番号
        this.bindColumnValue = 2;
        //入力コントロールを非表示にするモードフラグ
        this.hiddenInput = false;
        //ラベルを非表示にするモードフラグ
        this.hiddenLabel = false;
        //虫眼鏡アイコンを非表示にするモードフラグ
        this.hiddenPopupButton = false;
        //データキャッシュON/OFF機能フラグ
        this.dataCache = false;
        //ポップアップ上非表示となる列番号
        this.hiddenColumns = [];
        this.name = "";
        this.codes = [];
        this.codesHeader = [];
        this.extendWidth = ShCtlConst.DIALOG_WIDTH;
        //Dialogの結果を受け取る
        this.dialogRef = null;
        // 初回通信用フラグ
        this.initFetchFlg = false;
        // bindColumnArrayを利用し値が設定された場合にチェンジを止める
        this.noChangeFlg = `OFF`;
        // 通信中かどうか
        this.isBusy = false;
        this.ctlName = "SHCtlPopup";
    }
    // bindColumnArrayを利用し値が設定された場合にチェンジを止める
    /**
     * @return {?}
     */
    get noChangeFlgCtlName() {
        return `${this.ctlName}_${ShCtlConst.NO_CHANGE.FLG_SUFFIX}`;
    }
    // inputの参照
    /**
     * @return {?}
     */
    get ownValueInputElm() {
        return ((/** @type {?} */ ((document.querySelector(`textarea[name=${this.ctlName}], input[name=${this.ctlName}]`)))) || null);
    }
    /**
     * @return {?}
     */
    get ownLabelInputElm() {
        return (/** @type {?} */ (((document.querySelector(`textarea[name=${this.popupLabelName}], input[name=${this.popupLabelName}]`) || null))));
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    noChangeFlgChange(event) {
        this.noChangeFlg = event.target.value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.noChangeFlg = `OFF`;
        }), 1000);
    }
    /**
     * 入力コントロールの幅を指定
     * @return {?}
     */
    setInputWidth() {
        return this.hiddenLabel ? { width: "100%" } : { width: "33.3%" };
    }
    /**
     * ラベルコントロールの幅を指定
     * @return {?}
     */
    setLabelWidth() {
        return this.hiddenInput ? { width: "100%" } : { width: "66.6%" };
    }
    /**
     * データバインドされた値を再設定する際に値を検証し
     * 親コンポーネントに渡す
     * @param {?} changes 現在の値と直前の値を取得出来る
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.currentValue) {
            this.name = "";
            this.value = "";
            return;
        }
        if (this.noChangeFlg == "OFF") {
            if (changes.value && changes.value.currentValue) {
                if (changes.value.currentValue != changes.value.previousValue) {
                    this.fetchCodes(this.apiUrl);
                    return;
                }
            }
            if (changes.value && changes.value.firstChange) {
                this.initFetchFlg = true;
            }
            if (this.initFetchFlg) {
                if (!this.value || !changes.value.currentValue)
                    return;
                this.fetchCodes(this.apiUrl);
                this.initFetchFlg = false;
            }
            if (changes.apiUrl &&
                changes.apiUrl.previousValue != changes.apiUrl.currentValue &&
                !this.isBindInputNull(this.bindColumnArray)) {
                if (this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)
                    .length == 0) {
                    if (changes.value &&
                        changes.value.currentValue == changes.value.previousValue)
                        return;
                    this.fetchCodes(changes.apiUrl.currentValue);
                }
                else {
                    this.codes = Object(this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)).data;
                    this.value = this.setName(this.value);
                }
            }
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.noChangeFlg = `OFF`;
            }), 1000);
        }), 0);
    }
    /**
     * プロパティの初期化
     * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
        // //ユニークな文字列
        if (this.isDisabled) {
            if (this.SmplPopupService.getMasterData(this.apiUrl).length <= 0) {
                this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.codes = response.data;
                    this.codesHeader = Object.values(response.header);
                }));
            }
        }
    }
    /**
     * api 通信 マスタから取得
     * @param {?} url
     * @param {?=} value
     * @return {?}
     */
    fetchCodes(url, value) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isBusy)
                return;
            this.isBusy = true;
            this.lockScreenService.lockScreen();
            ((/** @type {?} */ (document.activeElement))).blur();
            return Promise.resolve(this.SmplPopupService.fetchAll(url)).catch((/**
             * @param {?} _
             * @return {?}
             */
            _ => { this.lockScreenService.unlock(); })).then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.codes = response.data;
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
                /** @type {?} */
                const ok = this.checkValue(value || this.value);
                /** @type {?} */
                let result = "";
                if (ok) {
                    if (value || this.value) {
                        result = this.setName(value || this.value);
                    }
                    if (this.dataCache) {
                        this.SmplPopupService.setMasterData(url, response);
                    }
                }
                this.isBusy = false;
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    resolve(result);
                    this.lockScreenService.unlock();
                }));
            }));
        });
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceSign(event);
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        // valueの値を一時対比　ダイアログを閉じる際に比較します
        /** @type {?} */
        const tmp = this.value;
        if (!this.popupWidth &&
            this.codes.length != 0 &&
            Object.values(this.codes[0]).length >= 4) {
            this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
        }
        this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
            height: ShCtlConst.DIALOG_HEIGHT,
            width: this.extendWidth,
            data: {
                dataTitle: this.dataTitle,
                codes: this.codes,
                codesHeader: this.codesHeader,
                hiddenColumns: this.hiddenColumns,
            },
        });
        this.dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                this.setValueName(result);
                //this.allocateToInputValue(result);
                this.bindCtlService.setNoChangeFlg({
                    bindColumnArray: this.bindColumnArray,
                    record: result,
                });
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record: result,
                });
                this.noChangeFlg = `ON`;
                //changeイベント経由でemitすると無条件でafterChangeイベントが呼ばれるので
                //値を比較し変更がなければこのタイミングでemitする
                /** @type {?} */
                const resultValues = Object.values(result);
                if (resultValues && resultValues.includes(tmp)) {
                    this.valueChange.emit(this.value);
                    return;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dispatchOwnValueInputChangeEvent();
                }), 0);
            }
        }));
    }
    /**
     * \@ 自身のvalueに紐づくinputのチェンジイベントを発火
     * @private
     * @return {?}
     */
    dispatchOwnValueInputChangeEvent() {
        if (this.ownValueInputElm) {
            this.ownValueInputElm.dispatchEvent(new Event("change"));
        }
    }
    /**
     * \@ bind先のinputがnullかどうか
     * @param {?} bindColumnArray
     * @return {?}
     */
    isBindInputNull(bindColumnArray) {
        if (!bindColumnArray || bindColumnArray.length == 0)
            return true;
        return bindColumnArray
            .map((/**
         * @param {?} bindColumnData
         * @return {?}
         */
        (bindColumnData) => {
            return (/** @type {?} */ (document.querySelector(`input[name=${Object.keys(bindColumnData)[0]}]`)));
        }))
            .map((/**
         * @param {?} bindInput
         * @return {?}
         */
        (bindInput) => {
            if (!bindInput)
                return false;
            return !!bindInput.value;
        }))
            .includes(false);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterClick(event);
        }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.value = "";
        this.name = "";
        if (this.ownLabelInputElm) {
            this.ownLabelInputElm.value = "";
        }
        this.valueChange.emit("");
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        if (!event.target.value) {
            this.clearAll();
        }
        /** @type {?} */
        let flg = false;
        if (this.noChangeFlg == "OFF") {
            flg = true;
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                event.target.value) {
                this.noChangeFlg = "ON";
                this.fetchCodes(this.apiUrl, this.toText(event.target.value)).then((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.valueChange.emit(value);
                    event.target.value = this.toText(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.onAfterChange(event);
                    }), 0);
                }));
            }
            else {
                event.target.value = this.setName(event.target.value);
                this.valueChange.emit(event.target.value);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.onAfterChange(event);
                }), 0);
            }
        }
        if (!flg) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.valueChange.emit(event.target.value);
                this.onAfterChange(event);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.noChangeFlg = `OFF`;
                }), 1000);
            }), 0);
        }
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
    /**
     * 手入力の値からの検索結果が複数あった場合はアラートを出す
     * @param {?} value
     * @return {?}
     */
    checkValue(value) {
        if (!value)
            return false;
        //let matchedArray = [];
        if (this.codes[0]) {
            /** @type {?} */
            const filterResult = this.codes.filter((/**
             * @param {?} element
             * @return {?}
             */
            (element) => 
            //this.hasMatchRecords(element, value)
            Object.values(element)[this.bindColumnKey - 1] == value));
            if (filterResult.length == 0) {
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
            if (filterResult.length >= 2) {
                alert(value + "に複数の候補が検出されました");
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
        }
        return true;
    }
    /**
     * マスタ情報よりコードを取得
     * @return {?}
     */
    getCodes() {
        this.openDialog();
        if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0) {
            this.SmplPopupService.fetchAll(this.apiUrl).then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.codes = response.data;
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
                if (this.dataCache)
                    this.SmplPopupService.setMasterData(this.apiUrl, response);
                if (!this.dialogRef)
                    return;
                if (this.dialogRef.componentInstance) {
                    this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                    this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                    this.dialogRef.componentInstance.codes = this.codes;
                    this.dialogRef.componentInstance.dataTitle = this.dataTitle;
                    if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                        this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                    }
                    this.dialogRef.updateSize(this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                    /** @type {?} */
                    let cols = [];
                    this.dialogRef.componentInstance
                        .getHashKeys()
                        .forEach((/**
                     * @param {?} name
                     * @param {?} idx
                     * @return {?}
                     */
                    (name, idx) => {
                        if (!this.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        (_) => _ == idx + 1)))
                            cols.push(name);
                    }));
                    this.dialogRef.componentInstance.displayedColumns = cols;
                }
            }));
        }
        else {
            this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
            this.codesHeader = Object.values(Object(this.SmplPopupService.getMasterData(this.apiUrl)).header);
            if (this.dialogRef.componentInstance) {
                this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                this.dialogRef.componentInstance.codes = this.codes;
                this.dialogRef.componentInstance.dataTitle = this.dataTitle;
                if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                this.dialogRef.updateSize(this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                /** @type {?} */
                let cols = [];
                this.dialogRef.componentInstance.getHashKeys().forEach((/**
                 * @param {?} name
                 * @param {?} idx
                 * @return {?}
                 */
                (name, idx) => {
                    if (!this.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    (_) => _ == idx + 1)))
                        cols.push(name);
                }));
                this.dialogRef.componentInstance.displayedColumns = cols;
            }
        }
    }
    /**
     * 自コントロールのinput value に値を渡す
     * @param {?} matchedArray
     * @return {?}
     */
    setValueName(matchedArray) {
        if (Object.values(matchedArray)[this.bindColumnKey - 1]) {
            /** @type {?} */
            const val = Object.values(matchedArray)[this.bindColumnKey - 1].toString();
            this.value = val;
        }
        else {
            this.value = "";
        }
        if (Object.values(matchedArray)[this.bindColumnValue - 1]) {
            this.name = Object.values(matchedArray)[this.bindColumnValue - 1].toString();
        }
        else {
            this.name = "";
        }
    }
    /**
     * 親子関係になっているinputがある場合に検索対象を親まで広げる
     * @private
     * @param {?} element
     * @param {?} val
     * @return {?}
     */
    hasMatchRecords(element, val) {
        // 検索結果一行分の比較すべき列の値
        /** @type {?} */
        let searchs = [];
        // 現在の比較すべき値
        /** @type {?} */
        let values = [val];
        searchs.push(Object.values(element)[this.bindColumnKey - 1]);
        if (this.bindColumnArray && this.bindColumnArray.length != 0) {
            this.bindColumnArray.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                let bindIndex = ((/** @type {?} */ (Object.values(data)[0]))) - 1;
                searchs.push(Object.values(element)[bindIndex]);
                /** @type {?} */
                let targetInput = (/** @type {?} */ (document.querySelector(`input[name=${Object.keys(data)[0]}]`)));
                if (targetInput) {
                    if (targetInput.value) {
                        values.push(targetInput.value);
                    }
                    else {
                        searchs = searchs.filter((/**
                         * @param {?} val
                         * @return {?}
                         */
                        (val) => val != Object.values(element)[bindIndex]));
                    }
                }
            }));
        }
        /** @type {?} */
        const result = searchs.map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => values.includes(val)));
        return !result.includes(false);
    }
    /**
     * 選択された区分コードに紐づく区分名を設定
     * @param {?} val
     * @return {?}
     */
    setName(val) {
        /** @type {?} */
        const record = this.codes
            ? this.codes.find((/**
             * @param {?} element
             * @return {?}
             */
            (element) => Object.values(element)[this.bindColumnKey - 1] == val))
            : null;
        if (record) {
            /** @type {?} */
            let kbnValue = Object.values(record)[this.bindColumnValue - 1];
            this.name = kbnValue ? kbnValue.toString() : "";
            this.bindCtlService.setBindValue({
                bindColumnArray: this.bindColumnArray,
                record,
            });
        }
        else {
            val = "";
            this.clearAll();
        }
        return val;
    }
    /**
     * 入力のクリア
     * @return {?}
     */
    clearValue() {
        this.value = "";
        this.name = "";
        if (this.ctlName) {
            this.ownValueInputElm.value = "";
            //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ownValueInputElm.dispatchEvent(new Event("change"));
                this.ownValueInputElm.dispatchEvent(new Event("focus"));
            }), 0);
        }
        if (this.popupLabelName) {
            this.ownLabelInputElm.value = "";
        }
    }
    /**
     * サブクラスでオーバーライドして使うので消さない
     * @param {?} s
     * @return {?}
     */
    toText(s) {
        return s;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    extractBindValue(result) {
        if (!result)
            return;
        return Object.values(result)[this.bindColumnKey - 1];
    }
}
SHFormPopup.propDecorators = {
    dataTitle: [{ type: Input }],
    dataKbnName: [{ type: Input }],
    apiUrl: [{ type: Input }],
    bindColumnKey: [{ type: Input }],
    bindColumnValue: [{ type: Input }],
    ctlName: [{ type: Input }],
    popupLabelName: [{ type: Input }],
    bindColumnArray: [{ type: Input }],
    hiddenInput: [{ type: Input }],
    hiddenLabel: [{ type: Input }],
    hiddenPopupButton: [{ type: Input }],
    dataCache: [{ type: Input }],
    hiddenColumns: [{ type: Input }],
    popupWidth: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHFormPopup.prototype.dataTitle;
    /** @type {?} */
    SHFormPopup.prototype.dataKbnName;
    /** @type {?} */
    SHFormPopup.prototype.apiUrl;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnKey;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnValue;
    /** @type {?} */
    SHFormPopup.prototype.ctlName;
    /** @type {?} */
    SHFormPopup.prototype.popupLabelName;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnArray;
    /** @type {?} */
    SHFormPopup.prototype.hiddenInput;
    /** @type {?} */
    SHFormPopup.prototype.hiddenLabel;
    /** @type {?} */
    SHFormPopup.prototype.hiddenPopupButton;
    /** @type {?} */
    SHFormPopup.prototype.dataCache;
    /** @type {?} */
    SHFormPopup.prototype.hiddenColumns;
    /** @type {?} */
    SHFormPopup.prototype.popupWidth;
    /** @type {?} */
    SHFormPopup.prototype.name;
    /** @type {?} */
    SHFormPopup.prototype.event;
    /** @type {?} */
    SHFormPopup.prototype.codes;
    /** @type {?} */
    SHFormPopup.prototype.codesHeader;
    /** @type {?} */
    SHFormPopup.prototype.extendWidth;
    /** @type {?} */
    SHFormPopup.prototype.dialogRef;
    /** @type {?} */
    SHFormPopup.prototype.initFetchFlg;
    /** @type {?} */
    SHFormPopup.prototype.noChangeFlg;
    /** @type {?} */
    SHFormPopup.prototype.isBusy;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.SmplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.lockScreenService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * ShCtl　Api通信クラス
 */
class ShCtlApiService {
    /**
     * @param {?} apiComService
     */
    constructor(apiComService) {
        this.apiComService = apiComService;
    }
    /**
     * API返却結果に応じて処理分岐を行い、ApplicationDataのみを返却する
     * @private
     * @template T
     * @param {?} apiResponseBody
     * @return {?} API返却結果のApplicationData
     */
    getApplicationData(apiResponseBody) {
        //バリデーション処理
        //アラート処理
        //システムに返す際は処理に必要なデータだけにする
        return apiResponseBody.applicationData;
    }
    /**
     * GET
     * @template T
     * @param {?} url ApiUrl
     * @return {?} API返却結果
     */
    get(url) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.get(url, false)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * POST
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @return {?} API返却結果
     */
    post(url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.post(url, data)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * PUT
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @return {?} API返却結果
     */
    put(url, data) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.put(url, data)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * DELETE
     * @template T
     * @param {?} url ApiUrl
     * @return {?} API返却結果
     */
    delete(url) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.delete(url)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
}
ShCtlApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShCtlApiService.ctorParameters = () => [
    { type: ShHttpClientService }
];
/** @nocollapse */ ShCtlApiService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ShCtlApiService_Factory() { return new ShCtlApiService(ɵɵinject(ShHttpClientService)); }, token: ShCtlApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShCtlApiService.prototype.apiComService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 区分マスタの情報を取得
 */
class SmplPopupService {
    /**
     * @param {?} apiComService
     */
    constructor(apiComService) {
        this.apiComService = apiComService;
        this.popupCdSubject = new Subject();
        this.popupCdState = this.popupCdSubject.asObservable();
        //汎用マスタ
        this.masterCache = [];
    }
    /**
     * 汎用マスタ取得
     * @param {?} url
     * @return {?}
     */
    fetchAll(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiComService.get(url);
        });
    }
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    getMasterData(key) {
        /** @type {?} */
        let cache = this.masterCache.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.masterName == key;
        }));
        return cache.length > 0 ? cache[0].masterCache : [];
    }
    /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    setMasterData(key, masterData) {
        if (this.masterCache.length > 0) {
            for (let item of this.masterCache) {
                if (item.masterName == key) {
                    item.masterCache = masterData;
                    break;
                }
            }
        }
        this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
    }
}
SmplPopupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SmplPopupService.ctorParameters = () => [
    { type: ShCtlApiService }
];
/** @nocollapse */ SmplPopupService.ngInjectableDef = ɵɵdefineInjectable({ factory: function SmplPopupService_Factory() { return new SmplPopupService(ɵɵinject(ShCtlApiService)); }, token: SmplPopupService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.popupCdSubject;
    /** @type {?} */
    SmplPopupService.prototype.popupCdState;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.masterCache;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.apiComService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NoChangeFlg = (/** @type {?} */ ({
    ON: `ON`,
    OFF: `OFF`
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BindCtlService {
    constructor() {
        this.NO_CHANGE_FLG_SUFFIX = ShCtlConst.NO_CHANGE.FLG_SUFFIX;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setNoChangeFlg(param) {
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        const info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const targetInput = (/** @type {?} */ (document.querySelector(`input[name=${data.ctlName}_${this.NO_CHANGE_FLG_SUFFIX}],textarea[name=${data.ctlName}_${this.NO_CHANGE_FLG_SUFFIX}]`)));
            if (!targetInput)
                return;
            targetInput.value = NoChangeFlg.ON;
            targetInput.dispatchEvent(new Event(`change`));
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setBindValue(param) {
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        const info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const targetInput = (/** @type {?} */ (document.querySelector(`input[name=${data.ctlName}],textarea[name=${data.ctlName}]`)));
            if (!targetInput)
                return;
            targetInput.value = data.value;
            targetInput.dispatchEvent(new Event(`change`));
        }));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    generateBindInputInfo(param) {
        return param.bindColumnArray.map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const column = Number(Object.values(data)[0]);
            return {
                ctlName: Object.keys(data)[0],
                value: isNaN(Number(column)) ? `` : (/** @type {?} */ (Object.values(param.record)[column - 1])),
            };
        }));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    isParamEmpty(param) {
        if (!param.bindColumnArray || param.bindColumnArray.length == 0)
            return true;
        if (!param.record)
            return true;
        return false;
    }
}
BindCtlService.decorators = [
    { type: Injectable, args: [{
                providedIn: `root`,
            },] }
];
/** @nocollapse */
BindCtlService.ctorParameters = () => [];
/** @nocollapse */ BindCtlService.ngInjectableDef = ɵɵdefineInjectable({ factory: function BindCtlService_Factory() { return new BindCtlService(); }, token: BindCtlService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    BindCtlService.prototype.NO_CHANGE_FLG_SUFFIX;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LockScreenService {
    /**
     * コンストラクタ
     */
    constructor() {
        this.isConnecting = false;
        this.isConnectingSubject = new Subject();
        this.isConnectingState = this.isConnectingSubject.asObservable();
        this.count = 0;
    }
    /**
     * 画面をロックする(ユーザーが操作出来ないようにする)
     * @return {?}
     */
    lockScreen() {
        this.count += 1;
        if (this.count === 1) {
            this.isConnecting = true;
            this.isConnectingSubject.next(this.isConnecting);
        }
    }
    /**
     * 画面のロックを解除する(ユーザーが操作出来る状態にする)
     * @return {?}
     */
    unlock() {
        this.count -= 1;
        if (this.count === 0) {
            this.isConnecting = false;
            this.isConnectingSubject.next(this.isConnecting);
        }
    }
}
LockScreenService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LockScreenService.ctorParameters = () => [];
/** @nocollapse */ LockScreenService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LockScreenService_Factory() { return new LockScreenService(); }, token: LockScreenService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LockScreenService.prototype.isConnecting;
    /**
     * @type {?}
     * @private
     */
    LockScreenService.prototype.isConnectingSubject;
    /** @type {?} */
    LockScreenService.prototype.isConnectingState;
    /** @type {?} */
    LockScreenService.prototype.count;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlJigCodeComponent extends SHFormPopup {
    /**
     * @param {?} smplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(smplPopupService, dialog, bindCtlService, lockScreenService) {
        super(smplPopupService, dialog, bindCtlService, lockScreenService);
        this.smplPopupService = smplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        this.ctlName = "SHCtlJigCode";
        this.maxlength = 6;
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceSign(event);
        SHCtlCommon.sliceLength(event, this.maxlength);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 3桁入力時に残りを補完する
     * @param {?} jigCode 事業所コード
     * @return {?}
     */
    toText(jigCode) {
        // ブランクなら
        if (SHCtlCommon.isBlank(jigCode))
            return "";
        // 6桁は処理しない
        if (jigCode.trim().length == 6)
            return jigCode;
        /** @type {?} */
        let result = null;
        if (jigCode.trim().length == 3) {
            /** @type {?} */
            let firstString = parseInt((Number(jigCode.substr(0, 1)) * 9).toString(), 10);
            // 一文字目
            /** @type {?} */
            let secondString = parseInt((Number(jigCode.substr(1, 1)) * 8).toString(), 10);
            // 弐文字目
            /** @type {?} */
            let thirdString = parseInt((Number(jigCode.substr(2, 1)) * 7).toString(), 10);
            // 参文字目
            /** @type {?} */
            const strNo = firstString + secondString + thirdString;
            /** @type {?} */
            const lastStrting = strNo.toString().substr(strNo.toString().length - 1, 1);
            // one + two + three + '00' + lastNo
            result = `${jigCode}00${lastStrting}`;
        }
        else {
            result = "";
        }
        return result;
    }
}
SHCtlJigCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-jig-code',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input [required]=\"required\" #inputElm matInput (input)=\"onInput($event)\"\r\n          (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n          class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"result-container\" style=\"width: 66.6%;\">\r\n        <input class=\"result-input {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n        attr.name=\"{{popupLabelName}}\" [ngClass]=\"objClass\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}\r\n    </span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input [required]=\"required\" #inputElm matInput (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n        class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n      attr.name=\"{{popupLabelName}}\" [ngClass]=\"objClass\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis;padding-right:10%}.display-ctl-view{display:-webkit-box;display:flex}.display-block{display:inline-block}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlJigCodeComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog },
    { type: BindCtlService },
    { type: LockScreenService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    SHCtlJigCodeComponent.prototype.smplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJigCodeComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJigCodeComponent.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJigCodeComponent.prototype.lockScreenService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Data$1() { }
if (false) {
    /** @type {?} */
    Data$1.prototype.dataTitle;
    /** @type {?} */
    Data$1.prototype.value;
    /** @type {?} */
    Data$1.prototype.uniqueColumns;
    /** @type {?} */
    Data$1.prototype.hiddenColumns;
}
class SHCtlPopupDialogMultiComponent {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.displayedColumns = [];
        this.name = "";
        this.uniqueStr = "";
        this.selection = new SelectionModel(true, []);
    }
    /**
     * 値がバインドされる時に呼ばれる
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * 値の初期化
     * @private
     * @return {?}
     */
    init() {
        this.dataTitle = this.data.dataTitle;
        if (this.data.value)
            this.data.value.forEach((/**
             * @param {?} row
             * @return {?}
             */
            row => this.selection.select(row)));
        /** @type {?} */
        let cols = ['select'];
        this.getHashKeys().forEach((/**
         * @param {?} name
         * @param {?} idx
         * @return {?}
         */
        (name, idx) => {
            if (!this.data.hiddenColumns.find((/**
             * @param {?} _
             * @return {?}
             */
            _ => _ == (idx + 1))))
                cols.push(name);
        }));
        this.displayedColumns = cols;
        this.uniqueStr = SHCtlCommon.getUniqueStr();
    }
    /**
     * テーブルのヘッダーを編集
     * @return {?}
     */
    ngAfterViewChecked() {
        /** @type {?} */
        let headerElement = document.getElementsByTagName('th');
        /** @type {?} */
        let countBlank = 0;
        if (!this.codesHeader)
            return;
        for (let i = 0; i < headerElement.length; i++) {
            if (this.codesHeader[i] != "") {
                for (let e = 1; e <= countBlank; e++) {
                    headerElement[i - e].style.display = 'none';
                }
                countBlank = 0;
            }
            else if (this.codesHeader[i] === "") {
                countBlank += 1;
                headerElement[i - countBlank].colSpan = countBlank + 1;
                headerElement[i - countBlank].style.textAlign = 'center';
                if (i === headerElement.length - 1) {
                    for (let j = 0; j < countBlank; j++) {
                        headerElement[i - j].style.display = 'none';
                    }
                }
            }
        }
    }
    /**
     * チェックボックス選択
     * @param {?} row
     * @return {?}
     */
    itemSelect(row) {
        if (!this.isItemSelected(row))
            this.selection.select(row);
    }
    /**
     * 行選択によるチェックボックス値の操作
     * @param {?} row
     * @return {?}
     */
    itemToggle(row) {
        if (!this.isItemSelected(row))
            this.selection.select(row);
        else {
            /** @type {?} */
            let keys = Object.keys(row);
            /** @type {?} */
            let item = this.selection.selected.find((/**
             * @param {?} _
             * @return {?}
             */
            _ => {
                /** @type {?} */
                let isSame = true;
                keys.forEach((/**
                 * @param {?} key
                 * @param {?} idx
                 * @return {?}
                 */
                (key, idx) => {
                    if (this.data.uniqueColumns.find((/**
                     * @param {?} __
                     * @return {?}
                     */
                    __ => __ == (idx + 1)))) {
                        if (_[key] != row[key]) {
                            isSame = false;
                            return;
                        }
                    }
                }));
                return isSame;
            }));
            this.selection.deselect(item);
        }
    }
    /**
     * 項目を選択しているかどうか
     * @param {?} row
     * @return {?}
     */
    isItemSelected(row) {
        if (!this.selection.selected)
            return false;
        /** @type {?} */
        let keys = Object.keys(row);
        /** @type {?} */
        let item = this.selection.selected.find((/**
         * @param {?} _
         * @return {?}
         */
        _ => {
            /** @type {?} */
            let isSame = true;
            keys.forEach((/**
             * @param {?} key
             * @param {?} idx
             * @return {?}
             */
            (key, idx) => {
                if (this.data.uniqueColumns.find((/**
                 * @param {?} __
                 * @return {?}
                 */
                __ => __ == (idx + 1)))) {
                    if (_[key] != row[key]) {
                        isSame = false;
                        return;
                    }
                }
            }));
            return isSame;
        }));
        return item ? true : false;
    }
    /**
     * ダイアログを閉じる
     * @return {?}
     */
    closeDialog() {
        //ダイアログを閉める時に抽入値を親に渡す
        this.dialogRef.close();
    }
    /**
     * ポップアップから選択されたデータを親に返す
     * @return {?}
     */
    returnDialog() {
        //ダイアログを閉める時に選択値を親に渡す
        this.dialogRef.close(this.selection.selected);
    }
    /**
     * 全ての項目を選択しているかどうか
     * @return {?}
     */
    isAllSelected() {
        /** @type {?} */
        const numSelected = this.selection.selected.length;
        /** @type {?} */
        const numRows = this.unchangeableCodes.length;
        return numSelected === numRows;
    }
    /**
     * 全選択・全解除処理
     * @return {?}
     */
    masterToggle() {
        this.isAllSelected() ?
            this.selection.clear() :
            this.unchangeableCodes.forEach((/**
             * @param {?} row
             * @return {?}
             */
            row => this.itemSelect(row)));
    }
    /**
     * チェックボックスラベル
     * @param {?=} row
     * @return {?}
     */
    checkboxLabel(row) {
        if (!row) {
            return `${this.isAllSelected() ? 'select' : 'deselect'} all`;
        }
        return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;
    }
    /**
     * データのkeyを返す
     * @return {?}
     */
    getHashKeys() {
        if (!this.unchangeableCodes || this.unchangeableCodes.length == 0) {
            return;
        }
        else {
            return Object.keys(this.unchangeableCodes[0]);
        }
    }
    /**
     * ポップアップ内での曖昧検索
     * スペース区切りで1キーワードとする
     * @param {?} event inputイベント
     * @return {?}
     */
    filter(event) {
        /** @type {?} */
        const filterString = event.target.value;
        /** @type {?} */
        let fileterStrArray = filterString.replace(/　/g, " ").split(" ");
        fileterStrArray = fileterStrArray.filter((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            return value;
        }));
        /** @type {?} */
        let resultArray;
        resultArray = this.unchangeableCodes.concat();
        for (let i = 0; i < fileterStrArray.length; i++) {
            /** @type {?} */
            let obj = this;
            resultArray = resultArray.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                let values = Object.values(value);
                for (let j = 0; j < values.length; j++) {
                    if (obj.data.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    _ => _ == (j + 1))))
                        continue;
                    if (values[j] != null && values[j].toString().match(fileterStrArray[i])) {
                        return true;
                    }
                }
                return false;
            }));
        }
        this.codes = resultArray;
    }
}
SHCtlPopupDialogMultiComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-popup-multi-dialog',
                template: "<div *ngIf=\"!unchangeableCodes\" class=\"overlay\">\r\n  <mat-spinner></mat-spinner>\r\n  <span class=\"loader-text\">Loading...</span>\r\n</div> \r\n<div class=\"sh-container\" id={{uniqueStr}}>\r\n    <h1 mat-dialog-title class=\"sh-text-center\">{{dataTitle}}</h1>\r\n    <div mat-dialog-content class=\"sh-dialog-content\">\r\n      <mat-form-field class=\"sh-width-100\">\r\n        <input matInput placeholder=\"\u691C\u7D22\u6B04\" (input)=\"filter($event)\"/>\r\n      </mat-form-field>\r\n      <div class=\"sh-dialog-table-container mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"codes\" class=\"sh-width-100\">\r\n          <ng-container matColumnDef=\"select\">\r\n            <th mat-header-cell *matHeaderCellDef>\r\n              <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                            [aria-label]=\"checkboxLabel()\">\r\n              </mat-checkbox>\r\n            </th>\r\n            <td mat-cell *matCellDef=\"let row\">\r\n              <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                            (change)=\"$event ? itemToggle(row) : null\"\r\n                            [checked]=\"isItemSelected(row)\"\r\n                            [aria-label]=\"checkboxLabel(row)\">\r\n              </mat-checkbox>\r\n            </td>\r\n          </ng-container>\r\n          <span *ngFor=\"let key of getHashKeys(); let i = index\">\r\n            <ng-container matColumnDef=\"{{key}}\">\r\n              <th mat-header-cell *matHeaderCellDef>{{codesHeader[i]}}</th>\r\n              <td mat-cell *matCellDef=\"let element\">{{element[key]}}</td>\r\n            </ng-container>\r\n          </span>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"itemToggle(row)\"></tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <div ShFlexRow style=\"width: 100%\">\r\n        <div ShFlex [colLg]=\"50\" [colMd]=\"50\">\r\n          <button mat-raised-button (click)=\"closeDialog()\">\u623B\u308B</button>\r\n        </div>\r\n        <div ShFlex [colLg]=\"50\" [colMd]=\"50\" style=\"text-align: right; padding-right: 0px;\">\r\n          <span style=\"margin-right: 1em;\">\u9078\u629E\u6570\u3000{{selection.selected ? selection.selected.length : \"-\"}} / {{unchangeableCodes ? unchangeableCodes.length : \"-\"}}</span>\r\n          <button mat-raised-button color=\"primary\" (click)=\"returnDialog()\">\u9078\u629E</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  ",
                styles: ["", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlPopupDialogMultiComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.displayedColumns;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.name;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.uniqueStr;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.dataTitle;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.codes;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.unchangeableCodes;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.codesHeader;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.selection;
    /**
     * @type {?}
     * @private
     */
    SHCtlPopupDialogMultiComponent.prototype.dialogRef;
    /** @type {?} */
    SHCtlPopupDialogMultiComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlJyuCodeComponent extends SHFormPopup {
    /**
     * @param {?} smplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(smplPopupService, dialog, bindCtlService, lockScreenService) {
        super(smplPopupService, dialog, bindCtlService, lockScreenService);
        this.smplPopupService = smplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        this.enabledHalfKanaInput = true;
        this.obj = ".SHCtlJyuCode";
        this.ctlName = "SHCtlJyuCode";
        this.maxlength = 6;
    }
    /**
     * コンポーネントに値がバインドされた後で呼び出される
     * プロパティの初期化
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        event.target.value = event.target.value.replace(/[^0-9]/g, "");
        SHCtlCommon.sliceLength(event, this.maxlength);
        if (!this.enabledHalfKanaInput) {
            SHCtlCommon.replaceFullWidth(event);
        }
        event.target.value = event.target.value.replace(/["！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・"]/g, "");
        if (event.target.value.length >= 6 &&
            event.inputType != "deleteContentBackward") {
            if (isNaN(parseInt(event.target.value)) &&
                event.target.value.length != 7) {
                return;
            }
            return;
        }
        if (event.inputType !== "insertCompositionText") {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceSign(event);
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        /** @type {?} */
        let flg = false;
        if (this.noChangeFlg == `OFF`) {
            flg = true;
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                event.target.value) {
                this.fetchCodes(this.apiUrl).then((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.valueChange.emit(value);
                    event.target.value = this.toText(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.onAfterChange(event);
                    }), 0);
                }));
            }
            else {
                this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                event.target.value = this.setName(event.target.value);
                this.valueChange.emit(event.target.value);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.onAfterChange(event);
                }), 0);
            }
        }
        if (!flg) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                // this.noChangeFlg == `OFF`;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.noChangeFlg = `OFF`;
                }), 1000);
                this.valueChange.emit(event.target.value);
                this.onAfterChange(event);
                event.target.value = this.toText(event.target.value);
            }), 0);
        }
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        /** @type {?} */
        let extendWidth;
        if (this.codes) {
            if (!this.popupWidth &&
                this.codes.length != 0 &&
                Object.values(this.codes[0]).length >= 4) {
                this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
            }
            /** @type {?} */
            let rawCodes;
            /** @type {?} */
            let rawCodesArray = [];
            for (let i = 0; this.codes.length > i; i++) {
                rawCodes = this.codes[i].contactCode;
                rawCodesArray.push(rawCodes);
                /** @type {?} */
                let code = Object.values(this.codes[i])[this.bindColumnKey - 1].toString()
                    .substr(2);
                this.codes[i].contactCode = code;
            }
            this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                height: ShCtlConst.DIALOG_HEIGHT,
                width: extendWidth,
                data: {
                    dataTitle: this.dataTitle,
                    codes: this.codes,
                    codesHeader: this.codesHeader,
                    hiddenColumns: this.hiddenColumns,
                },
            });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.setValueName(result);
                    this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.bindCtlService.setBindValue({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.noChangeFlg = `ON`;
                    this.valueChange.emit(this.extractBindValue(result));
                    this.ownValueInputElm.dispatchEvent(new Event("change"));
                }
            }));
        }
    }
    /**
     * 選択された区分コードに紐づく区分名を設定
     * @param {?} val
     * @return {?}
     */
    setName(val) {
        /** @type {?} */
        let record;
        val = this.toText(val);
        if (val.length == 6) {
            record = this.codes.find((/**
             * @param {?} element
             * @return {?}
             */
            (element) => this.toText(Object.values(element)[this.bindColumnKey - 1]).includes(val)));
        }
        if (record != null) {
            /** @type {?} */
            const name = (/** @type {?} */ (Object.values(record)[this.bindColumnValue - 1]));
            if (name && val.length == 6) {
                this.setValueName(record);
                this.noChangeFlg = "ON";
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                this.bindCtlService.setNoChangeFlg({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                val = Object.values(record)[this.bindColumnKey - 1];
                /** @type {?} */
                const inputElement = this.ownValueInputElm;
                if (inputElement) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        inputElement.value = this.toText(val);
                    }), 0);
                }
            }
        }
        else {
            val = ``;
        }
        return val;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkValue(value) {
        if (!value)
            return false;
        if (value.length < 6) {
            this.clearValue();
            return false;
        }
        //let matchedArray = [];
        if (this.codes[0]) {
            /** @type {?} */
            const filterResult = this.codes.filter((/**
             * @param {?} element
             * @return {?}
             */
            (element) => 
            //this.hasMatchRecords(element, value)
            ((/** @type {?} */ (Object.values(element)[this.bindColumnKey - 1]))).includes(value)));
            if (filterResult.length == 0) {
                this.clearValue();
                return false;
            }
            if (filterResult.length >= 2) {
                alert(value + "に複数の候補が検出されました");
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
        }
        return true;
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
    /**
     * onKeyUp
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            event.target.value = this.toHankaku(this.hiraganaToKatagana(event.target.value));
        }
    }
    /**
     * 先頭除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        if (inputTargetValue.length === 8) {
            return inputTargetValue.substr(2);
        }
        return inputTargetValue;
    }
    /**
     * ひらがなをカタカナに変換
     * @param {?} inputValue
     * @return {?}
     */
    hiraganaToKatagana(inputValue) {
        return inputValue.replace(/[\u3041-\u3096]/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            /** @type {?} */
            var chr = match.charCodeAt(0) + 0x60;
            return String.fromCharCode(chr);
        }));
    }
    /**
     * 入力文字を半角カナに変換
     * @param {?} inputValue
     * @return {?}
     */
    toHankaku(inputValue) {
        /** @type {?} */
        let half = "0123456789";
        half += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        half += "abcdefghijklmnopqrstuvwxyz";
        half += "｡､｢\\｣;:･-+|_@., ";
        half += "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮｰ";
        /** @type {?} */
        let halfArr = new Array("ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ");
        /** @type {?} */
        let full = "０１２３４５６７８９";
        full += "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ";
        full += "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ";
        full += "。、「￥」；：・－＋｜＿＠．，　";
        full +=
            "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョー";
        /** @type {?} */
        let fullArr = new Array("ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ");
        /** @type {?} */
        let str = "";
        //半角カナ用
        for (let i = 0; i < halfArr.length; i++) {
            /** @type {?} */
            let reg = new RegExp(fullArr[i], "g");
            inputValue = inputValue.replace(reg, halfArr[i]);
        }
        for (let i = 0; i < inputValue.length; i++) {
            /** @type {?} */
            let oneStr = inputValue.charAt(i);
            /** @type {?} */
            let num = full.indexOf(oneStr, 0);
            oneStr = num >= 0 ? half.charAt(num) : oneStr;
            str += oneStr;
        }
        return str;
    }
}
SHCtlJyuCodeComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-jyu-code",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\" (keyup)=\"onKeyUp($event)\"\r\n          (change)=\"onChange($event)\" [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key {{strClass}}\"\r\n          [disabled]=\"disabled\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field style=\"width: 66.6%;\" class=\"result-container\">\r\n        <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n          attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\" (keyup)=\"onKeyUp($event)\"\r\n        (change)=\"onChange($event)\" [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\"\r\n        [disabled]=\"disabled\" (focus)=\"onFocus($event)\" maxlength=\"8\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n        attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{toText(value)}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlJyuCodeComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog },
    { type: BindCtlService },
    { type: LockScreenService }
];
SHCtlJyuCodeComponent.propDecorators = {
    enabledHalfKanaInput: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlJyuCodeComponent.prototype.enabledHalfKanaInput;
    /** @type {?} */
    SHCtlJyuCodeComponent.prototype.obj;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJyuCodeComponent.prototype.smplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJyuCodeComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJyuCodeComponent.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlJyuCodeComponent.prototype.lockScreenService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlKatakanaComponent extends SHFormControl {
    constructor() {
        super();
        //入力変換時を補足するための値保持
        this._data = "";
        this.ctlName = "SHCtlKatakana";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const isSameData = (this._data == event.data);
        this._data = event.data;
        //入力変換中は書き換えを行わない
        if (event.isComposing && (!event.isComposing || !isSameData))
            return;
        if (!event.isComposing) {
            if (this.maxByteLength > 0)
                if (event.inputType !== 'insertCompositionText') {
                    this.onKeyDown(event);
                    SHCtlCommon.sliceLength(event, this.maxByteLength);
                }
        }
    }
    /**
     * onPaste
     * @param {?} event paste
     * @return {?}
     */
    onPaste(event) {
        /** @type {?} */
        let obj = this;
        setTimeout((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            SHCtlCommon.replaceHalfDoubleQuote(event);
            obj.replaceFullWIdth(event);
        }), 100);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onChange
     * @param {?} event chage
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        this.replaceFullWIdth(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            SHCtlCommon.replaceHalfDoubleQuote(event);
            this.replaceFullWIdth(event);
        }
    }
    /**
     * onKeyDown
     * @param {?} event KeyDown
     * @return {?}
     */
    onKeyDown(event) {
        super.onKeyDown(event);
    }
    /**
     * 除去変換
     * @param {?} event
     * @return {?}
     */
    replaceFullWIdth(event) {
        event.target.value = event.target.value.replace(/[ぁ-んァ-ヶ\u30e0-\u9fcfａ-ｚＡ-Ｚ１-９！”＃＄％＆’（）＝～｜￥＾－‘｛＋＊｝＜＞？＿＠「；：」、。・￥ー　]/g, "");
    }
}
SHCtlKatakanaComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-katakana',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        (paste)=\"onPaste($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlKatakana can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n      (paste)=\"onPaste($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlKatakana can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\"\r\n      maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlKatakanaComponent.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SHCtlKatakanaComponent.prototype._data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlNumberComponent extends SHFormControl {
    constructor() {
        super();
        this.min = 0;
        this.max = 99999999999;
        this.decimaldigit = 0;
        this.firstFlag = true;
        this.ctlName = "SHCtlNumber";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        /** @type {?} */
        let matInputElement = document.activeElement.classList.contains('mat-input-element');
        if (this.value && !matInputElement) {
            this.value = this.toText(this.value);
        }
    }
    /**
     * ngOnChangesイベント
     * 値変更時にフォーマットを整形
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                if (changes.value.currentValue === '' || changes.value.currentValue === undefined || changes.value.currentValue === String(/[^\x01-\x7E\xA1-\xDF]+$/g)) {
                    this.value = '';
                    return;
                }
                if (parseFloat(changes.value.currentValue) < this.min) {
                    this.value = String(this.min);
                }
                if (parseFloat(changes.value.currentValue) > this.max) {
                    this.value = String(this.max);
                }
                this.stringValue = this.toText(changes.value.currentValue);
                this.value = parseFloat(parseFloat(changes.value.currentValue).toFixed(this.decimaldigit)).toString();
            }
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
        //2文字目以降の「-」の入力を受け付けない
        if (event.target.value.length > 1)
            event.target.value = event.target.value.slice(0, 1) + event.target.value.slice(1).replace(/[\-]/g, "");
        SHCtlCommon.replaceFullWidth(event);
        this.checkNumbersSigns(event);
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
            SHCtlCommon.replaceFullWidth(event);
            this.checkNumbersSigns(event);
        }
    }
    /**
     * マッチした値を記号に置き換える
     * @param {?} event input
     * @return {?}
     */
    checkNumbersSigns(event) {
        event.target.value = event.target.value.replace(/^[\.|,]/g, "");
        event.target.value = event.target.value.replace(/[\.]{2,}/g, ".");
        event.target.value = event.target.value.replace(/[\,]{2,}/g, ",");
        event.target.value = event.target.value.replace(/[\-]{1,}/g, "-");
        if ((/\d.*\.\d.*/).test(event.target.value) && event.data === ".") {
            event.target.value = event.target.value.slice(0, event.target.value.length - 1);
        }
    }
    /**
     * 条件に沿うvalueを返す
     * @param {?} event input
     * @return {?}
     */
    checkMinus(event) {
        return event.target.value.match(/\d/g) && event.data === "-";
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        //onChange発火時に数値でなければクリアする
        if (isNaN(Number(event.target.value)) === true) {
            event.target.value = '';
            return;
        }
        //min maxの値を反映させる
        event.target.value = this.setMinMax(event.target.value);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.removeComma(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        //桁数指定で値を丸める
        this.onBeforeBlur(event);
        //カンマ区切り
        setTimeout((/**
         * @return {?}
         */
        () => {
            event.target.value = this.toText(event.target.value);
        }), 100);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * カンマ付きの値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        inputTargetValue = this.removeComma(inputTargetValue);
        if (!inputTargetValue)
            return null;
        if (isNaN(Number(inputTargetValue)))
            return null;
        //桁数指定で値を丸める
        /** @type {?} */
        let ret = parseFloat(parseFloat(inputTargetValue).toFixed(this.decimaldigit)).toString();
        return parseFloat(ret).toLocaleString(undefined, {
            minimumFractionDigits: this.decimaldigit,
            maximumFractionDigits: this.decimaldigit
        });
    }
    /**
     * min maxを反映した値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    setMinMax(inputTargetValue) {
        if (!inputTargetValue)
            return "";
        if (isNaN(Number(inputTargetValue)))
            return "";
        if (parseFloat(inputTargetValue) < this.min) {
            inputTargetValue = this.min.toString();
        }
        if (parseFloat(inputTargetValue) > this.max) {
            inputTargetValue = this.max.toString();
        }
        inputTargetValue = parseFloat(parseFloat(inputTargetValue).toFixed(this.decimaldigit)).toString();
        return inputTargetValue;
    }
    /**
     * カンマを外した値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    removeComma(inputTargetValue) {
        inputTargetValue = new String(inputTargetValue).replace(/,/g, "");
        return inputTargetValue;
    }
}
SHCtlNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-number',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\"\r\n        value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\"\r\n      value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".item-title{margin-left:.5%;margin-right:25%}.display-ctl-view{display:-webkit-box;display:flex}.display-result{display:-webkit-box;display:flex;margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlNumberComponent.ctorParameters = () => [];
SHCtlNumberComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    decimaldigit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlNumberComponent.prototype.min;
    /** @type {?} */
    SHCtlNumberComponent.prototype.max;
    /** @type {?} */
    SHCtlNumberComponent.prototype.decimaldigit;
    /** @type {?} */
    SHCtlNumberComponent.prototype.stringValue;
    /** @type {?} */
    SHCtlNumberComponent.prototype.firstFlag;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlSesyuCodeComponent extends SHFormControl {
    constructor() {
        super();
        this.obj = ".SHCtlSesyuCode";
        this.ctlName = "SHCtlSesyuCode";
        this.maxlength = 11;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null) {
            this.stringValue = this.toText(this.value);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.value)
            return;
        if (changes.value.currentValue) {
            this.value = this.toText(changes.value.currentValue);
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        event.target.value = event.target.value.slice(0, this.maxlength);
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceSign(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        event.target.value = this.toText(event.target.value);
        this.valueChange.emit(this.toValue(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toValue(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = this.toText(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 先頭零埋
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        /** @type {?} */
        let result = null;
        if (inputTargetValue.length == 0) {
            result = "";
        }
        else if (inputTargetValue.trim().length <= 9) {
            result = (("00000000" + inputTargetValue).slice(-9)) + "-" + "00";
        }
        else if (inputTargetValue.trim().length <= 11) {
            result = (("00000000" + inputTargetValue.substr(0, 9)).slice(-9)) + "-" + (("00" + inputTargetValue.substr(9)).slice(-2));
        }
        else {
            result = inputTargetValue;
        }
        return result;
    }
    /**
     * ハイフン除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toValue(inputTargetValue) {
        return new String(inputTargetValue).replace(/-/g, "");
    }
}
SHCtlSesyuCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-sesyu-code',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlSesyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlSesyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n      [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlSesyuCodeComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SHCtlSesyuCodeComponent.prototype.obj;
    /** @type {?} */
    SHCtlSesyuCodeComponent.prototype.stringValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlTanCodeComponent extends SHFormPopup {
    /**
     * @param {?} smplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(smplPopupService, dialog, bindCtlService, lockScreenService) {
        super(smplPopupService, dialog, bindCtlService, lockScreenService);
        this.smplPopupService = smplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        this.obj = ".SHCtlTanCode";
        this.enabledHalfKanaInput = true;
        this.ctlName = "SHCtlTanCode";
        this.maxlength = 6;
    }
    /**
     * コンポーネントに値がバインドされた後で呼び出される
     * プロパティの初期化
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        event.target.value = event.target.value.replace(/[^0-9]/g, "");
        SHCtlCommon.sliceLength(event, this.maxlength);
        if (!this.enabledHalfKanaInput) {
            SHCtlCommon.replaceFullWidth(event);
        }
        event.target.value = event.target.value.replace(/["！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・"]/g, "");
        if (event.target.value.length >= 6 &&
            event.inputType != "deleteContentBackward") {
            if (isNaN(parseInt(event.target.value)) &&
                event.target.value.length != 7) {
                return;
            }
            return;
        }
        if (event.inputType !== "insertCompositionText") {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceSign(event);
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        /** @type {?} */
        let flg = false;
        if (this.noChangeFlg == `OFF`) {
            flg = true;
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                event.target.value) {
                this.fetchCodes(this.apiUrl).then((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.valueChange.emit(value);
                    event.target.value = this.toText(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.onAfterChange(event);
                    }), 0);
                }));
            }
            else {
                this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                event.target.value = this.setName(event.target.value);
                this.valueChange.emit(event.target.value);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.onAfterChange(event);
                }), 0);
            }
        }
        if (!flg) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                // this.noChangeFlg == `OFF`;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.noChangeFlg = `OFF`;
                }), 1000);
                this.valueChange.emit(event.target.value);
                this.onAfterChange(event);
                event.target.value = this.toText(event.target.value);
            }), 0);
        }
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        /** @type {?} */
        let extendWidth;
        if (this.codes) {
            if (!this.popupWidth &&
                this.codes.length != 0 &&
                Object.values(this.codes[0]).length >= 4) {
                this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
            }
            /** @type {?} */
            let rawCodes;
            /** @type {?} */
            let rawCodesArray = [];
            for (let i = 0; this.codes.length > i; i++) {
                rawCodes = this.codes[i].contactCode;
                rawCodesArray.push(rawCodes);
                /** @type {?} */
                let code = Object.values(this.codes[i])[this.bindColumnKey - 1].toString()
                    .substr(2);
                this.codes[i].contactCode = code;
            }
            this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                height: ShCtlConst.DIALOG_HEIGHT,
                width: extendWidth,
                data: {
                    dataTitle: this.dataTitle,
                    codes: this.codes,
                    codesHeader: this.codesHeader,
                    hiddenColumns: this.hiddenColumns,
                },
            });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.setValueName(result);
                    this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.bindCtlService.setBindValue({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.noChangeFlg = `ON`;
                    this.valueChange.emit(this.extractBindValue(result));
                    this.ownValueInputElm.dispatchEvent(new Event("change"));
                }
            }));
        }
    }
    /**
     * 選択された区分コードに紐づく区分名を設定
     * @param {?} val
     * @return {?}
     */
    setName(val) {
        /** @type {?} */
        let record;
        val = this.toText(val);
        if (val.length == 6) {
            record = this.codes.find((/**
             * @param {?} element
             * @return {?}
             */
            (element) => this.toText(Object.values(element)[this.bindColumnKey - 1]).includes(val)));
        }
        if (record != null) {
            /** @type {?} */
            const name = (/** @type {?} */ (Object.values(record)[this.bindColumnValue - 1]));
            if (name && val.length == 6) {
                this.setValueName(record);
                this.noChangeFlg = "ON";
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                this.bindCtlService.setNoChangeFlg({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                val = Object.values(record)[this.bindColumnKey - 1];
                /** @type {?} */
                const inputElement = this.ownValueInputElm;
                if (inputElement) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        inputElement.value = this.toText(val);
                    }), 0);
                }
            }
        }
        else {
            val = ``;
        }
        return val;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkValue(value) {
        if (!value)
            return false;
        if (value.length < 6) {
            this.clearValue();
            return false;
        }
        //let matchedArray = [];
        if (this.codes[0]) {
            /** @type {?} */
            const filterResult = this.codes.filter((/**
             * @param {?} element
             * @return {?}
             */
            (element) => 
            //this.hasMatchRecords(element, value)
            ((/** @type {?} */ (Object.values(element)[this.bindColumnKey - 1]))).includes(value)));
            if (filterResult.length == 0) {
                this.clearValue();
                return false;
            }
            if (filterResult.length >= 2) {
                alert(value + "に複数の候補が検出されました");
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
        }
        return true;
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
    /**
     * onKeyUp
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            event.target.value = this.toHankaku(this.hiraganaToKatagana(event.target.value));
        }
    }
    /**
     * 先頭除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        if (inputTargetValue.length === 8) {
            return inputTargetValue.substr(2);
        }
        return inputTargetValue;
    }
    /**
     * ひらがなをカタカナに変換
     * @param {?} inputValue
     * @return {?}
     */
    hiraganaToKatagana(inputValue) {
        return inputValue.replace(/[\u3041-\u3096]/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            /** @type {?} */
            var chr = match.charCodeAt(0) + 0x60;
            return String.fromCharCode(chr);
        }));
    }
    /**
     * 入力文字を半角カナに変換
     * @param {?} inputValue
     * @return {?}
     */
    toHankaku(inputValue) {
        /** @type {?} */
        let half = "0123456789";
        half += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        half += "abcdefghijklmnopqrstuvwxyz";
        half += "｡､｢\\｣;:･-+|_@., ";
        half += "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮｰ";
        /** @type {?} */
        let halfArr = new Array("ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ");
        /** @type {?} */
        let full = "０１２３４５６７８９";
        full += "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ";
        full += "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ";
        full += "。、「￥」；：・－＋｜＿＠．，　";
        full +=
            "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョー";
        /** @type {?} */
        let fullArr = new Array("ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ");
        /** @type {?} */
        let str = "";
        //半角カナ用
        for (let i = 0; i < halfArr.length; i++) {
            /** @type {?} */
            let reg = new RegExp(fullArr[i], "g");
            inputValue = inputValue.replace(reg, halfArr[i]);
        }
        for (let i = 0; i < inputValue.length; i++) {
            /** @type {?} */
            let oneStr = inputValue.charAt(i);
            /** @type {?} */
            let num = full.indexOf(oneStr, 0);
            oneStr = num >= 0 ? half.charAt(num) : oneStr;
            str += oneStr;
        }
        return str;
    }
}
SHCtlTanCodeComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-tan-code",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n          [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n          (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field style=\"width: 66.6%;\" class=\"result-container\">\r\n        <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n          attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n        attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{toText(value)}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTanCodeComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog },
    { type: BindCtlService },
    { type: LockScreenService }
];
SHCtlTanCodeComponent.propDecorators = {
    enabledHalfKanaInput: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlTanCodeComponent.prototype.obj;
    /** @type {?} */
    SHCtlTanCodeComponent.prototype.enabledHalfKanaInput;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.smplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.lockScreenService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlTelNoComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlTelNo";
        this.maxlength = 15;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null) {
            this.stringValue = this.value;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.sliceLength(event, this.maxlength);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
}
SHCtlTelNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-tel-no',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\"\r\n        attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n        [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\"\r\n      attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n      [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTelNoComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SHCtlTelNoComponent.prototype.stringValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlTimeComponent extends SHFormControl {
    constructor() {
        super();
        this.obj = ".ShCtlTime";
        this.adjust = 1;
        this.isValidateError = false;
        this.errorMessage = "無効な日付です";
        this.isFirst = true;
        this.format = SHCtlCommon.Const.timeFormat.HHMM;
        //直前の値保持
        this.timeStrage = null;
        this.ctlName = "SHCtlTime";
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null) {
            /** @type {?} */
            var date = this.value.split(':');
            switch (this.format) {
                case SHCtlCommon.Const.timeFormat.HH:
                    this.stringValue = `${date[0]}`;
                    break;
                case SHCtlCommon.Const.timeFormat.HHMM:
                    this.stringValue = `${date[0]}:${(date.length > 1 ? date[1] : "00")}`;
                    break;
                case SHCtlCommon.Const.timeFormat.HH:
                    this.stringValue = `${date[0]}:${(date.length > 1 ? date[1] : "00")}:${(date.length > 2 ? date[2] : "00")}`;
                    break;
                default:
                    break;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        this.timecalculation(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        /** @type {?} */
        let val = event.target.value;
        if (val) {
            //HH形式の場合
            if (val.length == 2)
                val += ":00:00";
            //HHMM形式の場合
            if (val.length == 5)
                val += ":00";
        }
        if (this.timeStrage != val) {
            this.onBeforeChange(event);
            this.valueChange.emit(val);
        }
        this.timeStrage = val;
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
    }
    /**
     * onKeypress
     * @param {?} event keypress
     * @return {?}
     */
    onKeypress(event) {
        this.timecalculation(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
    }
    /**
     * キーイベント系
     * /キーを押すことで現在時刻をセット
     * @private
     * @param {?} event keypress
     * @return {?}
     */
    timecalculation(event) {
        if (event.key === SHCtlCommon.Const.keyCodes.signs[191]) {
            event.target.value = this.setCurrentTime();
            this.onChange(event);
        }
    }
    /**
     * 現在時刻の設定
     * @private
     * @return {?}
     */
    setCurrentTime() {
        /** @type {?} */
        let newDate = new Date();
        /** @type {?} */
        let nullFirstString = null;
        /** @type {?} */
        let nullLastString = null;
        nullFirstString = SHCtlCommon.padding(newDate.getHours(), 2); // HH
        nullLastString = SHCtlCommon.padding(newDate.getMinutes(), 2); // HH:MM
        // HH:MM
        /** @type {?} */
        let stringValue = String(nullFirstString + ":" + nullLastString);
        return stringValue;
    }
}
SHCtlTimeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-time',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" type=\"time\" step=\"{{format}}\" max=\"23:59\" [(ngModel)]=\"value\"\r\n        attr.name=\"{{ctlName}}\" class=\"form-control ShCtlTime can-moved-with-the-enter-key  {{strClass}}\"\r\n        (input)=\"onInput($event)\" (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\r\n        autocomplete=\"off\" (change)=\"onChange($event)\" [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\"\r\n        [class.isValidateError]=\"isValidateError\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" >\r\n      <button mat-button class=\"closeButton\" type=\"button\" *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" type=\"time\" step=\"{{format}}\" max=\"23:59\" [(ngModel)]=\"value\"\r\n      attr.name=\"{{ctlName}}\" class=\"form-control ShCtlTime can-moved-with-the-enter-key  {{strClass}}\"\r\n      (input)=\"onInput($event)\" (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\r\n      autocomplete=\"off\" (change)=\"onChange($event)\" [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\"\r\n      [class.isValidateError]=\"isValidateError\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" >\r\n    <button mat-button class=\"closeButton\" type=\"button\" *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\" type=\"time\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".isValidateError{border:1px solid red}.alert-danger{background-color:#ffd2ff}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}.ShCtlTime{float:left}mat-form-field .closeButton{position:absolute;right:20px;bottom:5px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTimeComponent.ctorParameters = () => [];
SHCtlTimeComponent.propDecorators = {
    format: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlTimeComponent.prototype.obj;
    /** @type {?} */
    SHCtlTimeComponent.prototype.adjust;
    /** @type {?} */
    SHCtlTimeComponent.prototype.isValidateError;
    /** @type {?} */
    SHCtlTimeComponent.prototype.errorMessage;
    /** @type {?} */
    SHCtlTimeComponent.prototype.stringValue;
    /** @type {?} */
    SHCtlTimeComponent.prototype.isFirst;
    /** @type {?} */
    SHCtlTimeComponent.prototype.format;
    /**
     * @type {?}
     * @private
     */
    SHCtlTimeComponent.prototype.timeStrage;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlTokuCodeComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlTokuCode";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceSign(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        event.target.value = this.toText(event.target.value);
        this.valueChange.emit(this.toValue(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toValue(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = this.toText(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 先頭零埋
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
        if (inputTargetValue.length == 0) {
            return "";
        }
        else if (inputTargetValue.length > 9) {
            return inputTargetValue;
        }
        /** @type {?} */
        let result = (("00000000" + inputTargetValue).slice(-9));
        return result;
    }
    /**
     * 零除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toValue(inputTargetValue) {
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
        return inputTargetValue;
    }
}
SHCtlTokuCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-toku-code',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n        (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n      (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTokuCodeComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlWideCharComponent extends SHFormControl {
    constructor() {
        super();
        //入力変換時を補足するための値保持
        this._data = "";
        this.ctlName = "SHCtlWideChar";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.maxByteLength % 2 != 0)
            this.maxByteLength = this.maxByteLength - 1;
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const isSameData = (this._data == event.data);
        this._data = event.data;
        //入力変換中は書き換えを行わない
        if (event.isComposing && (!event.isComposing || !isSameData))
            return;
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.sliceLength(event, this.maxlength);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        this.onKeyUp(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onKeyUp
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            SHCtlCommon.replaceHalf(event);
            SHCtlCommon.replaceHalfSpaceToFull(event);
            SHCtlCommon.replaceHalfKana(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
        }
    }
    /**
     * onKeyDown
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyDown(event) {
        if (this.maxByteLength > 0)
            super.onKeyDown(event);
        if (!event.isComposing) {
            SHCtlCommon.replaceHalf(event);
            SHCtlCommon.replaceHalfSpaceToFull(event);
            SHCtlCommon.replaceHalfKana(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
        }
    }
}
SHCtlWideCharComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-wide-char',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlWideChar can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlWideChar can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlWideCharComponent.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SHCtlWideCharComponent.prototype._data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlWideCharMLComponent extends SHFormControl {
    constructor() {
        super();
        //入力変換時を補足するための値保持
        this._data = "";
        this.ctlName = "SHCtlWideCharML";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.maxByteLength % 2 != 0)
            this.maxByteLength = this.maxByteLength - 1;
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        /** @type {?} */
        const isSameData = (this._data == event.data);
        this._data = event.data;
        //入力変換中は書き換えを行わない
        if (event.isComposing && (!event.isComposing || !isSameData))
            return;
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.sliceLength(event, this.maxlength);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        this.onKeyUp(event);
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        if (event.target.value == undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterBlur(event); }), 0);
            ;
            return;
        }
        ;
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * onKeyUp
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            SHCtlCommon.replaceHalf(event);
            SHCtlCommon.replaceHalfSpaceToFull(event);
            SHCtlCommon.replaceHalfKana(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
        }
    }
    /**
     * onKeyDown
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyDown(event) {
        if (this.maxByteLength > 0)
            super.onKeyDown(event);
        if (!event.isComposing) {
            SHCtlCommon.replaceHalf(event);
            SHCtlCommon.replaceHalfSpaceToFull(event);
            SHCtlCommon.replaceHalfKana(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
        }
    }
}
SHCtlWideCharMLComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-wide-char-ml',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <textarea #inputElm matInput [placeholder]=\"title\" [required]=\"required\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlWideCharMl can-moved-with-the-enter-key {{strClass}}\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n        (change)=\"onChange($event)\" [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\"></textarea>\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <textarea #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlWideCharMl can-moved-with-the-enter-key {{strClass}}\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n      (change)=\"onChange($event)\" [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\"></textarea>\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: ["textarea{min-height:2em}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlWideCharMLComponent.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SHCtlWideCharMLComponent.prototype._data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const moment = _moment;
/** @type {?} */
const MY_FORMATS = {
    parse: {
        dateInput: "MM/YYYY"
    },
    display: {
        dateInput: "MM/YYYY",
        monthYearLabel: "MMM YYYY",
        dateA11yLabel: "LL",
        monthYearA11yLabel: "MMMM YYYY"
    }
};
const ɵ0 = {
    parse: {
        dateInput: "YYYY-MM"
    },
    display: {
        dateInput: "YYYY-MM",
        monthYearLabel: "MMM YYYY",
        dateA11yLabel: "LL",
        monthYearA11yLabel: "MMMM YYYY"
    }
};
class SHCtlYearMonthComponent extends SHFormControl {
    /**
     * @param {?} dataAdapter
     * @param {?} el
     */
    constructor(dataAdapter, el) {
        super();
        this.dataAdapter = dataAdapter;
        this.el = el;
        this.isValidateError = false;
        this.errorMessage = "日付に誤りがあります。";
        this.cache = { year: null, month: null };
        this.date = new FormControl(moment());
        this.max = "9999-12";
        this.min = "1000-12";
        this.ctlName = "SHCtlYearMonth";
        dataAdapter.setLocale("ja");
    }
    /**
     * DatePickerのyear選択時のハンドラー
     * @param {?} normalizedYear
     * @return {?}
     */
    chosenYearHandler(normalizedYear) {
        this.cache.year = normalizedYear.year();
    }
    /**
     * DatePickerのmonth選択時のハンドラー
     * @param {?} normalizedMonth
     * @param {?} datepicker
     * @return {?}
     */
    chosenMonthHandler(normalizedMonth, datepicker) {
        this.cache.month = normalizedMonth.month() + 1;
        datepicker.close();
        this.setValue();
        /** @type {?} */
        let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
        setTimeout((/**
         * @return {?}
         */
        function () { inputValue.dispatchEvent(new Event('change')); }), 10);
        this.valueChange.emit(this.toValue(this.value));
    }
    /**
     * DatePickerから取得した値をvalueへセットする
     * @return {?}
     */
    setValue() {
        /** @type {?} */
        const yearAndMonth = this.cache.year.toString() + this.cache.month.toString();
        this.value = this.toText(yearAndMonth);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.value) {
            return;
        }
        if (!changes.value.currentValue) {
            this.value = "";
            return;
        }
        if (changes.value.currentValue.length >= 7) {
            this.value = "";
            return;
        }
        if (changes.value.currentValue) {
            this.value = this.toText(changes.value.currentValue);
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getYearAndManth(date) {
        if (!date)
            return;
        /** @type {?} */
        const val = new Date(date).toLocaleDateString().split('/');
        /** @type {?} */
        const year = val[0];
        /** @type {?} */
        const month = val[1];
        return `${year}${month}`;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null && this.isDisabled) {
            this.changeFormat(this.value.replace("-", ""));
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.isDisabled) {
            /** @type {?} */
            let element = (/** @type {?} */ (this.el.nativeElement.querySelector('input')));
            element.setAttribute("max", this.max);
            element.setAttribute("min", this.min);
        }
    }
    /**
     * onOpened
     * @return {?}
     */
    onOpened() {
        /** @type {?} */
        let el = document.querySelector("mat-datepicker-content");
        el.addEventListener("focusin", (/**
         * @return {?}
         */
        () => {
            this.isfocused = true;
        }));
    }
    /**
     * onClosed
     * @return {?}
     */
    onClosed() {
        /** @type {?} */
        let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
        setTimeout((/**
         * @return {?}
         */
        function () { inputValue.dispatchEvent(new Event('focus')); }), 0);
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        this.yearAndMonthCalculation(event);
    }
    /**
     * onKeypress
     * @param {?} event keypress
     * @return {?}
     */
    onKeypress(event) {
        this.yearAndMonthCalculation(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(this.toValue(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        this.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
        return true;
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 年月計算
     * @private
     * @param {?} event
     * @return {?}
     */
    yearAndMonthCalculation(event) {
        /** @type {?} */
        let key = this.isKeysAllowedToMe(event);
        if (key === 0) {
            this.setCurrentDate(event);
            this.onChange(event);
        }
    }
    /**
     * 自タイプに許容されているキー
     * @private
     * @param {?} event keypress
     * @return {?}
     */
    isKeysAllowedToMe(event) {
        if (event.key === SHCtlCommon.Const.keyCodes.signs[191]) {
            return 0;
        }
        return null;
    }
    /**
     * 本日日付の設定
     * @param {?} event keypress
     * @return {?}
     */
    setCurrentDate(event) {
        /** @type {?} */
        let newDate = new Date();
        /** @type {?} */
        let nullFirstString = null;
        /** @type {?} */
        let nullLastString = null;
        nullFirstString = SHCtlCommon.padding(newDate.getFullYear(), 4); // YYYY
        nullLastString = SHCtlCommon.padding(newDate.getMonth() + 1, 2); // MM
        event.target.value = String(nullFirstString + "-" + nullLastString);
    }
    /**
     * 接頭語付与
     * @param {?} inputTargetValue num.substr(0, 2)
     * @return {?}
     */
    convYear(inputTargetValue) {
        if (inputTargetValue >= "00" && inputTargetValue <= 49) {
            return "20" + inputTargetValue;
        }
        else {
            return "19" + inputTargetValue;
        }
    }
    /**
     * YYYY/MM処理
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        /** @type {?} */
        let num = inputTargetValue.toString().replace(/\//g, "");
        if (num.trim().length === 0) {
            return "";
        }
        // 4桁西暦
        if (num.length === 3 || num.length === 4) {
            // // 接頭語取得
            return SHCtlCommon.padding(num, 4) + "-01";
        }
        else if (num.length === 5 || num.length === 6) {
            // 接頭語取得
            /** @type {?} */
            let year = num.substr(0, 4) + "-" + ("00" + num.substr(4)).slice(-2);
            return year;
        }
        else {
            return inputTargetValue;
        }
    }
    /**
     * 接続文字除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toValue(inputTargetValue) {
        return new String(inputTargetValue).replace("-", "");
    }
    /**
     * フォーマット編集
     * @param {?} value this.value
     * @return {?}
     */
    changeFormat(value) {
        if (value != null && value != undefined && value.length === 6) {
            /** @type {?} */
            let nullFirstString = null;
            /** @type {?} */
            let nullLastString = null;
            nullFirstString = value.slice(0, 4);
            nullLastString = value.slice(4, 6);
            this.stringValue = String(nullFirstString + "年" + nullLastString + "月");
            return this.stringValue;
        }
        else {
            this.stringValue = '';
            return this.stringValue;
        }
    }
}
SHCtlYearMonthComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-year-month",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n      <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n        (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n      </mat-datepicker>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n    <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n      (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n    </mat-datepicker>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                providers: [
                    {
                        provide: DateAdapter$1,
                        useClass: MomentDateAdapter,
                        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]
                    },
                    {
                        provide: MAT_DATE_FORMATS,
                        useValue: ɵ0
                    }
                ],
                styles: [".isValidateError{background-color:#ffd2ff}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}input[type=month]::-webkit-calendar-picker-indicator{display:none}input[type=month]::-webkit-inner-spin-button,input[type=month]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=month]::-webkit-clear-button{display:none}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlYearMonthComponent.ctorParameters = () => [
    { type: DateAdapter$1 },
    { type: ElementRef }
];
SHCtlYearMonthComponent.propDecorators = {
    max: [{ type: Input }],
    min: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.isValidateError;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.errorMessage;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.adjust;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.stringValue;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.cache;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.date;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.max;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.min;
    /**
     * @type {?}
     * @private
     */
    SHCtlYearMonthComponent.prototype.dataAdapter;
    /**
     * @type {?}
     * @private
     */
    SHCtlYearMonthComponent.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlZipNoComponent extends SHFormControl {
    constructor() {
        super();
        this.isValidateError = false;
        this.errorMessage = "3桁か7桁のみ有効です。";
        this.ctlName = "SHCtlZipNo";
        this.maxlength = 7;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                if (changes.value.currentValue != changes.value.previousValue
                    && changes.value.currentValue.length == this.maxlength) {
                    this.value = this.withHyphen(changes.value.currentValue);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null) {
            this.changeFormat(this.value);
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSign(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.sliceLength(event, this.maxlength);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        if (!event.target.value) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterFocus(event); }), 0);
            return;
        }
        event.target.value = this.withoutHyphen(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
        return true;
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        if (!event.target.value) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterBlur(event); }), 0);
            ;
            return;
        }
        event.target.value = this.withHyphen(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //入力桁数が間違っている場合に、自コンポーネントにフォーカスを戻す
        if (event.target.value.length != 0 && event.target.value.length != 3 && event.target.value.length != 7) {
            event.target.value = "";
            /** @type {?} */
            let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
            setTimeout((/**
             * @return {?}
             */
            () => { inputValue.focus(); }), 10);
        }
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * ハイフン付与編集
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    withHyphen(inputTargetValue) {
        inputTargetValue = inputTargetValue.replace(/\ |\-/g, "");
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        inputTargetValue = inputTargetValue.replace(/[!"#$%&'()\*\+\.,\/:;<=>?@\[\\\]^_`{|}~a-zA-Z]/g, "");
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        if (isNaN(inputTargetValue)) {
            return "";
        }
        /** @type {?} */
        let zipcd = inputTargetValue.toString();
        if (zipcd.match(/^\d{3}-?\d{4}$/)) {
            zipcd = zipcd.substr(0, 3) + "-" + zipcd.substr(3);
        }
        return zipcd;
    }
    /**
     * ハイフン除去編集
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    withoutHyphen(inputTargetValue) {
        return new String(inputTargetValue).replace(/-/g, "");
    }
    /**
     * フォーマット編集
     * @param {?} value this.value
     * @return {?}
     */
    changeFormat(value) {
        if (!value) {
            this.stringValue = "";
            return;
        }
        /** @type {?} */
        let nullFirstString = null;
        /** @type {?} */
        let nullLastString = null;
        nullFirstString = value.slice(0, 3);
        nullLastString = value.slice(-4);
        this.stringValue = String(nullFirstString + "-" + nullLastString);
    }
}
SHCtlZipNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-zip-no',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\"\r\n      [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlZipNoComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SHCtlZipNoComponent.prototype.isValidateError;
    /** @type {?} */
    SHCtlZipNoComponent.prototype.errorMessage;
    /** @type {?} */
    SHCtlZipNoComponent.prototype.stringValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 区分マスタの情報を取得
 */
class SmplKbnCodeService {
    /**
     * @param {?} apiComService
     */
    constructor(apiComService) {
        this.apiComService = apiComService;
        //区分マスタ
        this.masterCache = [];
    }
    /**
     * 区分マスタ取得
     * @param {?} url
     * @return {?}
     */
    fetchAll(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiComService.get(url);
        });
    }
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    getMasterData(key) {
        /** @type {?} */
        let cache = this.masterCache.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.masterName == key;
        }));
        return cache.length > 0 ? cache[0].masterCache : [];
    }
    /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    setMasterData(key, masterData) {
        if (this.masterCache.length > 0) {
            for (let item of this.masterCache) {
                if (item.masterName == key) {
                    item.masterCache = masterData;
                    break;
                }
            }
        }
        this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
    }
}
SmplKbnCodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SmplKbnCodeService.ctorParameters = () => [
    { type: ShCtlApiService }
];
/** @nocollapse */ SmplKbnCodeService.ngInjectableDef = ɵɵdefineInjectable({ factory: function SmplKbnCodeService_Factory() { return new SmplKbnCodeService(ɵɵinject(ShCtlApiService)); }, token: SmplKbnCodeService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmplKbnCodeService.prototype.masterCache;
    /**
     * @type {?}
     * @private
     */
    SmplKbnCodeService.prototype.apiComService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlKbnRadioComponent extends SHFormControl {
    /**
     * @param {?} SmplKbnRadioService
     */
    constructor(SmplKbnRadioService) {
        super();
        this.SmplKbnRadioService = SmplKbnRadioService;
        this.dataKbnName = "";
        this.radioContent = "";
        this.apiUrl = "/api/";
        this.displayLabel = "";
        this.throwError = new EventEmitter();
        this.name = "";
        this.ctlName = "SHCtlKbnRadio";
    }
    /**
     * プロパティの初期化
     * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (!this.items) {
            if (this.SmplKbnRadioService.getMasterData(this.apiUrl).length == 0) {
                this.SmplKbnRadioService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                response => {
                    this.kbnCodes = response;
                    this.SmplKbnRadioService.setMasterData(this.apiUrl, response);
                }));
            }
            else {
                if (this.SmplKbnRadioService.getMasterData(this.apiUrl).length > 0)
                    this.kbnCodes = this.SmplKbnRadioService.getMasterData(this.apiUrl);
            }
        }
        else {
            this.kbnCodes = this.items;
        }
    }
    /**
     * ngOnChanges
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        if (change.items && change.items.currentValue) {
            this.kbnCodes = change.items.currentValue;
        }
        if (change.value) {
            if (change.value.currentValue) {
                this.value = change.value.currentValue.toString();
            }
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(event.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * フォーマット編集
     * @param {?} item
     * @return {?}
     */
    changeRadioContent(item) {
        this.radioContent = item;
    }
}
SHCtlKbnRadioComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-kbn-radio",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" style=\"height: 52.5px;\">\r\n    <div style=\"height: 52.5px;\">\r\n      <label class=\"sh-label\">{{title}}</label>\r\n      <mat-radio-group [(ngModel)]=\"value\" [required]=\"required\" aria-label=\"Select an option\" [disabled]=\"disabled\">\r\n        <mat-radio-button *ngFor=\"let item of kbnCodes\" value=\"{{item.key}}\" attr.name=\"{{ctlName}}\"\r\n           (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n          (blur)=\"onBlur($event)\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"{{strClass}}\">\r\n          {{item.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n    <span class=\"custom-alert-message\" style=\"top:0px\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <div>\r\n      <mat-radio-group [(ngModel)]=\"value\" [required]=\"required\" aria-label=\"Select an option\" [disabled]=\"disabled\">\r\n        <mat-radio-button *ngFor=\"let item of kbnCodes\" value=\"{{item.key}}\" attr.name=\"{{ctlName}}\"\r\n           (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n          (blur)=\"onBlur($event)\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"{{strClass}}\">\r\n          {{item.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".sh-label{font-size:.75rem;min-height:18px}.sh-radio{margin:0 10px}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.mat-radio-button~.mat-radio-button{margin-left:16px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlKbnRadioComponent.ctorParameters = () => [
    { type: SmplKbnCodeService }
];
SHCtlKbnRadioComponent.propDecorators = {
    dataKbnName: [{ type: Input }],
    radioContent: [{ type: Input }],
    apiUrl: [{ type: Input }],
    displayLabel: [{ type: Input }],
    throwError: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.dataKbnName;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.radioContent;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.apiUrl;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.displayLabel;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.throwError;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.name;
    /** @type {?} */
    SHCtlKbnRadioComponent.prototype.kbnCodes;
    /**
     * @type {?}
     * @private
     */
    SHCtlKbnRadioComponent.prototype.SmplKbnRadioService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlKbnSelectComponent extends SHFormControl {
    /**
     * @param {?} SmplKbnSelectService
     */
    constructor(SmplKbnSelectService) {
        super();
        this.SmplKbnSelectService = SmplKbnSelectService;
        this.dataKbnName = "";
        this.selectContent = "";
        this.apiUrl = "/api/";
        this.hiddenClearButton = false;
        this.throwError = new EventEmitter();
        this.name = "";
        this.uniqueStr = "";
        this.ctlName = "SHCtlKbnSelect";
    }
    /**
     * プロパティの初期化
     * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (!this.items) {
            if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length == 0) {
                this.SmplKbnSelectService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                response => {
                    this.kbnCodes = response;
                    this.SmplKbnSelectService.setMasterData(this.apiUrl, response);
                }));
            }
            else {
                if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length > 0)
                    this.kbnCodes = this.SmplKbnSelectService.getMasterData(this.apiUrl);
            }
            if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length > 0)
                this.kbnCodes = this.SmplKbnSelectService.getMasterData(this.apiUrl);
        }
        else {
            this.kbnCodes = this.items;
        }
    }
    /**
     * itemsの変更検知
     * 上位コンポーネントからitemsに値が注入されているか検知し変更する
     * @param {?} change
     * @return {?}
     */
    ngOnChanges(change) {
        if (change.items) {
            if (change.items.currentValue) {
                this.kbnCodes = change.items.currentValue;
            }
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @return {?}
     */
    onChange() {
        this.onBeforeChange(event);
        this.valueChange.emit(this.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * フォーマット編集
     * @param {?} item
     * @return {?}
     */
    changeSelectContent(item) {
        this.selectContent = item;
    }
    /**
     * 値のクリア
     * @return {?}
     */
    clearValue() {
        this.value = null;
        this.onChange();
    }
}
SHCtlKbnSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-kbn-select",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\">\r\n    <mat-form-field [floatLabel]=\"floatLabel\">\r\n      <mat-label class=\"sh-label\">{{title}}</mat-label>\r\n      <mat-select #inputElm [required]=\"required\" [(ngModel)]=\"value\" (selectionChange)=\"onChange()\"\r\n        class=\"SHCtlKbnListbox h6 can-moved-with-the-enter-key  {{strClass}}\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">\r\n        <mat-option *ngFor=\"let item of kbnCodes\" [value]=\"item.key\">\r\n          {{item.value}}\r\n        </mat-option>      \r\n      </mat-select>\r\n      <button mat-button *ngIf=\"value && !inputElm.disabled && !hiddenClearButton\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (click)=\"clearValue();$event.stopPropagation();\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n\r\n</ng-container>\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <mat-select #inputElm [required]=\"required\" [(ngModel)]=\"value\" (selectionChange)=\"onChange()\"\r\n        class=\"SHCtlKbnListbox h6 can-moved-with-the-enter-key  {{strClass}}\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">\r\n        <mat-option *ngFor=\"let item of kbnCodes\" [value]=\"item.key\">\r\n          {{item.value}}\r\n        </mat-option>      \r\n      </mat-select>\r\n      <button mat-button *ngIf=\"value && !inputElm.disabled && !hiddenClearButton\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (click)=\"clearValue();$event.stopPropagation();\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n  </div>\r\n\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlKbnSelectComponent.ctorParameters = () => [
    { type: SmplKbnCodeService }
];
SHCtlKbnSelectComponent.propDecorators = {
    dataKbnName: [{ type: Input }],
    selectContent: [{ type: Input }],
    apiUrl: [{ type: Input }],
    hiddenClearButton: [{ type: Input }],
    throwError: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.dataKbnName;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.selectContent;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.apiUrl;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.hiddenClearButton;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.throwError;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.name;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.event;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.kbnCodes;
    /** @type {?} */
    SHCtlKbnSelectComponent.prototype.uniqueStr;
    /**
     * @type {?}
     * @private
     */
    SHCtlKbnSelectComponent.prototype.SmplKbnSelectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShCtlPopupComponent extends SHFormPopup {
    /**
     * @param {?} SmplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(SmplPopupService, dialog, bindCtlService, lockScreenService) {
        super(SmplPopupService, dialog, bindCtlService, lockScreenService);
        this.SmplPopupService = SmplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        this.ctlName = "SHCtlPopup";
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceSign(event);
    }
}
ShCtlPopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-popup',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field [ngStyle]=\"setInputWidth()\" *ngIf=\"!hiddenInput\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n          (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n          class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n          placeholder=\"{{title}}\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n          attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && hiddenLabel && !inputElm.readOnly && !inputElm.disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n          (click)=\"getCodes()\">\r\n          search\r\n        </mat-icon>\r\n      </mat-form-field>\r\n      <mat-form-field [ngStyle]=\"setLabelWidth()\" *ngIf=\"!hiddenLabel\" class=\"result-container\">\r\n        <input class=\"result-input  {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n          [ngClass]=\"objClass\" attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && !disabled\" mat-button matSuffix class=\"mat-search-btn\" (click)=\"getCodes()\">search\r\n        </mat-icon>\r\n      </mat-form-field>\r\n      <span class=\"mat-icon-container\">\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && hiddenInput && hiddenLabel && !disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n          (click)=\"getCodes()\">\r\n          search\r\n        </mat-icon>\r\n      </span>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}\r\n    </span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\" *ngIf=\"!hiddenInput\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n        class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n        attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && hiddenLabel && !inputElm.readOnly && !inputElm.disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n        (click)=\"getCodes()\">\r\n        search\r\n      </mat-icon>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\" *ngIf=\"!hiddenInput\">\r\n      <input class=\"result-input  {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && !disabled\" mat-button matSuffix class=\"mat-search-btn\" (click)=\"getCodes()\">search\r\n      </mat-icon>\r\n    </div>\r\n    <span class=\"mat-icon-container\">\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && hiddenInput && hiddenLabel && !disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n        (click)=\"getCodes()\">\r\n        search\r\n      </mat-icon>\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong></strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.mat-icon-container{margin-left:-17px}.mat-icon-container .mat-search-btn{color:#bababa;font-size:1.1rem;margin:17px 0 0 100%}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
ShCtlPopupComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog },
    { type: BindCtlService },
    { type: LockScreenService }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupComponent.prototype.SmplPopupService;
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupComponent.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupComponent.prototype.lockScreenService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShCtlPopupMultiComponent extends SHFormControl {
    /**
     * @param {?} SmplPopupService
     * @param {?} dialog
     */
    constructor(SmplPopupService, dialog) {
        super();
        this.SmplPopupService = SmplPopupService;
        this.dialog = dialog;
        //データタイトル名
        this.dataTitle = "";
        //API URL
        this.apiUrl = "/api/";
        //データキャッシュON/OFF機能フラグ
        this.dataCache = false;
        //キーとなる列番号(起動時のチェックを入れるためのキー判定基準になります。)
        this.uniqueColumns = [1];
        //ポップアップ上非表示となる列番号
        this.hiddenColumns = [];
        this.extendWidth = ShCtlConst.DIALOG_WIDTH;
        //Dialogの結果を受け取る
        this.dialogRef = null;
        this.codes = [];
        this.codesHeader = [];
        this.ctlName = "SHCtlPopupMulti";
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        if (this.codes) {
            if (!this.popupWidth && this.codes.length != 0 && Object.values(this.codes[0]).length >= 4) {
                this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
            }
            this.dialogRef = this.dialog.open(SHCtlPopupDialogMultiComponent, {
                height: ShCtlConst.DIALOG_HEIGHT,
                width: this.extendWidth,
                data: {
                    dataTitle: this.dataTitle,
                    value: this.value,
                    uniqueColumns: this.uniqueColumns,
                    hiddenColumns: this.hiddenColumns,
                }
            });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result != undefined)
                    this.valueChange.emit(result);
            }));
        }
    }
    /**
     * プロパティの初期化
     * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
        // //ユニークな文字列
        if (this.SmplPopupService.getMasterData(this.apiUrl).length >= 0) {
            this.SmplPopupService.fetchAll(this.apiUrl).then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.codes = response.data;
                if (response.header == null) {
                    return;
                }
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
            }));
        }
    }
    /**
     * マスタ情報よりコードを取得
     * @return {?}
     */
    getCodes() {
        this.openDialog();
        if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0) {
            this.SmplPopupService.fetchAll(this.apiUrl).then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.codes = response.data;
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
                if (this.dataCache)
                    this.SmplPopupService.setMasterData(this.apiUrl, response);
            }));
            if (this.dialogRef.componentInstance) {
                this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                this.dialogRef.componentInstance.codes = this.codes;
                if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                /** @type {?} */
                let cols = [];
                this.dialogRef.componentInstance.getHashKeys().forEach((/**
                 * @param {?} name
                 * @param {?} idx
                 * @return {?}
                 */
                (name, idx) => {
                    if (!this.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    _ => _ == (idx + 1))))
                        cols.push(name);
                }));
                this.dialogRef.componentInstance.displayedColumns = cols;
            }
        }
        else {
            this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
            this.codesHeader = Object.values(Object(this.SmplPopupService.getMasterData(this.apiUrl)).header);
            if (this.dialogRef.componentInstance) {
                this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                this.dialogRef.componentInstance.codes = this.codes;
                if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                /** @type {?} */
                let cols = [];
                this.dialogRef.componentInstance.getHashKeys().forEach((/**
                 * @param {?} name
                 * @param {?} idx
                 * @return {?}
                 */
                (name, idx) => {
                    if (!this.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    _ => _ == (idx + 1))))
                        cols.push(name);
                }));
                this.dialogRef.componentInstance.displayedColumns = cols;
            }
        }
    }
}
ShCtlPopupMultiComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-popup-multi',
                template: "<div *ngIf=\"!disabled\" style=\"margin-top: 17px;\">\r\n  <mat-icon mat-button matSuffix class=\"mat-search-btn\"\r\n  (click)=\"getCodes()\">search</mat-icon>\r\n</div>",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.mat-icon-container{margin-left:-17px}.mat-icon-container .mat-search-btn{color:#bababa;font-size:1.1rem;margin:17px 0 0 100%}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
ShCtlPopupMultiComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog }
];
ShCtlPopupMultiComponent.propDecorators = {
    dataTitle: [{ type: Input }],
    apiUrl: [{ type: Input }],
    dataCache: [{ type: Input }],
    uniqueColumns: [{ type: Input }],
    hiddenColumns: [{ type: Input }],
    popupWidth: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.dataTitle;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.apiUrl;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.dataCache;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.uniqueColumns;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.hiddenColumns;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.popupWidth;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.extendWidth;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.dialogRef;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.codes;
    /** @type {?} */
    ShCtlPopupMultiComponent.prototype.codesHeader;
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupMultiComponent.prototype.SmplPopupService;
    /**
     * @type {?}
     * @protected
     */
    ShCtlPopupMultiComponent.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShCtlValidatedErrorComponent {
    /**
     * コンストラクタ
     * @param {?} validationErrorService
     */
    constructor(validationErrorService) {
        this.validationErrorService = validationErrorService;
        this.isError = false;
    }
    /**
     * コンポーネント初期化
     * @return {?}
     */
    ngOnInit() {
        this.subscription = this.validationErrorService.validationErrorState
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response.show) {
                this.isError = true;
                this.errors = [];
                Object.keys(response.meesages).forEach((/**
                 * @param {?} controlName
                 * @return {?}
                 */
                controlName => {
                    this.errors = [...this.errors, ...response.meesages[controlName]];
                }));
            }
            else {
                this.isError = false;
                this.errors = [];
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ShCtlValidatedErrorComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-validated-error',
                template: "<div *ngIf=\"isError\" class=\"error-message\">\r\n  <div *ngFor=\"let item of errors\" class=\"errorMessages text-red\" role=\"alert\">\r\n    \u30FB{{item}}\r\n  </div>\r\n</div>\r\n",
                styles: [".error-message{text-align:left;width:100%;height:100%}.text-red{color:red}"]
            }] }
];
/** @nocollapse */
ShCtlValidatedErrorComponent.ctorParameters = () => [
    { type: ValidationErrorService }
];
ShCtlValidatedErrorComponent.propDecorators = {
    message: [{ type: Input }],
    isError: [{ type: Input }],
    errors: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ShCtlValidatedErrorComponent.prototype.message;
    /** @type {?} */
    ShCtlValidatedErrorComponent.prototype.isError;
    /** @type {?} */
    ShCtlValidatedErrorComponent.prototype.errors;
    /**
     * @type {?}
     * @private
     */
    ShCtlValidatedErrorComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShCtlValidatedErrorComponent.prototype.validationErrorService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlHalfNumberComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlHalfNumber";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSign(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, ""));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
}
SHCtlHalfNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-half-number',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlHalfNumber can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled type=\"tel\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlHalfNumber can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled type=\"tel\"\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlHalfNumberComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlCheckComponent extends SHFormControl {
    constructor() {
        super();
        //ラベル名
        this.checkedLabel = "";
        //ラベル位置(チェックボックスの前か)
        this.beforeAlign = false;
        //チェックボックスのチェック時の値
        this.checkedValue = "1";
        //チェックボックスの未チェック時の値
        this.uncheckedValue = "0";
        this.ctlName = "SHCtlCheck";
    }
    /**
     * @return {?}
     */
    setLabelPosition() {
        return this.beforeAlign ? 'before' : 'after';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * ngOnChangesイベント
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                if (changes.value.currentValue === '' || changes.value.currentValue === undefined || changes.value.currentValue === String(/[^\x01-\x7E\xA1-\xDF]+$/g)) {
                    this.value = '';
                    return;
                }
                this.value = changes.value.currentValue == this.checkedValue ? "checked" : "";
            }
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        this.valueChange.emit(event.checked ? this.checkedValue : this.uncheckedValue);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
}
SHCtlCheckComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-check',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" style=\"height: 52.5px;\">\r\n    <div style=\"height: 52.5px;\">\r\n      <label class=\"sh-label\">{{title}}</label>\r\n      <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focusin)=\"onFocus($event)\" (focusout)=\"onBlur($event)\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">{{checkedLabel}}\r\n      </mat-checkbox>\r\n    </div>\r\n    <span class=\"custom-alert-message\" style=\"top:0px\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <div>\r\n      <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focusin)=\"onFocus($event)\" (focusout)=\"onBlur($event)\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">{{checkedLabel}}\r\n      </mat-checkbox>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" \r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" [disabled]=\"'true'\">{{checkedLabel}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" \r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" [disabled]=\"'true'\">{{checkedLabel}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: ["mat-card-actions,mat-card-content,mat-card-title{text-align:center}mat-card-content{padding-top:20px;padding-bottom:20px}.advanced-color{color:#3f51b5}.beginner-color{color:#f44336}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}.sh-label{display:block;color:#0000008a;font-size:.75rem;min-height:18px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlCheckComponent.ctorParameters = () => [];
SHCtlCheckComponent.propDecorators = {
    checkedLabel: [{ type: Input }],
    beforeAlign: [{ type: Input }],
    checkedValue: [{ type: Input }],
    uncheckedValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlCheckComponent.prototype.checkedLabel;
    /** @type {?} */
    SHCtlCheckComponent.prototype.beforeAlign;
    /** @type {?} */
    SHCtlCheckComponent.prototype.checkedValue;
    /** @type {?} */
    SHCtlCheckComponent.prototype.uncheckedValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SHCtlLockScreenComponent {
    /**
     * コンストラクタ
     * @param {?} lockScreen
     */
    constructor(lockScreen) {
        this.lockScreen = lockScreen;
        this.isConnecting = false;
    }
    /**
     * コンポーネント初期化
     * @return {?}
     */
    ngOnInit() {
        this.lockScreen.isConnectingState.subscribe((/**
         * @param {?} isConnecting
         * @return {?}
         */
        isConnecting => {
            this.isConnecting = isConnecting;
        }));
    }
}
SHCtlLockScreenComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-lock-screen',
                template: "<div *ngIf=\"isConnecting\" class=\"overlay\">\r\n    <mat-spinner></mat-spinner>\r\n    <span class=\"loader-text\">Loading...</span>\r\n</div>\r\n",
                styles: [".overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}"]
            }] }
];
/** @nocollapse */
SHCtlLockScreenComponent.ctorParameters = () => [
    { type: LockScreenService }
];
if (false) {
    /** @type {?} */
    SHCtlLockScreenComponent.prototype.isConnecting;
    /**
     * @type {?}
     * @private
     */
    SHCtlLockScreenComponent.prototype.lockScreen;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//Date型のデータをsh-ctl-dateで扱う形式のオブジェクトに変換
class NgDateValuePipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        if (value != null) {
            return {
                year: value.getFullYear(),
                month: value.getMonth() + 1,
                day: value.getDate()
            };
        }
        return null;
    }
}
NgDateValuePipe.decorators = [
    { type: Pipe, args: [{
                name: 'ngDateValue'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShFlexRowDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.el.nativeElement.style.flexFlow = "row wrap";
        this.el.nativeElement.style.display = "flex";
        this.el.nativeElement.style.boxSizing = "border-box";
        this.el.nativeElement.style.margin = "0px -1rem -1rem 0px";
    }
}
ShFlexRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ShFlexRow]'
            },] }
];
/** @nocollapse */
ShFlexRowDirective.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShFlexRowDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShFlexDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /**
         * 最大
         */
        this.colLg = 16.6;
        this.ctlLgFlex = `1 1 ${this.colLg}%`;
        this.ctlLgMaxWidth = `${this.colLg}%`;
        /**
         * ipad ~ p
         */
        this.colMd = 33.3;
        this.ctlMdFlex = `1 1 ${this.colMd}%`;
        this.ctlMdMaxWidth = `${this.colMd}%`;
        /**
         * mobile
         */
        this.colSm = 100;
        this.ctlSmFlex = `1 1 ${this.colSm}%`;
        this.ctlSmMaxWidth = `${this.colSm}%`;
        //メディアクエリ閾値
        this.mediaSm = "(max-width: 768px)";
        this.mediaMd = "(max-width: 1024px)";
        //その他設定しておきたいスタイル
        this.ctlWidth = "100%";
        this.ctlBoxSizing = "border-box";
        this.ctlPadding = "0px 1rem 1rem 0px";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //上から任意の値を設定した場合ここで値を再設定しておかないと
        //意図した挙動にならないので消さない
        this.initParam();
        this.initStyle();
        window.addEventListener('resize', (/**
         * @return {?}
         */
        () => {
            this.initStyle();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initParam() {
        this.ctlLgFlex = `1 1 ${this.colLg}%`;
        this.ctlLgMaxWidth = `${this.colLg}%`;
        this.ctlMdFlex = `1 1 ${this.colMd}%`;
        this.ctlMdMaxWidth = `${this.colMd}%`;
        this.ctlSmFlex = `1 1 ${this.colSm}%`;
        this.ctlSmMaxWidth = `${this.colSm}%`;
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
    }
    /**
     * @private
     * @return {?}
     */
    initStyle() {
        /** @type {?} */
        const sm = window.matchMedia(this.mediaSm);
        /** @type {?} */
        const md = window.matchMedia(this.mediaMd);
        if (sm.matches) {
            this.smStyleInit();
        }
        else if (md.matches) {
            this.mdStyleInit();
        }
        else {
            this.defaultStyleInit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    smStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlSmFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlSmMaxWidth;
    }
    /**
     * @private
     * @return {?}
     */
    mdStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlMdFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlMdMaxWidth;
    }
    /**
     * @private
     * @return {?}
     */
    defaultStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlLgFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlLgMaxWidth;
    }
}
ShFlexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ShFlex]'
            },] }
];
/** @nocollapse */
ShFlexDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShFlexDirective.propDecorators = {
    colLg: [{ type: Input }],
    colMd: [{ type: Input }],
    colSm: [{ type: Input }]
};
if (false) {
    /**
     * 最大
     * @type {?}
     */
    ShFlexDirective.prototype.colLg;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlLgFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlLgMaxWidth;
    /**
     * ipad ~ p
     * @type {?}
     */
    ShFlexDirective.prototype.colMd;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlMdFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlMdMaxWidth;
    /**
     * mobile
     * @type {?}
     */
    ShFlexDirective.prototype.colSm;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlSmFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlSmMaxWidth;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.mediaSm;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.mediaMd;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlWidth;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlBoxSizing;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlPadding;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShReadOnlyDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.isReadOnly = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addAttribute();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.addAttribute();
    }
    /**
     * @return {?}
     */
    addAttribute() {
        /** @type {?} */
        let qs = this.el.nativeElement.querySelectorAll('input,textarea,select');
        for (var e of qs) {
            e.readOnly = this.isReadOnly;
        }
        qs = this.el.nativeElement.querySelectorAll('button,mat-icon');
        if (this.isReadOnly) {
            for (var e of qs) {
                e.style.display = "none";
            }
        }
        else {
            for (var e of qs) {
                e.style.display = "inline";
            }
        }
    }
}
ShReadOnlyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[readonly]'
            },] }
];
/** @nocollapse */
ShReadOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShReadOnlyDirective.propDecorators = {
    isReadOnly: [{ type: Input, args: ['readonly',] }]
};
if (false) {
    /** @type {?} */
    ShReadOnlyDirective.prototype.isReadOnly;
    /**
     * @type {?}
     * @private
     */
    ShReadOnlyDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShCtlStateDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.state = "";
        this.onlyField = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addShCtlStateClass();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.addShCtlStateClass();
    }
    /**
     * @return {?}
     */
    addShCtlStateClass() {
        /** @type {?} */
        let qs = this.el.nativeElement.querySelectorAll('mat-form-field');
        for (var e of qs) {
            /** @type {?} */
            let classList = (e) ? e.className.split(' ') : [];
            classList.forEach((/**
             * @param {?} className
             * @return {?}
             */
            className => {
                if (className.startsWith("sh-ctl-state-"))
                    e.classList.remove(className);
            }));
            e.classList.add("sh-ctl-state-" + this.state);
        }
        if (this.onlyField) {
            /** @type {?} */
            let qsOnlyField = this.el.nativeElement.querySelectorAll('.only-field');
            for (var e of qsOnlyField) {
                /** @type {?} */
                let classList = (e) ? e.className.split(' ') : [];
                classList.forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                className => {
                    if (className.startsWith("only-field-")) {
                        e.classList.remove(className);
                    }
                }));
                e.classList.add("only-field-" + this.state);
            }
        }
        qs = this.el.nativeElement.querySelectorAll('span,label');
        for (var e of qs) {
            /** @type {?} */
            let classList = (e) ? e.className.split(' ') : [];
            classList.forEach((/**
             * @param {?} className
             * @return {?}
             */
            className => {
                if (className.startsWith("sh-ctl-state-"))
                    e.classList.remove(className);
            }));
            e.classList.add("sh-ctl-state-" + this.state + "-message");
        }
    }
}
ShCtlStateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[state]'
            },] }
];
/** @nocollapse */
ShCtlStateDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShCtlStateDirective.propDecorators = {
    state: [{ type: Input, args: ['state',] }],
    onlyField: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ShCtlStateDirective.prototype.state;
    /** @type {?} */
    ShCtlStateDirective.prototype.onlyField;
    /**
     * @type {?}
     * @private
     */
    ShCtlStateDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShCtlCommonModule {
}
ShCtlCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SHCtlAllCharComponent,
                    SHCtlAllCharMLComponent,
                    SHCtlBunjNoComponent,
                    SHCtlDateComponent,
                    SHCtlHalfCharComponent,
                    SHCtlJigCodeComponent,
                    SHCtlJyuCodeComponent,
                    SHCtlKatakanaComponent,
                    SHCtlNumberComponent,
                    SHCtlSesyuCodeComponent,
                    SHCtlTanCodeComponent,
                    SHCtlTelNoComponent,
                    SHCtlTimeComponent,
                    SHCtlTokuCodeComponent,
                    SHCtlWideCharComponent,
                    SHCtlWideCharMLComponent,
                    SHCtlYearMonthComponent,
                    SHCtlZipNoComponent,
                    SHCtlKbnRadioComponent,
                    SHCtlKbnSelectComponent,
                    ShCtlPopupComponent,
                    ShCtlPopupMultiComponent,
                    SHCtlPopupDialogComponent,
                    SHCtlPopupDialogMultiComponent,
                    ShCtlValidatedErrorComponent,
                    SHCtlHalfNumberComponent,
                    SHCtlCheckComponent,
                    SHCtlLockScreenComponent,
                    NgDateValuePipe,
                    ShFlexRowDirective,
                    ShFlexDirective,
                    ShReadOnlyDirective,
                    ShCtlStateDirective,
                ],
                entryComponents: [
                    SHCtlPopupDialogComponent,
                    SHCtlPopupDialogMultiComponent,
                ],
                imports: [
                    FormsModule,
                    CommonModule,
                    MatInputModule,
                    MatFormFieldModule,
                    ReactiveFormsModule,
                    MatDialogModule,
                    MatTableModule,
                    MatButtonModule,
                    MatButtonToggleModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatDatepickerModule,
                    MatNativeDateModule,
                    MatIconModule,
                    MatCheckboxModule,
                    MatProgressSpinnerModule,
                    ShHttpClient
                ],
                exports: [
                    SHCtlAllCharComponent,
                    SHCtlAllCharMLComponent,
                    SHCtlBunjNoComponent,
                    SHCtlDateComponent,
                    SHCtlHalfCharComponent,
                    SHCtlJigCodeComponent,
                    SHCtlJyuCodeComponent,
                    SHCtlKatakanaComponent,
                    SHCtlNumberComponent,
                    SHCtlSesyuCodeComponent,
                    SHCtlTanCodeComponent,
                    SHCtlTelNoComponent,
                    SHCtlTimeComponent,
                    SHCtlTokuCodeComponent,
                    SHCtlWideCharComponent,
                    SHCtlWideCharMLComponent,
                    SHCtlYearMonthComponent,
                    SHCtlZipNoComponent,
                    SHCtlKbnRadioComponent,
                    SHCtlKbnSelectComponent,
                    ShCtlPopupComponent,
                    ShCtlPopupMultiComponent,
                    ShCtlValidatedErrorComponent,
                    SHCtlHalfNumberComponent,
                    SHCtlCheckComponent,
                    SHCtlLockScreenComponent,
                    NgDateValuePipe,
                    ShFlexRowDirective,
                    ShFlexDirective,
                    ShReadOnlyDirective,
                    ShCtlStateDirective
                ],
                providers: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * キー制御の初期化など
 */
class ShAppComponent {
    /**
     * コンストラクタ
     * @param {?} redirectService
     */
    constructor(redirectService) {
        this.redirectService = redirectService;
        this.init();
    }
    /**
     * コンポーネント初期化
     * @return {?}
     */
    ngOnInit() { }
    /**
     * 初期化
     * @private
     * @return {?}
     */
    init() {
        this.redirect();
        this.keyValidation();
        this.setToekn();
    }
    /**
     * @private
     * @return {?}
     */
    redirect() {
        if (this.redirectService.redirectPath) {
            this.redirectService.redirect();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setToekn() {
        /** @type {?} */
        const params = new URLSearchParams(location.search);
        /** @type {?} */
        const token = params.get('access_token');
        if (token) {
            sessionStorage.setItem(`${ShHttpClientConst.AUTHORIZATION_TOKEN}`, token);
            params.delete("access_token");
            history.pushState(null, null, location.pathname);
        }
    }
    /**
     * \@ エンター時にフォーカスを当てたくない場合の条件
     * @private
     * @param {?} elm
     * @return {?}
     */
    isTargetElement(elm) {
        if (elm.type == 'hidden')
            return false;
        if (elm.style.display == 'none')
            return false;
        if (elm.style.opacity == '0')
            return false;
        if (elm.disabled)
            return false;
        /** @type {?} */
        const shctl = this.getShCtlElement(elm);
        if (this.checkShCtlAttr(shctl.attributes, [
            'hidden'
        ]))
            return false;
        return true;
    }
    /**
     * @private
     * @param {?} map
     * @param {?} targets
     * @return {?}
     */
    checkShCtlAttr(map, targets) {
        return targets.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return map.getNamedItem(t) != null;
        })).includes(true);
    }
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    getShCtlElement(elm) {
        /** @type {?} */
        let parent = elm.parentElement;
        if (!parent)
            return null;
        if (parent.tagName.includes('SH-CTL')) {
            return parent;
        }
        else {
            return this.getShCtlElement(parent);
        }
    }
    /**
     * キーバリデーション付与
     * @return {?}
     */
    keyValidation() {
        window.document.onkeydown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F1 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F2 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F3 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F4 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F5 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F6 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F10 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F11 ||
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F12) {
                return false;
            }
            if (event.altKey &&
                (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_LEFT ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_RIGHT)) {
                return false;
            }
            if ((event.ctrlKey || event.metaKey) &&
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_N) {
                return false;
            }
            if ((event.ctrlKey || event.metaKey) &&
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_R) {
                return false;
            }
            if ((event.ctrlKey || event.metaKey) &&
                event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_D) {
                return false;
            }
            if (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_ENTER) {
                /** @type {?} */
                let input = (/** @type {?} */ (document.activeElement));
                if (input != null) {
                    if (input.type != 'textarea') {
                        //次の操作可能なタグに切り替える
                        /** @type {?} */
                        const nodeList = window.document.querySelectorAll('.can-moved-with-the-enter-key');
                        /** @type {?} */
                        const filteredInput = Array.from(nodeList).filter((/**
                         * @param {?} el
                         * @return {?}
                         */
                        (el) => {
                            return this.isTargetElement((/** @type {?} */ (el)));
                        }));
                        /** @type {?} */
                        let preInput = null;
                        for (let i = 0; i < filteredInput.length; i++) {
                            /** @type {?} */
                            let cur_input = (/** @type {?} */ (filteredInput[i]));
                            if (input.name === cur_input.name) {
                                if (++i >= filteredInput.length) {
                                    i = 0;
                                }
                                cur_input.blur();
                                if (event.shiftKey) {
                                    preInput.focus();
                                }
                                else {
                                    /** @type {?} */
                                    let nextInput = (/** @type {?} */ (filteredInput[i]));
                                    nextInput.focus();
                                }
                                return false;
                            }
                            preInput = (/** @type {?} */ (filteredInput[i]));
                        }
                    }
                }
            }
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShAppComponent.prototype.redirectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShFormControlType {
    //コンストラクタでctlNameを必ず指定する
    /**
     * @param {?} _ctlName
     */
    constructor(_ctlName) {
        //要素コントロール名
        this.ctlName = "SHFormControl";
        //表示レイアウト切り替えフラグ(true:閲覧専用/false:編集可能)
        this.isDisabled = false;
        //値バインド変数
        this.value = "";
        //タイトル名
        this.title = "";
        //コントロール挙動(auto/always/nevwer)
        this.floatLabel = "auto";
        //閲覧専用画面でのラベル幅(px)
        this.labelWidth = "150";
        //input要素に対するstyleの指定(形式：{ color: "red" })
        this.styles = {};
        //input要素に対するclassの指定(形式：{ "className": true } or "className className2")
        this.classes = {};
        //input要素に対する必須入力フラグ
        this.required = false;
        //input要素に対する状態の指定
        this.state = "";
        //input要素に対する文言の指定
        this.message = [""];
        this.ctlName = _ctlName;
    }
}
if (false) {
    /** @type {?} */
    ShFormControlType.prototype.ctlName;
    /** @type {?} */
    ShFormControlType.prototype.isDisabled;
    /** @type {?} */
    ShFormControlType.prototype.value;
    /** @type {?} */
    ShFormControlType.prototype.title;
    /** @type {?} */
    ShFormControlType.prototype.floatLabel;
    /** @type {?} */
    ShFormControlType.prototype.labelWidth;
    /** @type {?} */
    ShFormControlType.prototype.maxlength;
    /** @type {?} */
    ShFormControlType.prototype.styles;
    /** @type {?} */
    ShFormControlType.prototype.classes;
    /** @type {?} */
    ShFormControlType.prototype.required;
    /** @type {?} */
    ShFormControlType.prototype.state;
    /** @type {?} */
    ShFormControlType.prototype.message;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SHCtlCommon, ShAppComponent, ShCtlApiService, ShCtlCommonModule, ShFlexDirective, ShFlexRowDirective, ShFormControlType, ShReadOnlyDirective, SHCtlAllCharComponent as ɵa, SHFormControl as ɵb, SHCtlKbnSelectComponent as ɵba, ShCtlPopupComponent as ɵbb, ShCtlPopupMultiComponent as ɵbc, SHCtlPopupDialogComponent as ɵbd, SHCtlPopupDialogMultiComponent as ɵbe, ShCtlValidatedErrorComponent as ɵbf, SHCtlHalfNumberComponent as ɵbg, SHCtlCheckComponent as ɵbh, SHCtlLockScreenComponent as ɵbi, NgDateValuePipe as ɵbj, ShCtlStateDirective as ɵbk, SHCtlAllCharMLComponent as ɵc, SHCtlBunjNoComponent as ɵd, SHCtlDateComponent as ɵe, JpDateAdapter as ɵf, SHCtlHalfCharComponent as ɵg, SHCtlJigCodeComponent as ɵh, SHFormPopup as ɵi, SmplPopupService as ɵj, BindCtlService as ɵk, LockScreenService as ɵl, SHCtlJyuCodeComponent as ɵm, SHCtlKatakanaComponent as ɵn, SHCtlNumberComponent as ɵo, SHCtlSesyuCodeComponent as ɵp, SHCtlTanCodeComponent as ɵq, SHCtlTelNoComponent as ɵr, SHCtlTimeComponent as ɵs, SHCtlTokuCodeComponent as ɵt, SHCtlWideCharComponent as ɵu, SHCtlWideCharMLComponent as ɵv, SHCtlYearMonthComponent as ɵw, SHCtlZipNoComponent as ɵx, SHCtlKbnRadioComponent as ɵy, SmplKbnCodeService as ɵz };
//# sourceMappingURL=sh-form-control.js.map
