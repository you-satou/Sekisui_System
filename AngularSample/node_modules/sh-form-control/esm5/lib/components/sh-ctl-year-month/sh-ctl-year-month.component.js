/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ElementRef } from "@angular/core";
import { SHCtlCommon } from "../sh-ctl-common";
import { SHFormControl } from "../../utilities/ShFormControl";
import { FormControl } from "@angular/forms";
import { MomentDateAdapter, MAT_MOMENT_DATE_ADAPTER_OPTIONS } from "@angular/material-moment-adapter";
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from "@angular/material/core";
import * as _moment from "moment";
/** @type {?} */
var moment = _moment;
/** @type {?} */
export var MY_FORMATS = {
    parse: {
        dateInput: "MM/YYYY"
    },
    display: {
        dateInput: "MM/YYYY",
        monthYearLabel: "MMM YYYY",
        dateA11yLabel: "LL",
        monthYearA11yLabel: "MMMM YYYY"
    }
};
var ɵ0 = {
    parse: {
        dateInput: "YYYY-MM"
    },
    display: {
        dateInput: "YYYY-MM",
        monthYearLabel: "MMM YYYY",
        dateA11yLabel: "LL",
        monthYearA11yLabel: "MMMM YYYY"
    }
};
var SHCtlYearMonthComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SHCtlYearMonthComponent, _super);
    function SHCtlYearMonthComponent(dataAdapter, el) {
        var _this = _super.call(this) || this;
        _this.dataAdapter = dataAdapter;
        _this.el = el;
        _this.isValidateError = false;
        _this.errorMessage = "日付に誤りがあります。";
        _this.cache = { year: null, month: null };
        _this.date = new FormControl(moment());
        _this.max = "9999-12";
        _this.min = "1000-12";
        _this.ctlName = "SHCtlYearMonth";
        dataAdapter.setLocale("ja");
        return _this;
    }
    /**
     * DatePickerのyear選択時のハンドラー
     * @param normalizedYear
     */
    /**
     * DatePickerのyear選択時のハンドラー
     * @param {?} normalizedYear
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.chosenYearHandler = /**
     * DatePickerのyear選択時のハンドラー
     * @param {?} normalizedYear
     * @return {?}
     */
    function (normalizedYear) {
        this.cache.year = normalizedYear.year();
    };
    /**
     * DatePickerのmonth選択時のハンドラー
     * @param normalizedMonth
     * @param datepicker
     */
    /**
     * DatePickerのmonth選択時のハンドラー
     * @param {?} normalizedMonth
     * @param {?} datepicker
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.chosenMonthHandler = /**
     * DatePickerのmonth選択時のハンドラー
     * @param {?} normalizedMonth
     * @param {?} datepicker
     * @return {?}
     */
    function (normalizedMonth, datepicker) {
        this.cache.month = normalizedMonth.month() + 1;
        datepicker.close();
        this.setValue();
        /** @type {?} */
        var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
        setTimeout((/**
         * @return {?}
         */
        function () { inputValue.dispatchEvent(new Event('change')); }), 10);
        this.valueChange.emit(this.toValue(this.value));
    };
    /**
     * DatePickerから取得した値をvalueへセットする
     */
    /**
     * DatePickerから取得した値をvalueへセットする
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.setValue = /**
     * DatePickerから取得した値をvalueへセットする
     * @return {?}
     */
    function () {
        /** @type {?} */
        var yearAndMonth = this.cache.year.toString() + this.cache.month.toString();
        this.value = this.toText(yearAndMonth);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes.value) {
            return;
        }
        if (!changes.value.currentValue) {
            this.value = "";
            return;
        }
        if (changes.value.currentValue.length >= 7) {
            this.value = "";
            return;
        }
        if (changes.value.currentValue) {
            this.value = this.toText(changes.value.currentValue);
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.getYearAndManth = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (!date)
            return;
        /** @type {?} */
        var val = new Date(date).toLocaleDateString().split('/');
        /** @type {?} */
        var year = val[0];
        /** @type {?} */
        var month = val[1];
        return "" + year + month;
    };
    /**
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        if (this.value != null && this.isDisabled) {
            this.changeFormat(this.value.replace("-", ""));
        }
    };
    /**
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onInit();
    };
    /**
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (!this.isDisabled) {
            /** @type {?} */
            var element = (/** @type {?} */ (this.el.nativeElement.querySelector('input')));
            element.setAttribute("max", this.max);
            element.setAttribute("min", this.min);
        }
    };
    /**
     * onOpened
     */
    /**
     * onOpened
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onOpened = /**
     * onOpened
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var el = document.querySelector("mat-datepicker-content");
        el.addEventListener("focusin", (/**
         * @return {?}
         */
        function () {
            _this.isfocused = true;
        }));
    };
    /**
     * onClosed
     */
    /**
     * onClosed
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onClosed = /**
     * onClosed
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
        setTimeout((/**
         * @return {?}
         */
        function () { inputValue.dispatchEvent(new Event('focus')); }), 0);
    };
    /**
     * onInput
     * @param event input
     */
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onInput = /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    function (event) {
        this.yearAndMonthCalculation(event);
    };
    /**
     * onKeypress
     * @param event keypress
     */
    /**
     * onKeypress
     * @param {?} event keypress
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onKeypress = /**
     * onKeypress
     * @param {?} event keypress
     * @return {?}
     */
    function (event) {
        this.yearAndMonthCalculation(event);
    };
    /**
     * onClick
     * @param event click
     */
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onClick = /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    function (event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    };
    /**
     * onChange
     * @param event change
     */
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onChange = /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.onBeforeChange(event);
        this.valueChange.emit(this.toValue(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        function () { _this.onAfterChange(event); }), 0);
    };
    /**
     * onFocus
     * @param event focus
     */
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onFocus = /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.onBeforeFocus(event);
        this.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        function () { _this.onAfterFocus(event); }), 0);
        return true;
    };
    /**
     * onBlur
     * @param event blur
     */
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.onBlur = /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        function () { _this.onAfterBlur(event); }), 0);
        ;
    };
    /**
     * 年月計算
     * @param event
     */
    /**
     * 年月計算
     * @private
     * @param {?} event
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.yearAndMonthCalculation = /**
     * 年月計算
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = this.isKeysAllowedToMe(event);
        if (key === 0) {
            this.setCurrentDate(event);
            this.onChange(event);
        }
    };
    /**
     * 自タイプに許容されているキー
     * @param event keypress
     */
    /**
     * 自タイプに許容されているキー
     * @private
     * @param {?} event keypress
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.isKeysAllowedToMe = /**
     * 自タイプに許容されているキー
     * @private
     * @param {?} event keypress
     * @return {?}
     */
    function (event) {
        if (event.key === SHCtlCommon.Const.keyCodes.signs[191]) {
            return 0;
        }
        return null;
    };
    /**
     * 本日日付の設定
     * @param event keypress
     */
    /**
     * 本日日付の設定
     * @param {?} event keypress
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.setCurrentDate = /**
     * 本日日付の設定
     * @param {?} event keypress
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var newDate = new Date();
        /** @type {?} */
        var nullFirstString = null;
        /** @type {?} */
        var nullLastString = null;
        nullFirstString = SHCtlCommon.padding(newDate.getFullYear(), 4); // YYYY
        nullLastString = SHCtlCommon.padding(newDate.getMonth() + 1, 2); // MM
        event.target.value = String(nullFirstString + "-" + nullLastString);
    };
    /**
     * 接頭語付与
     * @param inputTargetValue num.substr(0, 2)
     */
    /**
     * 接頭語付与
     * @param {?} inputTargetValue num.substr(0, 2)
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.convYear = /**
     * 接頭語付与
     * @param {?} inputTargetValue num.substr(0, 2)
     * @return {?}
     */
    function (inputTargetValue) {
        if (inputTargetValue >= "00" && inputTargetValue <= 49) {
            return "20" + inputTargetValue;
        }
        else {
            return "19" + inputTargetValue;
        }
    };
    /**
     * YYYY/MM処理
     * @param inputTargetValue event.target.value
     */
    /**
     * YYYY/MM処理
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.toText = /**
     * YYYY/MM処理
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    function (inputTargetValue) {
        /** @type {?} */
        var num = inputTargetValue.toString().replace(/\//g, "");
        if (num.trim().length === 0) {
            return "";
        }
        // 4桁西暦
        if (num.length === 3 || num.length === 4) {
            // // 接頭語取得
            return SHCtlCommon.padding(num, 4) + "-01";
        }
        else if (num.length === 5 || num.length === 6) {
            // 接頭語取得
            /** @type {?} */
            var year = num.substr(0, 4) + "-" + ("00" + num.substr(4)).slice(-2);
            return year;
        }
        else {
            return inputTargetValue;
        }
    };
    /**
     * 接続文字除去
     * @param inputTargetValue event.target.value
     */
    /**
     * 接続文字除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.toValue = /**
     * 接続文字除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    function (inputTargetValue) {
        return new String(inputTargetValue).replace("-", "");
    };
    /**
     * フォーマット編集
     * @param value this.value
     */
    /**
     * フォーマット編集
     * @param {?} value this.value
     * @return {?}
     */
    SHCtlYearMonthComponent.prototype.changeFormat = /**
     * フォーマット編集
     * @param {?} value this.value
     * @return {?}
     */
    function (value) {
        if (value != null && value != undefined && value.length === 6) {
            /** @type {?} */
            var nullFirstString = null;
            /** @type {?} */
            var nullLastString = null;
            nullFirstString = value.slice(0, 4);
            nullLastString = value.slice(4, 6);
            this.stringValue = String(nullFirstString + "年" + nullLastString + "月");
            return this.stringValue;
        }
        else {
            this.stringValue = '';
            return this.stringValue;
        }
    };
    SHCtlYearMonthComponent.decorators = [
        { type: Component, args: [{
                    selector: "sh-ctl-year-month",
                    template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n      <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n        (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n      </mat-datepicker>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n    <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n      (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n    </mat-datepicker>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    providers: [
                        {
                            provide: DateAdapter,
                            useClass: MomentDateAdapter,
                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]
                        },
                        {
                            provide: MAT_DATE_FORMATS,
                            useValue: ɵ0
                        }
                    ],
                    styles: [".isValidateError{background-color:#ffd2ff}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}input[type=month]::-webkit-calendar-picker-indicator{display:none}input[type=month]::-webkit-inner-spin-button,input[type=month]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=month]::-webkit-clear-button{display:none}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                }] }
    ];
    /** @nocollapse */
    SHCtlYearMonthComponent.ctorParameters = function () { return [
        { type: DateAdapter },
        { type: ElementRef }
    ]; };
    SHCtlYearMonthComponent.propDecorators = {
        max: [{ type: Input }],
        min: [{ type: Input }]
    };
    return SHCtlYearMonthComponent;
}(SHFormControl));
export { SHCtlYearMonthComponent };
if (false) {
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.isValidateError;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.errorMessage;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.adjust;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.stringValue;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.cache;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.date;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.max;
    /** @type {?} */
    SHCtlYearMonthComponent.prototype.min;
    /**
     * @type {?}
     * @private
     */
    SHCtlYearMonthComponent.prototype.dataAdapter;
    /**
     * @type {?}
     * @private
     */
    SHCtlYearMonthComponent.prototype.el;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,