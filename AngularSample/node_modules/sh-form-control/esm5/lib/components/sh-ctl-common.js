/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var SHCtlCommon = /** @class */ (function () {
    function SHCtlCommon() {
    }
    /**
     * 指定したフォーマットでDateをstringに変換
     * @param date
     * @param format
     */
    /**
     * 指定したフォーマットでDateをstringに変換
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    SHCtlCommon.getDateStr = /**
     * 指定したフォーマットでDateをstringに変換
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    function (date, format) {
        format = format.replace(/YYYY/g, date.getFullYear().toString());
        format = format.replace(/MM/g, ('0' + (date.getMonth() + 1).toString()).slice(-2).toString());
        format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2).toString());
        return format;
    };
    /**
     * 中身が空かどうかの判定
     * @param obj
     */
    /**
     * 中身が空かどうかの判定
     * @param {?} obj
     * @return {?}
     */
    SHCtlCommon.isBlank = /**
     * 中身が空かどうかの判定
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj === undefined)
            return true;
        if (obj === null)
            return true;
        if (typeof (obj) === "string" && obj === "")
            return true;
        if (typeof (obj) === "object" && (obj.length !== undefined && obj.length <= 0))
            return true;
        return false;
    };
    /**
     * 指定された値または0でパディングする
     * @param num パディング対象値
     * @param length　値の長さ
     * @param option 何でパディングしたいか
     */
    /**
     * 指定された値または0でパディングする
     * @param {?} num パディング対象値
     * @param {?} length 　値の長さ
     * @param {?=} option 何でパディングしたいか
     * @return {?}
     */
    SHCtlCommon.padding = /**
     * 指定された値または0でパディングする
     * @param {?} num パディング対象値
     * @param {?} length 　値の長さ
     * @param {?=} option 何でパディングしたいか
     * @return {?}
     */
    function (num, length, option) {
        //指定がなければ0
        option = option || "0";
        //数値型に変換
        num = Number(num);
        //数値でなければnullを返す
        if (isNaN(num))
            return null;
        return (Array(length).join(option) + num).slice(-length);
    };
    /**
     * 改行の削除
     * @param str　改行削除したい文字列
     */
    /**
     * 改行の削除
     * @param {?} str 　改行削除したい文字列
     * @return {?}
     */
    SHCtlCommon.LineBreak = /**
     * 改行の削除
     * @param {?} str 　改行削除したい文字列
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var tmp = str.replace(/\r?\n/g, "");
        return tmp;
    };
    /*********************************************************
     * 新:入力チェック
     * ********************************************************/
    /**
     * 全角入力チェック
     * @param event inputイベント
     */
    /*********************************************************
       * 新:入力チェック
       * ********************************************************/
    /**
     * 全角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceFullWidth = /*********************************************************
       * 新:入力チェック
       * ********************************************************/
    /**
     * 全角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, '');
    };
    /**
     * 半角入力チェック
     * @param event inputイベント
     */
    /**
     * 半角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceHalfChar = /**
     * 半角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.match(/[ -~｡-ﾟ]+/g);
    };
    /**
    * 数値入力チェック
    * @param event inputイベント
    */
    /**
     * 数値入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceNumeric = /**
     * 数値入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/\d*/g, "");
    };
    /**
     * スペース入力チェック(半角)
     * @param event inputイベント
     */
    /**
     * スペース入力チェック(半角)
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceSpace = /**
     * スペース入力チェック(半角)
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "");
    };
    /**
     * スペース入力チェック(半角)→(全角)
     * @param event inputイベント
     */
    /**
     * スペース入力チェック(半角)→(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceHalfSpaceToFull = /**
     * スペース入力チェック(半角)→(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "　");
    };
    /**
     * スペース入力チェック(全角)
     * @param event inputイベント
     */
    /**
     * スペース入力チェック(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceFUllSpace = /**
     * スペース入力チェック(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/　/g, "");
    };
    /**
    * アルファベット入力チェック
    * @param event inputイベント
    */
    /**
     * アルファベット入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceHalfWidth = /**
     * アルファベット入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[a-zA-Z]/g, "");
    };
    /**
    * 記号入力チェック
    * @param event inputイベント
    * @param exclusionValue 入力を許容したい記号の配列
    */
    /**
     * 記号入力チェック
     * @param {?} event inputイベント
     * @param {?=} exclusionValue 入力を許容したい記号の配列
     * @return {?}
     */
    SHCtlCommon.replaceSign = /**
     * 記号入力チェック
     * @param {?} event inputイベント
     * @param {?=} exclusionValue 入力を許容したい記号の配列
     * @return {?}
     */
    function (event, exclusionValue) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(new RegExp(SHCtlCommon.getRestrictedSign(exclusionValue), "g"), "");
    };
    /**
     * 全角ダブルクォーテーション入力チェック
     * @param event inputイベント
     */
    /**
     * 全角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceFullDoubleQuote = /**
     * 全角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("”", "＂");
    };
    /**
     * 半角ダブルクォーテーション入力チェック
     * @param event inputイベント
     */
    /**
     * 半角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    SHCtlCommon.replaceHalfDoubleQuote = /**
     * 半角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    function (event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("\"", "ﾞ");
    };
    /**
     * フォーマット設定
     * @param inputTargetValue event.target.value
     */
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    SHCtlCommon.replaceHalf = /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.target.value = event.target.value.replace(/[A-Za-z0-9-!"#$%&'()=<>,.?_\[\]|{}@`^~\\/+;*:}]/g, (/**
         * @param {?} inputTargetValue
         * @return {?}
         */
        function (inputTargetValue) {
            return String.fromCharCode(inputTargetValue.charCodeAt(0) + 65248);
        }));
        return event.target.value;
    };
    /**
     * フォーマット設定
     * @param inputTargetValue event.target.value
     */
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    SHCtlCommon.replaceHalfKana = /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var D_MUD = 'ガギグゲゴザジズゼゾダヂヅデドバビブベボパピプペポヴヷヺ';
        /** @type {?} */
        var S_MUD = 'ｶﾞｷﾞｸﾞｹﾞｺﾞｻﾞｼﾞｽﾞｾﾞｿﾞﾀﾞﾁﾞﾂﾞﾃﾞﾄﾞﾊﾞﾋﾞﾌﾞﾍﾞﾎﾞﾊﾟﾋﾟﾌﾟﾍﾟﾎﾟｳﾞﾜﾞｦﾞ';
        /** @type {?} */
        var D_KIY = 'アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホ'
            + 'マミムメモヤユヨラリルレロワヲンァィゥェォッャュョ。、ー「」・';
        /** @type {?} */
        var S_KIY = 'ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮ｡､ｰ｢｣･';
        /** @type {?} */
        var toZenKata = (/**
         * @param {?} str
         * @return {?}
         */
        function (str) {
            for (var i = 0, len = D_MUD.length; i < len; i++) {
                str = str.split(S_MUD.slice(i * 2, i * 2 + 2)).join(D_MUD.slice(i, i + 1));
            }
            for (var i = 0, len = D_KIY.length; i < len; i++) {
                str = str.split(S_KIY.slice(i, i + 1)).join(D_KIY.slice(i, i + 1));
            }
            return str;
        });
        event.target.value = toZenKata(event.target.value);
        return this.replaceHalf(event);
    };
    /**
     * input値の入力文字数制限
     * @param event inputイベント
     * @param maxlength 入力制限文字数
     */
    /**
     * input値の入力文字数制限
     * @param {?} event inputイベント
     * @param {?} maxlength 入力制限文字数
     * @return {?}
     */
    SHCtlCommon.sliceLength = /**
     * input値の入力文字数制限
     * @param {?} event inputイベント
     * @param {?} maxlength 入力制限文字数
     * @return {?}
     */
    function (event, maxlength) {
        if (!event)
            return;
        event.target.value = event.target.value.slice(0, maxlength);
    };
    /**
     * 入力制限記号の取得
     * @param exclusionValue 入力可能文字の配列
     */
    /**
     * 入力制限記号の取得
     * @private
     * @param {?} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    SHCtlCommon.getRestrictedSign = /**
     * 入力制限記号の取得
     * @private
     * @param {?} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    function (exclusionValue) {
        if (exclusionValue === undefined || exclusionValue.length === 0)
            return SHCtlCommon.exclude();
        return SHCtlCommon.exclude(exclusionValue);
    };
    /**
     * itemが条件に適しているならtrueを返す
     * @param item
     */
    /**
     * itemが条件に適しているならtrueを返す
     * @param {?} item
     * @return {?}
     */
    SHCtlCommon.needsEscape = /**
     * itemが条件に適しているならtrueを返す
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item === "." || item === "*" || item === "-" || item === "+" || item === "[" || item === "]")
            return true;
    };
    /**
     * itemの前にダブルバックスラッシュ付与する
     * @param item
     */
    /**
     * itemの前にダブルバックスラッシュ付与する
     * @param {?} item
     * @return {?}
     */
    SHCtlCommon.escapeByBackSlash = /**
     * itemの前にダブルバックスラッシュ付与する
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var escapedValue = "\\" + item;
        return escapedValue;
    };
    /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @param exclusionValue 入力可能文字の配列
     */
    /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @private
     * @param {?=} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    SHCtlCommon.exclude = /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @private
     * @param {?=} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    function (exclusionValue) {
        var _this = this;
        /** @type {?} */
        var excludeIndex = null;
        /** @type {?} */
        var signsList = this.signs.split("");
        signsList.map((/**
         * @param {?} item
         * @param {?} index
         * @param {?} array
         * @return {?}
         */
        function (item, index, array) {
            if (exclusionValue !== undefined)
                excludeIndex = exclusionValue.indexOf(item);
            if (excludeIndex !== -1 && excludeIndex !== null)
                array[index] = "";
            if (array[index] !== "" && index !== 0 && index !== signsList.length - 1) {
                if (_this.needsEscape(item))
                    array[index] = _this.escapeByBackSlash(item);
            }
        }));
        return signsList.join("");
    };
    /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
    */
    /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
     * @return {?}
     */
    SHCtlCommon.getUniqueStr = /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
     * @return {?}
     */
    function () {
        return "uk-" + Math.random().toString(36).slice(-8);
    };
    /**
    * 従業員コードの変換(6桁→8桁)
    * @param s コード文字列
    * @return 変換後のコード文字列
    */
    /**
     * 従業員コードの変換(6桁→8桁)
     * @param {?} s コード文字列
     * @return {?} 変換後のコード文字列
     */
    SHCtlCommon.convJyuCode6To8 = /**
     * 従業員コードの変換(6桁→8桁)
     * @param {?} s コード文字列
     * @return {?} 変換後のコード文字列
     */
    function (s) {
        // ブランクなら
        if (this.isBlank(s))
            return '';
        // 6桁以外処理しない
        if (s.trim().length != 6 && !isNaN(parseInt(s.toString())))
            return s;
        /** @type {?} */
        var sJyuCode = s;
        /** @type {?} */
        var result = '00';
        if (((sJyuCode == '922222') || (sJyuCode == '933333') ||
            (sJyuCode == '944444') || (sJyuCode == '955555') ||
            (sJyuCode == '966666') || (sJyuCode == '977777') ||
            (sJyuCode == '988888')) || ((sJyuCode >= '999000') && (sJyuCode <= '999999'))) {
            result = '99' + sJyuCode;
        }
        else {
            /** @type {?} */
            var strCd = sJyuCode.substr(0, 1).toUpperCase();
            sJyuCode = sJyuCode.replace(/[c|k|s]/g, '');
            if (strCd == 'C' || strCd == 'S') {
                //左1文字　[C]か[S]のとき
                /** @type {?} */
                var subNumber = sJyuCode.substr(2, 2);
                //左に文字目から自分含め２文字目が　
                if (Number(subNumber) >= 0 && Number(subNumber) <= 49) {
                    //>= 0 および　 <=49 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 および　 <=49 でない場合
                    result = '19' + sJyuCode;
                }
            }
            else if (strCd == 'K') {
                //左1文字　[C]か[S]のときでなく[K]の場合
                result = '00' + sJyuCode;
            }
            else {
                //左1文字　上記以外
                /** @type {?} */
                var rStr = sJyuCode.substr(-2, 2);
                //左２文字が
                if (Number(rStr) >= 0 && Number(rStr) <= 43) {
                    //     >= 0 及び　<= 43 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 及び　<= 43 でない場合
                    result = '19' + sJyuCode;
                }
            }
        }
        // 整形文字返却
        return result;
    };
    SHCtlCommon.Const = {
        keyCodes: {
            numerics: { min: 48, max: 57 },
            // 半角1 to 0
            tenKeyNumerics: { min: 96, max: 105 },
            // テンキーの半角0 to 9
            enter: 13,
            // エンター
            chars: { min: 65, max: 90 },
            // 半角a to z
            space: 32,
            // 半角スペース
            wideChara: 229,
            // 全角
            okCharas: {
                "65": "a", "67": "c", "86": "v", "88": "x", "90": "z"
            },
            // Ctrlとの組み合わせ
            signs: {
                // 半角記号
                "186": ":", "187": ";", "188": ",", "189": "-", "190": ".", "191": "/",
                "192": "@", "219": "[", "220": "\\", "221": "]", "222": "^", "226": "_",
                "111": "/", "106": "*", "109": "-", "107": "+", "110": "." // テンキーの分
            },
            minus: [109, 189],
            // 半角マイナス(ハイフン)
            dot: [110, 190],
            // 半角ドット
            slash: [111, 191],
            // 半角スラッシュ
            plus: [107, 187],
        },
        state: {
            none: 'none',
            danger: 'danger',
            warning: 'warning',
            success: 'success',
        },
        timeFormat: {
            HH: 3600,
            HHMM: 60,
            HHMMSS: 1,
        }
    };
    SHCtlCommon.signs = "[\\\\!\"#$%&'()\*\+\-\.,\/:;<=>?@\[\]^_`{|}~]";
    SHCtlCommon.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ SHCtlCommon.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SHCtlCommon_Factory() { return new SHCtlCommon(); }, token: SHCtlCommon, providedIn: "root" });
    return SHCtlCommon;
}());
export { SHCtlCommon };
if (false) {
    /** @type {?} */
    SHCtlCommon.Const;
    /**
     * @type {?}
     * @private
     */
    SHCtlCommon.signs;
}
//# sourceMappingURL=data:application/json;base64,