/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { MaxByteLengthService } from "../services/max-bytelength.service";
var MaxByteLengthHistory = /** @class */ (function () {
    function MaxByteLengthHistory(value, startPoint, maxByteLength) {
        this.enterableBytes = 0;
        this.service = new MaxByteLengthService();
        this.cache = value;
        this.startPoint = value.length == 1 && startPoint == 1 ? 0 : startPoint;
        this.maxByteLength = maxByteLength;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    MaxByteLengthHistory.isAllowOperation = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return MaxByteLengthService.isAllowOperation(e);
    };
    /**
     *@ enterableBytesを書き換えます
     */
    /**
     * \@ enterableBytesを書き換えます
     * @param {?} value
     * @return {?}
     */
    MaxByteLengthHistory.prototype.changeEnterableBytes = /**
     * \@ enterableBytesを書き換えます
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var info = this.service.generateByteInfo(value);
        /** @type {?} */
        var entarableByte = this.maxByteLength - info.length;
        this.enterableBytes = entarableByte >= 0 ? entarableByte : 0;
    };
    /**
     *@ 残りの入力可能byte数を返す
     */
    /**
     * \@ 残りの入力可能byte数を返す
     * @return {?}
     */
    MaxByteLengthHistory.prototype.getEnterableBytes = /**
     * \@ 残りの入力可能byte数を返す
     * @return {?}
     */
    function () {
        return this.enterableBytes;
    };
    /**
     *@ inputにセットする値を返す
     */
    /**
     * \@ inputにセットする値を返す
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    MaxByteLengthHistory.prototype.getResult = /**
     * \@ inputにセットする値を返す
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    function (data, value) {
        if (!value)
            return "";
        // // 許容バイト数がまだある時
        if (this.enterableBytes)
            return value;
        if (this.startPoint === 0) {
            var bytes_1 = this.service.generateByteInfo(value).bytes;
            /** @type {?} */
            var maxByteLength = this.service.calcMaxLength(bytes_1, this.maxByteLength);
            return value.substr(0, maxByteLength);
        }
        var bytes = this.service.generateByteInfo(data).bytes;
        var length = this.service.generateByteInfo(this.cache).length;
        /** @type {?} */
        var len = this.service.calcMaxLength(bytes, this.maxByteLength, length);
        /** @type {?} */
        var insertStr = data.substr(0, len);
        /** @type {?} */
        var h = this.cache.substr(0, this.startPoint);
        /** @type {?} */
        var f = this.cache.substring(this.startPoint);
        return h + insertStr + f;
    };
    /**
     *アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
     */
    /**
     * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
     * @param {?} value
     * @return {?}
     */
    MaxByteLengthHistory.prototype.getMaxLength = /**
     * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var bytes = this.service.generateByteInfo(value).bytes;
        return this.service.calcMaxLength(bytes, this.maxByteLength);
    };
    /**
     *デバッグ用
     */
    /**
     * デバッグ用
     * @return {?}
     */
    MaxByteLengthHistory.prototype.toString = /**
     * デバッグ用
     * @return {?}
     */
    function () {
        return JSON.stringify({
            cache: this.cache,
            startPoint: this.startPoint,
            enterableBytes: this.enterableBytes,
            maxByteLength: this.maxByteLength,
        });
    };
    return MaxByteLengthHistory;
}());
export { MaxByteLengthHistory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.startPoint;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.enterableBytes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.maxByteLength;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF4Qnl0ZUxlbmd0aEhpc3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaC1mb3JtLWNvbnRyb2wvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL01heEJ5dGVMZW5ndGhIaXN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUUxRTtJQU1FLDhCQUFZLEtBQWEsRUFBRSxVQUFrQixFQUFFLGFBQXFCO1FBSDVELG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBRTNCLFlBQU8sR0FBeUIsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBRWpFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDeEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFDYSxxQ0FBZ0I7Ozs7SUFBOUIsVUFBK0IsQ0FBZ0I7UUFDN0MsT0FBTyxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0Q7O09BRUc7Ozs7OztJQUNJLG1EQUFvQjs7Ozs7SUFBM0IsVUFBNEIsS0FBYTs7WUFDakMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOztZQUMzQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTTtRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDRDs7T0FFRzs7Ozs7SUFDSSxnREFBaUI7Ozs7SUFBeEI7UUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUNEOztPQUVHOzs7Ozs7O0lBQ0ksd0NBQVM7Ozs7OztJQUFoQixVQUFpQixJQUFZLEVBQUUsS0FBYTtRQUMxQyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3RCLGtCQUFrQjtRQUNsQixJQUFJLElBQUksQ0FBQyxjQUFjO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDdEMsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLENBQUMsRUFBRTtZQUNqQixJQUFBLG9EQUFLOztnQkFDUCxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQzlDLE9BQUssRUFDTCxJQUFJLENBQUMsYUFBYSxDQUNuQjtZQUNELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDdkM7UUFDTyxJQUFBLGlEQUFLO1FBQ0wsSUFBQSx5REFBTTs7WUFDUixHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDOztZQUNuRSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDOztZQUMvQixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUM7O1lBQ3pDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNEOztPQUVHOzs7Ozs7SUFDSSwyQ0FBWTs7Ozs7SUFBbkIsVUFBb0IsS0FBSztRQUNmLElBQUEsa0RBQUs7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUM3QixLQUFLLEVBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztJQUNOLENBQUM7SUFDRDs7T0FFRzs7Ozs7SUFDSSx1Q0FBUTs7OztJQUFmO1FBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUNsQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBeEVELElBd0VDOzs7Ozs7O0lBdkVDLHFDQUFzQjs7Ozs7SUFDdEIsMENBQTJCOzs7OztJQUMzQiw4Q0FBbUM7Ozs7O0lBQ25DLDZDQUE4Qjs7Ozs7SUFDOUIsdUNBQW1FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF4Qnl0ZUxlbmd0aFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvbWF4LWJ5dGVsZW5ndGguc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1heEJ5dGVMZW5ndGhIaXN0b3J5IHtcclxuICBwcml2YXRlIGNhY2hlOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBzdGFydFBvaW50OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBlbnRlcmFibGVCeXRlczogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIG1heEJ5dGVMZW5ndGg6IG51bWJlcjtcclxuICBwcml2YXRlIHNlcnZpY2U6IE1heEJ5dGVMZW5ndGhTZXJ2aWNlID0gbmV3IE1heEJ5dGVMZW5ndGhTZXJ2aWNlKCk7XHJcbiAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgc3RhcnRQb2ludDogbnVtYmVyLCBtYXhCeXRlTGVuZ3RoOiBudW1iZXIpIHtcclxuICAgIHRoaXMuY2FjaGUgPSB2YWx1ZTtcclxuICAgIHRoaXMuc3RhcnRQb2ludCA9IHZhbHVlLmxlbmd0aCA9PSAxICYmIHN0YXJ0UG9pbnQgPT0gMSA/IDAgOiBzdGFydFBvaW50O1xyXG4gICAgdGhpcy5tYXhCeXRlTGVuZ3RoID0gbWF4Qnl0ZUxlbmd0aDtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBpc0FsbG93T3BlcmF0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIHJldHVybiBNYXhCeXRlTGVuZ3RoU2VydmljZS5pc0FsbG93T3BlcmF0aW9uKGUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKkAgZW50ZXJhYmxlQnl0ZXPjgpLmm7jjgY3mj5vjgYjjgb7jgZlcclxuICAgKi9cclxuICBwdWJsaWMgY2hhbmdlRW50ZXJhYmxlQnl0ZXModmFsdWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgaW5mbyA9IHRoaXMuc2VydmljZS5nZW5lcmF0ZUJ5dGVJbmZvKHZhbHVlKTtcclxuICAgIGNvbnN0IGVudGFyYWJsZUJ5dGUgPSB0aGlzLm1heEJ5dGVMZW5ndGggLSBpbmZvLmxlbmd0aDtcclxuICAgIHRoaXMuZW50ZXJhYmxlQnl0ZXMgPSBlbnRhcmFibGVCeXRlID49IDAgPyBlbnRhcmFibGVCeXRlIDogMDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICpAIOaui+OCiuOBruWFpeWKm+WPr+iDvWJ5dGXmlbDjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RW50ZXJhYmxlQnl0ZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnRlcmFibGVCeXRlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICpAIGlucHV044Gr44K744OD44OI44GZ44KL5YCk44KS6L+U44GZIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXN1bHQoZGF0YTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gXCJcIjtcclxuICAgIC8vIC8vIOioseWuueODkOOCpOODiOaVsOOBjOOBvuOBoOOBguOCi+aZglxyXG4gICAgaWYgKHRoaXMuZW50ZXJhYmxlQnl0ZXMpIHJldHVybiB2YWx1ZTtcclxuICAgIGlmICh0aGlzLnN0YXJ0UG9pbnQgPT09IDApIHtcclxuICAgICAgY29uc3QgeyBieXRlcyB9ID0gdGhpcy5zZXJ2aWNlLmdlbmVyYXRlQnl0ZUluZm8odmFsdWUpO1xyXG4gICAgICBjb25zdCBtYXhCeXRlTGVuZ3RoID0gdGhpcy5zZXJ2aWNlLmNhbGNNYXhMZW5ndGgoXHJcbiAgICAgICAgYnl0ZXMsXHJcbiAgICAgICAgdGhpcy5tYXhCeXRlTGVuZ3RoXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoMCwgbWF4Qnl0ZUxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGJ5dGVzIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyhkYXRhKTtcclxuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyh0aGlzLmNhY2hlKTtcclxuICAgIGNvbnN0IGxlbiA9IHRoaXMuc2VydmljZS5jYWxjTWF4TGVuZ3RoKGJ5dGVzLCB0aGlzLm1heEJ5dGVMZW5ndGgsIGxlbmd0aCk7XHJcbiAgICBjb25zdCBpbnNlcnRTdHIgPSBkYXRhLnN1YnN0cigwLCBsZW4pO1xyXG4gICAgY29uc3QgaCA9IHRoaXMuY2FjaGUuc3Vic3RyKDAsIHRoaXMuc3RhcnRQb2ludCk7XHJcbiAgICBjb25zdCBmID0gdGhpcy5jYWNoZS5zdWJzdHJpbmcodGhpcy5zdGFydFBvaW50KTtcclxuICAgIHJldHVybiBoICsgaW5zZXJ0U3RyICsgZjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICrjgqLjg6vjg5XjgqHjg5njg4Pjg4jjgoTmlbDlrZfjga7lhaXlipvmmYLjgavmqJnmupbjga5tYXhsZW5ndGjjgavoqK3lrprjgZnjgovjgZ/jgoHjga7lgKTjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWF4TGVuZ3RoKHZhbHVlKSB7XHJcbiAgICBjb25zdCB7IGJ5dGVzIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyh2YWx1ZSk7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmNhbGNNYXhMZW5ndGgoXHJcbiAgICAgICAgYnl0ZXMsXHJcbiAgICAgICAgdGhpcy5tYXhCeXRlTGVuZ3RoXHJcbiAgICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAq44OH44OQ44OD44Kw55SoXHJcbiAgICovXHJcbiAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgY2FjaGU6IHRoaXMuY2FjaGUsXHJcbiAgICAgIHN0YXJ0UG9pbnQ6IHRoaXMuc3RhcnRQb2ludCxcclxuICAgICAgZW50ZXJhYmxlQnl0ZXM6IHRoaXMuZW50ZXJhYmxlQnl0ZXMsXHJcbiAgICAgIG1heEJ5dGVMZW5ndGg6IHRoaXMubWF4Qnl0ZUxlbmd0aCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=