/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShCtlApiService } from './sh-ctl-api.service';
import * as i0 from "@angular/core";
import * as i1 from "./sh-ctl-api.service";
/**
 * 区分マスタの情報を取得
 */
var SmplKbnCodeService = /** @class */ (function () {
    function SmplKbnCodeService(apiComService) {
        this.apiComService = apiComService;
        //区分マスタ
        this.masterCache = [];
    }
    /**
     * 区分マスタ取得
     */
    /**
     * 区分マスタ取得
     * @param {?} url
     * @return {?}
     */
    SmplKbnCodeService.prototype.fetchAll = /**
     * 区分マスタ取得
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.apiComService.get(url)];
            });
        });
    };
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param key マスタの名前
     */
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    SmplKbnCodeService.prototype.getMasterData = /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var cache = this.masterCache.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.masterName == key;
        }));
        return cache.length > 0 ? cache[0].masterCache : [];
    };
    /**
     * マスタデータをキャッシュする
     * @param key マスタの名前
     * @param masterData マスタデータ
     */
    /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    SmplKbnCodeService.prototype.setMasterData = /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    function (key, masterData) {
        var e_1, _a;
        if (this.masterCache.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.masterCache), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    if (item.masterName == key) {
                        item.masterCache = masterData;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
    };
    SmplKbnCodeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SmplKbnCodeService.ctorParameters = function () { return [
        { type: ShCtlApiService }
    ]; };
    /** @nocollapse */ SmplKbnCodeService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SmplKbnCodeService_Factory() { return new SmplKbnCodeService(i0.ɵɵinject(i1.ShCtlApiService)); }, token: SmplKbnCodeService, providedIn: "root" });
    return SmplKbnCodeService;
}());
export { SmplKbnCodeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmplKbnCodeService.prototype.masterCache;
    /**
     * @type {?}
     * @private
     */
    SmplKbnCodeService.prototype.apiComService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21wbC1rYm4tY29kZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtZm9ybS1jb250cm9sLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NtcGwta2JuLWNvZGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7Ozs7QUFPdkQ7SUFLRSw0QkFDVSxhQUE4QjtRQUE5QixrQkFBYSxHQUFiLGFBQWEsQ0FBaUI7O1FBSWhDLGdCQUFXLEdBQW1CLEVBQUUsQ0FBQztJQUhyQyxDQUFDO0lBS0w7O09BRUc7Ozs7OztJQUNVLHFDQUFROzs7OztJQUFyQixVQUFzQixHQUFXOzs7Z0JBQy9CLHNCQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFvQixHQUFHLENBQUMsRUFBQzs7O0tBRXZEO0lBRUQ7OztPQUdHOzs7Ozs7SUFDSSwwQ0FBYTs7Ozs7SUFBcEIsVUFBcUIsR0FBVzs7WUFDMUIsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsSUFBSTtZQUN0QyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFBO1FBQy9CLENBQUMsRUFBQztRQUNGLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7OztJQUNJLDBDQUFhOzs7Ozs7SUFBcEIsVUFBcUIsR0FBVyxFQUFFLFVBQTZCOztRQUM3RCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQy9CLEtBQWlCLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsV0FBVyxDQUFBLGdCQUFBLDRCQUFFO29CQUE5QixJQUFJLElBQUksV0FBQTtvQkFDWCxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFFO3dCQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQTt3QkFDN0IsTUFBTTtxQkFDUDtpQkFDRjs7Ozs7Ozs7O1NBQ0Y7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0YsQ0FBQzs7Z0JBOUNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBVFEsZUFBZTs7OzZCQUR4QjtDQXdEQyxBQWhERCxJQWdEQztTQTdDWSxrQkFBa0I7Ozs7OztJQU83Qix5Q0FBeUM7Ozs7O0lBSnZDLDJDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2hDdGxBcGlTZXJ2aWNlIH0gZnJvbSAnLi9zaC1jdGwtYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTbXBsS2JuU3RvcmUgfSBmcm9tICcuLi9lbnRpdGllcy9TbXBsS2JuU3RvcmUnO1xyXG5pbXBvcnQgeyBTbXBsS2JuQ29kZVR5cGUgfSBmcm9tICcuLi9lbnRpdGllcy9TbXBsS2JuQ29kZVR5cGUnO1xyXG5cclxuLyoqXHJcbiAqIOWMuuWIhuODnuOCueOCv+OBruaDheWgseOCkuWPluW+l1xyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU21wbEtibkNvZGVTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFwaUNvbVNlcnZpY2U6IFNoQ3RsQXBpU2VydmljZSxcclxuICApIHsgfVxyXG5cclxuICAvL+WMuuWIhuODnuOCueOCv1xyXG4gIHByaXZhdGUgbWFzdGVyQ2FjaGU6IFNtcGxLYm5TdG9yZVtdID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIOWMuuWIhuODnuOCueOCv+WPluW+l1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBmZXRjaEFsbCh1cmw6IHN0cmluZyk6IFByb21pc2U8U21wbEtibkNvZGVUeXBlW10+IHtcclxuICAgIHJldHVybiB0aGlzLmFwaUNvbVNlcnZpY2UuZ2V0PFNtcGxLYm5Db2RlVHlwZVtdPih1cmwpO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaMh+WumuOBl+OBn+ODnuOCueOCv+OBruOCreODo+ODg+OCt+ODpeOBl+OBpuOBhOOCi+ODh+ODvOOCv+OCkuWPluW+l1xyXG4gICAqIEBwYXJhbSBrZXkg44Oe44K544K/44Gu5ZCN5YmNXHJcbiAgICovXHJcbiAgcHVibGljIGdldE1hc3RlckRhdGEoa2V5OiBzdHJpbmcpOiBTbXBsS2JuQ29kZVR5cGVbXSB7XHJcbiAgICBsZXQgY2FjaGUgPSB0aGlzLm1hc3RlckNhY2hlLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgcmV0dXJuIGl0ZW0ubWFzdGVyTmFtZSA9PSBrZXlcclxuICAgIH0pXHJcbiAgICByZXR1cm4gY2FjaGUubGVuZ3RoID4gMCA/IGNhY2hlWzBdLm1hc3RlckNhY2hlIDogW107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg57jgrnjgr/jg4fjg7zjgr/jgpLjgq3jg6Pjg4Pjgrfjg6XjgZnjgotcclxuICAgKiBAcGFyYW0ga2V5IOODnuOCueOCv+OBruWQjeWJjVxyXG4gICAqIEBwYXJhbSBtYXN0ZXJEYXRhIOODnuOCueOCv+ODh+ODvOOCv1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRNYXN0ZXJEYXRhKGtleTogc3RyaW5nLCBtYXN0ZXJEYXRhOiBTbXBsS2JuQ29kZVR5cGVbXSkge1xyXG4gICAgaWYgKHRoaXMubWFzdGVyQ2FjaGUubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMubWFzdGVyQ2FjaGUpIHtcclxuICAgICAgICBpZiAoaXRlbS5tYXN0ZXJOYW1lID09IGtleSkge1xyXG4gICAgICAgICAgaXRlbS5tYXN0ZXJDYWNoZSA9IG1hc3RlckRhdGFcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5tYXN0ZXJDYWNoZSA9IHRoaXMubWFzdGVyQ2FjaGUuY29uY2F0KFt7IG1hc3Rlck5hbWU6IGtleSwgbWFzdGVyQ2FjaGU6IG1hc3RlckRhdGEgfV0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19