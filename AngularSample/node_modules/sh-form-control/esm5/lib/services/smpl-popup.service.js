/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShCtlApiService } from './sh-ctl-api.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./sh-ctl-api.service";
/**
 * 区分マスタの情報を取得
 */
var SmplPopupService = /** @class */ (function () {
    function SmplPopupService(apiComService) {
        this.apiComService = apiComService;
        this.popupCdSubject = new Subject();
        this.popupCdState = this.popupCdSubject.asObservable();
        //汎用マスタ
        this.masterCache = [];
    }
    /**
     * 汎用マスタ取得
     */
    /**
     * 汎用マスタ取得
     * @param {?} url
     * @return {?}
     */
    SmplPopupService.prototype.fetchAll = /**
     * 汎用マスタ取得
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.apiComService.get(url)];
            });
        });
    };
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param key マスタの名前
     */
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    SmplPopupService.prototype.getMasterData = /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var cache = this.masterCache.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item.masterName == key;
        }));
        return cache.length > 0 ? cache[0].masterCache : [];
    };
    /**
     * マスタデータをキャッシュする
     * @param key マスタの名前
     * @param masterData マスタデータ
     */
    /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    SmplPopupService.prototype.setMasterData = /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    function (key, masterData) {
        var e_1, _a;
        if (this.masterCache.length > 0) {
            try {
                for (var _b = tslib_1.__values(this.masterCache), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    if (item.masterName == key) {
                        item.masterCache = masterData;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
    };
    SmplPopupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SmplPopupService.ctorParameters = function () { return [
        { type: ShCtlApiService }
    ]; };
    /** @nocollapse */ SmplPopupService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SmplPopupService_Factory() { return new SmplPopupService(i0.ɵɵinject(i1.ShCtlApiService)); }, token: SmplPopupService, providedIn: "root" });
    return SmplPopupService;
}());
export { SmplPopupService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.popupCdSubject;
    /** @type {?} */
    SmplPopupService.prototype.popupCdState;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.masterCache;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.apiComService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21wbC1wb3B1cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtZm9ybS1jb250cm9sLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NtcGwtcG9wdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQUsvQjtJQU1FLDBCQUNVLGFBQThCO1FBQTlCLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUhoQyxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7UUFDeEMsaUJBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDOztRQU1qRCxnQkFBVyxHQUFVLEVBQUUsQ0FBQztJQUg1QixDQUFDO0lBS0w7O09BRUc7Ozs7OztJQUNVLG1DQUFROzs7OztJQUFyQixVQUFzQixHQUFXOzs7Z0JBQy9CLHNCQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFRLEdBQUcsQ0FBQyxFQUFDOzs7S0FFM0M7SUFFRDs7O09BR0c7Ozs7OztJQUNJLHdDQUFhOzs7OztJQUFwQixVQUFxQixHQUFXOztZQUMxQixLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxJQUFJO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUE7UUFDL0IsQ0FBQyxFQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7O0lBQ0ksd0NBQWE7Ozs7OztJQUFwQixVQUFxQixHQUFXLEVBQUUsVUFBaUI7O1FBQ2pELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDL0IsS0FBaUIsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxXQUFXLENBQUEsZ0JBQUEsNEJBQUU7b0JBQTlCLElBQUksSUFBSSxXQUFBO29CQUNYLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxHQUFHLEVBQUU7d0JBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO3dCQUM3QixNQUFNO3FCQUNQO2lCQUNGOzs7Ozs7Ozs7U0FDRjtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDOztnQkEvQ0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFSUSxlQUFlOzs7MkJBRHhCO0NBdURDLEFBaERELElBZ0RDO1NBN0NZLGdCQUFnQjs7Ozs7O0lBQzNCLDBDQUErQzs7SUFDL0Msd0NBQXlEOzs7OztJQU16RCx1Q0FBZ0M7Ozs7O0lBSjlCLHlDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2hDdGxBcGlTZXJ2aWNlIH0gZnJvbSAnLi9zaC1jdGwtYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICog5Yy65YiG44Oe44K544K/44Gu5oOF5aCx44KS5Y+W5b6XXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTbXBsUG9wdXBTZXJ2aWNlIHtcclxuICBwcml2YXRlIHBvcHVwQ2RTdWJqZWN0ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xyXG4gIHB1YmxpYyBwb3B1cENkU3RhdGUgPSB0aGlzLnBvcHVwQ2RTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBhcGlDb21TZXJ2aWNlOiBTaEN0bEFwaVNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcbiAgLy/msY7nlKjjg57jgrnjgr9cclxuICBwcml2YXRlIG1hc3RlckNhY2hlOiBhbnlbXSA9IFtdO1xyXG5cclxuICAvKipcclxuICAgKiDmsY7nlKjjg57jgrnjgr/lj5blvpdcclxuICAgKi9cclxuICBwdWJsaWMgYXN5bmMgZmV0Y2hBbGwodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYXBpQ29tU2VydmljZS5nZXQ8YW55W10+KHVybCk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5oyH5a6a44GX44Gf44Oe44K544K/44Gu44Kt44Oj44OD44K344Ol44GX44Gm44GE44KL44OH44O844K/44KS5Y+W5b6XXHJcbiAgICogQHBhcmFtIGtleSDjg57jgrnjgr/jga7lkI3liY1cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWFzdGVyRGF0YShrZXk6IHN0cmluZyk6IGFueVtdIHtcclxuICAgIGxldCBjYWNoZSA9IHRoaXMubWFzdGVyQ2FjaGUuZmlsdGVyKGl0ZW0gPT4ge1xyXG4gICAgICByZXR1cm4gaXRlbS5tYXN0ZXJOYW1lID09IGtleVxyXG4gICAgfSlcclxuICAgIHJldHVybiBjYWNoZS5sZW5ndGggPiAwID8gY2FjaGVbMF0ubWFzdGVyQ2FjaGUgOiBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODnuOCueOCv+ODh+ODvOOCv+OCkuOCreODo+ODg+OCt+ODpeOBmeOCi1xyXG4gICAqIEBwYXJhbSBrZXkg44Oe44K544K/44Gu5ZCN5YmNXHJcbiAgICogQHBhcmFtIG1hc3RlckRhdGEg44Oe44K544K/44OH44O844K/XHJcbiAgICovXHJcbiAgcHVibGljIHNldE1hc3RlckRhdGEoa2V5OiBzdHJpbmcsIG1hc3RlckRhdGE6IGFueVtdKSB7XHJcbiAgICBpZiAodGhpcy5tYXN0ZXJDYWNoZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5tYXN0ZXJDYWNoZSkge1xyXG4gICAgICAgIGlmIChpdGVtLm1hc3Rlck5hbWUgPT0ga2V5KSB7XHJcbiAgICAgICAgICBpdGVtLm1hc3RlckNhY2hlID0gbWFzdGVyRGF0YVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm1hc3RlckNhY2hlID0gdGhpcy5tYXN0ZXJDYWNoZS5jb25jYXQoW3sgbWFzdGVyTmFtZToga2V5LCBtYXN0ZXJDYWNoZTogbWFzdGVyRGF0YSB9XSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==