/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
var MaxByteLengthService = /** @class */ (function () {
    function MaxByteLengthService() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    MaxByteLengthService.prototype.generateByteInfo = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var length = 0;
        /** @type {?} */
        var bytes = [];
        if (!value)
            return { length: length, bytes: bytes };
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var c = value.charCodeAt(i);
            if ((c >= 0x0 && c < 0x81) ||
                c === 0xf8f0 ||
                (c >= 0xff61 && c < 0xffa0) ||
                (c >= 0xf8f1 && c < 0xf8f4)) {
                length += 1;
                bytes.push(1);
            }
            else {
                length += 2;
                bytes.push(2);
            }
        }
        return { length: length, bytes: bytes };
    };
    /**
     * @param {?} bytes
     * @param {?} maxBytelength
     * @param {?=} total
     * @return {?}
     */
    MaxByteLengthService.prototype.calcMaxLength = /**
     * @param {?} bytes
     * @param {?} maxBytelength
     * @param {?=} total
     * @return {?}
     */
    function (bytes, maxBytelength, total) {
        if (total === void 0) { total = 0; }
        /** @type {?} */
        var i;
        for (i = 0; i < bytes.length; i++) {
            total += bytes[i];
            if (total >= maxBytelength) {
                break;
            }
        }
        return (total - maxBytelength) > 0 ? i : i + 1;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    MaxByteLengthService.isAllowOperation = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.ctrlKey && MaxByteLengthService.isAllowWithCtlKey(e.key))
            return true;
        if (e.shiftKey && MaxByteLengthService.isAllowWithShiftKey(e.key))
            return true;
        if (MaxByteLengthService.isAllowCodes(e.code))
            return true;
        if (MaxByteLengthService.isAllowKey(e.key))
            return true;
        return false;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    MaxByteLengthService.isAllowKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (MaxByteLengthService.allowKeys.includes(key))
            return true;
        return false;
    };
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    MaxByteLengthService.isAllowCodes = /**
     * @private
     * @param {?} code
     * @return {?}
     */
    function (code) {
        if (MaxByteLengthService.allowCodes.includes(code))
            return true;
        return false;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    MaxByteLengthService.isAllowWithCtlKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (MaxByteLengthService.allowWithCtlKey.includes(key))
            return true;
        return false;
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    MaxByteLengthService.isAllowWithShiftKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (MaxByteLengthService.allowWithShiftKey.includes(key))
            return true;
        return false;
    };
    MaxByteLengthService.allowKeys = ["ArrowRight", "ArrowLeft", "Backspace", "ArrowDown", "ArrowUp"];
    MaxByteLengthService.allowCodes = ["Enter", "Tab"];
    MaxByteLengthService.allowWithCtlKey = ["a", "Home", "End"];
    MaxByteLengthService.allowWithShiftKey = ["Home", "End"];
    MaxByteLengthService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */
    MaxByteLengthService.ctorParameters = function () { return []; };
    /** @nocollapse */ MaxByteLengthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MaxByteLengthService_Factory() { return new MaxByteLengthService(); }, token: MaxByteLengthService, providedIn: "root" });
    return MaxByteLengthService;
}());
export { MaxByteLengthService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowKeys;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowCodes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithCtlKey;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithShiftKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LWJ5dGVsZW5ndGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tYXgtYnl0ZWxlbmd0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQztJQVFFO0lBQWUsQ0FBQzs7Ozs7SUFFVCwrQ0FBZ0I7Ozs7SUFBdkIsVUFBd0IsS0FBYTs7WUFDL0IsTUFBTSxHQUFHLENBQUM7O1lBQ1YsS0FBSyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sRUFBRSxNQUFNLFFBQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDakMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNCLElBQ0UsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLENBQUMsS0FBSyxNQUFNO2dCQUNaLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUMzQixDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUMzQjtnQkFDQSxNQUFNLElBQUksQ0FBQyxDQUFDO2dCQUNaLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxNQUFNLElBQUksQ0FBQyxDQUFDO2dCQUNaLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDZjtTQUNGO1FBQ0QsT0FBTyxFQUFFLE1BQU0sUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7SUFD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cmVcIjtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiBgcm9vdGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNYXhCeXRlTGVuZ3RoU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYWxsb3dLZXlzOiBzdHJpbmdbXSA9IFtcIkFycm93UmlnaHRcIiwgXCJBcnJvd0xlZnRcIiwgXCJCYWNrc3BhY2VcIiwgXCJBcnJvd0Rvd25cIiwgXCJBcnJvd1VwXCJdO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsbG93Q29kZXM6IHN0cmluZ1tdID0gW1wiRW50ZXJcIiwgXCJUYWJcIl07XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYWxsb3dXaXRoQ3RsS2V5OiBzdHJpbmdbXSA9IFtcImFcIiwgXCJIb21lXCIsIFwiRW5kXCJdO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsbG93V2l0aFNoaWZ0S2V5OiBzdHJpbmdbXSA9IFtcIkhvbWVcIiwgXCJFbmRcIl07XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBwdWJsaWMgZ2VuZXJhdGVCeXRlSW5mbyh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gMDtcclxuICAgIGxldCBieXRlcyA9IFtdO1xyXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHsgbGVuZ3RoLCBieXRlcyB9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoYyA+PSAweDAgJiYgYyA8IDB4ODEpIHx8XHJcbiAgICAgICAgYyA9PT0gMHhmOGYwIHx8XHJcbiAgICAgICAgKGMgPj0gMHhmZjYxICYmIGMgPCAweGZmYTApIHx8XHJcbiAgICAgICAgKGMgPj0gMHhmOGYxICYmIGMgPCAweGY4ZjQpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxlbmd0aCArPSAxO1xyXG4gICAgICAgIGJ5dGVzLnB1c2goMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGVuZ3RoICs9IDI7XHJcbiAgICAgICAgYnl0ZXMucHVzaCgyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgbGVuZ3RoLCBieXRlcyB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbGNNYXhMZW5ndGgoYnl0ZXM6IG51bWJlcltdLCBtYXhCeXRlbGVuZ3RoOiBudW1iZXIsIHRvdGFsOiBudW1iZXIgPSAwKSB7XHJcbiAgICBsZXQgaTogbnVtYmVyO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRvdGFsICs9IGJ5dGVzW2ldO1xyXG4gICAgICBpZiAodG90YWwgPj0gbWF4Qnl0ZWxlbmd0aCkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKHRvdGFsIC0gbWF4Qnl0ZWxlbmd0aCkgPiAwID8gaSA6IGkgKyAxO1xyXG4gIH1cclxuICBwdWJsaWMgc3RhdGljIGlzQWxsb3dPcGVyYXRpb24oZTogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgaWYgKGUuY3RybEtleSAmJiBNYXhCeXRlTGVuZ3RoU2VydmljZS5pc0FsbG93V2l0aEN0bEtleShlLmtleSkpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuaXNBbGxvd1dpdGhTaGlmdEtleShlLmtleSkpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmlzQWxsb3dDb2RlcyhlLmNvZGUpKSByZXR1cm4gdHJ1ZTtcclxuICAgIGlmKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmlzQWxsb3dLZXkoZS5rZXkpKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBpc0FsbG93S2V5KGtleTogc3RyaW5nKSB7XHJcbiAgICBpZiAoTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuYWxsb3dLZXlzLmluY2x1ZGVzKGtleSkpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBwcml2YXRlIHN0YXRpYyBpc0FsbG93Q29kZXMoY29kZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuYWxsb3dDb2Rlcy5pbmNsdWRlcyhjb2RlKSkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHByaXZhdGUgc3RhdGljIGlzQWxsb3dXaXRoQ3RsS2V5KGtleTogc3RyaW5nKSB7XHJcbiAgICBpZiAoTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuYWxsb3dXaXRoQ3RsS2V5LmluY2x1ZGVzKGtleSkpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBwcml2YXRlIHN0YXRpYyBpc0FsbG93V2l0aFNoaWZ0S2V5KGtleTogc3RyaW5nKSB7XHJcbiAgICBpZiAoTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuYWxsb3dXaXRoU2hpZnRLZXkuaW5jbHVkZXMoa2V5KSkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==