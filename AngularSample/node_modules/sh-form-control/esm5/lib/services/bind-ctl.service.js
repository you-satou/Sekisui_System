/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ShCtlConst } from "../constShCtl";
import { NoChangeFlg } from '../types/NoChangeFlg';
import * as i0 from "@angular/core";
var BindCtlService = /** @class */ (function () {
    function BindCtlService() {
        this.NO_CHANGE_FLG_SUFFIX = ShCtlConst.NO_CHANGE.FLG_SUFFIX;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    BindCtlService.prototype.setNoChangeFlg = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        var info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var targetInput = (/** @type {?} */ (document.querySelector("input[name=" + data.ctlName + "_" + _this.NO_CHANGE_FLG_SUFFIX + "],textarea[name=" + data.ctlName + "_" + _this.NO_CHANGE_FLG_SUFFIX + "]")));
            if (!targetInput)
                return;
            targetInput.value = NoChangeFlg.ON;
            targetInput.dispatchEvent(new Event("change"));
        }));
    };
    /**
     * @param {?} param
     * @return {?}
     */
    BindCtlService.prototype.setBindValue = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        var info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var targetInput = (/** @type {?} */ (document.querySelector("input[name=" + data.ctlName + "],textarea[name=" + data.ctlName + "]")));
            if (!targetInput)
                return;
            targetInput.value = data.value;
            targetInput.dispatchEvent(new Event("change"));
        }));
    };
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    BindCtlService.prototype.generateBindInputInfo = /**
     * @private
     * @param {?} param
     * @return {?}
     */
    function (param) {
        return param.bindColumnArray.map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var column = Number(Object.values(data)[0]);
            return {
                ctlName: Object.keys(data)[0],
                value: isNaN(Number(column)) ? "" : (/** @type {?} */ (Object.values(param.record)[column - 1])),
            };
        }));
    };
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    BindCtlService.prototype.isParamEmpty = /**
     * @private
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (!param.bindColumnArray || param.bindColumnArray.length == 0)
            return true;
        if (!param.record)
            return true;
        return false;
    };
    BindCtlService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */
    BindCtlService.ctorParameters = function () { return []; };
    /** @nocollapse */ BindCtlService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BindCtlService_Factory() { return new BindCtlService(); }, token: BindCtlService, providedIn: "root" });
    return BindCtlService;
}());
export { BindCtlService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BindCtlService.prototype.NO_CHANGE_FLG_SUFFIX;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC1jdGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9iaW5kLWN0bC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFBOztBQU9sRDtJQU9FO1FBRmlCLHlCQUFvQixHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBRXpELENBQUM7Ozs7O0lBRVQsdUNBQWM7Ozs7SUFBckIsVUFBc0IsS0FBWTtRQUFsQyxpQkFXQztRQVZDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPOztZQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsSUFBSTs7Z0JBQ1YsV0FBVyxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxhQUFhLENBQ3hDLGdCQUFjLElBQUksQ0FBQyxPQUFPLFNBQUksS0FBSSxDQUFDLG9CQUFvQix3QkFBbUIsSUFBSSxDQUFDLE9BQU8sU0FBSSxLQUFJLENBQUMsb0JBQW9CLE1BQUcsQ0FDdkgsRUFBb0I7WUFDckIsSUFBRyxDQUFDLFdBQVc7Z0JBQUUsT0FBTztZQUN4QixXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDbkMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxxQ0FBWTs7OztJQUFuQixVQUFvQixLQUFZO1FBQzlCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPOztZQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsSUFBSTs7Z0JBQ1IsV0FBVyxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxhQUFhLENBQ3hDLGdCQUFjLElBQUksQ0FBQyxPQUFPLHdCQUFtQixJQUFJLENBQUMsT0FBTyxNQUFHLENBQzdELEVBQW9CO1lBQ3JCLElBQUcsQ0FBQyxXQUFXO2dCQUFFLE9BQU87WUFDeEIsV0FBVyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQy9CLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7OztJQUVPLDhDQUFxQjs7Ozs7SUFBN0IsVUFDRSxLQUFZO1FBRVosT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLElBQUk7O2dCQUM5QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsT0FBTztnQkFDTCxPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFVO2FBQ3RGLENBQUM7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVPLHFDQUFZOzs7OztJQUFwQixVQUFxQixLQUFZO1FBQy9CLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDN0QsT0FBTyxJQUFJLENBQUM7UUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUMvQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQXBERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozt5QkFYRDtDQThEQyxBQXJERCxJQXFEQztTQWxEWSxjQUFjOzs7Ozs7SUFFekIsOENBQXdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IFNoQ3RsQ29uc3QgfSBmcm9tIFwiLi4vY29uc3RTaEN0bFwiO1xyXG5pbXBvcnQgeyBOb0NoYW5nZUZsZyB9IGZyb20gJy4uL3R5cGVzL05vQ2hhbmdlRmxnJ1xyXG5cclxudHlwZSBQYXJhbSA9IHtcclxuICBiaW5kQ29sdW1uQXJyYXk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1bXTtcclxuICByZWNvcmQ6IGFueTtcclxufTtcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiBgcm9vdGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBCaW5kQ3RsU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgTk9fQ0hBTkdFX0ZMR19TVUZGSVggPSBTaEN0bENvbnN0Lk5PX0NIQU5HRS5GTEdfU1VGRklYO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIHB1YmxpYyBzZXROb0NoYW5nZUZsZyhwYXJhbTogUGFyYW0pIHtcclxuICAgIGlmICh0aGlzLmlzUGFyYW1FbXB0eShwYXJhbSkpIHJldHVybjtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLmdlbmVyYXRlQmluZElucHV0SW5mbyhwYXJhbSk7XHJcbiAgICBpbmZvLmZvckVhY2goKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGBpbnB1dFtuYW1lPSR7ZGF0YS5jdGxOYW1lfV8ke3RoaXMuTk9fQ0hBTkdFX0ZMR19TVUZGSVh9XSx0ZXh0YXJlYVtuYW1lPSR7ZGF0YS5jdGxOYW1lfV8ke3RoaXMuTk9fQ0hBTkdFX0ZMR19TVUZGSVh9XWBcclxuICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICBpZighdGFyZ2V0SW5wdXQpIHJldHVybjtcclxuICAgICAgdGFyZ2V0SW5wdXQudmFsdWUgPSBOb0NoYW5nZUZsZy5PTjtcclxuICAgICAgdGFyZ2V0SW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoYGNoYW5nZWApKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldEJpbmRWYWx1ZShwYXJhbTogUGFyYW0pIHtcclxuICAgIGlmICh0aGlzLmlzUGFyYW1FbXB0eShwYXJhbSkpIHJldHVybjtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLmdlbmVyYXRlQmluZElucHV0SW5mbyhwYXJhbSk7XHJcbiAgICBpbmZvLmZvckVhY2goKGRhdGEpID0+IHtcclxuICAgICAgICBjb25zdCB0YXJnZXRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICBgaW5wdXRbbmFtZT0ke2RhdGEuY3RsTmFtZX1dLHRleHRhcmVhW25hbWU9JHtkYXRhLmN0bE5hbWV9XWBcclxuICAgICAgICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgaWYoIXRhcmdldElucHV0KSByZXR1cm47XHJcbiAgICAgICAgdGFyZ2V0SW5wdXQudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgIHRhcmdldElucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KGBjaGFuZ2VgKSk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZUJpbmRJbnB1dEluZm8oXHJcbiAgICBwYXJhbTogUGFyYW1cclxuICApOiB7IGN0bE5hbWU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W10ge1xyXG4gICAgcmV0dXJuIHBhcmFtLmJpbmRDb2x1bW5BcnJheS5tYXAoKGRhdGEpID0+IHtcclxuICAgICAgY29uc3QgY29sdW1uID0gTnVtYmVyKE9iamVjdC52YWx1ZXMoZGF0YSlbMF0pO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGN0bE5hbWU6IE9iamVjdC5rZXlzKGRhdGEpWzBdLFxyXG4gICAgICAgIHZhbHVlOiBpc05hTihOdW1iZXIoY29sdW1uKSkgPyBgYCA6IE9iamVjdC52YWx1ZXMocGFyYW0ucmVjb3JkKVtjb2x1bW4gLSAxXSBhcyBzdHJpbmcsXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNQYXJhbUVtcHR5KHBhcmFtOiBQYXJhbSkge1xyXG4gICAgaWYgKCFwYXJhbS5iaW5kQ29sdW1uQXJyYXkgfHwgcGFyYW0uYmluZENvbHVtbkFycmF5Lmxlbmd0aCA9PSAwKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmICghcGFyYW0ucmVjb3JkKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIl19