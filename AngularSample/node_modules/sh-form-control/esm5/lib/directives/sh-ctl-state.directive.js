/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
var ShCtlStateDirective = /** @class */ (function () {
    function ShCtlStateDirective(el) {
        this.el = el;
        this.state = "";
        this.onlyField = false;
    }
    /**
     * @return {?}
     */
    ShCtlStateDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.addShCtlStateClass();
    };
    /**
     * @return {?}
     */
    ShCtlStateDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.addShCtlStateClass();
    };
    /**
     * @return {?}
     */
    ShCtlStateDirective.prototype.addShCtlStateClass = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var qs = this.el.nativeElement.querySelectorAll('mat-form-field');
        try {
            for (var qs_1 = tslib_1.__values(qs), qs_1_1 = qs_1.next(); !qs_1_1.done; qs_1_1 = qs_1.next()) {
                var e = qs_1_1.value;
                /** @type {?} */
                var classList = (e) ? e.className.split(' ') : [];
                classList.forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    if (className.startsWith("sh-ctl-state-"))
                        e.classList.remove(className);
                }));
                e.classList.add("sh-ctl-state-" + this.state);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (qs_1_1 && !qs_1_1.done && (_a = qs_1.return)) _a.call(qs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.onlyField) {
            /** @type {?} */
            var qsOnlyField = this.el.nativeElement.querySelectorAll('.only-field');
            try {
                for (var qsOnlyField_1 = tslib_1.__values(qsOnlyField), qsOnlyField_1_1 = qsOnlyField_1.next(); !qsOnlyField_1_1.done; qsOnlyField_1_1 = qsOnlyField_1.next()) {
                    var e = qsOnlyField_1_1.value;
                    /** @type {?} */
                    var classList = (e) ? e.className.split(' ') : [];
                    classList.forEach((/**
                     * @param {?} className
                     * @return {?}
                     */
                    function (className) {
                        if (className.startsWith("only-field-")) {
                            e.classList.remove(className);
                        }
                    }));
                    e.classList.add("only-field-" + this.state);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (qsOnlyField_1_1 && !qsOnlyField_1_1.done && (_b = qsOnlyField_1.return)) _b.call(qsOnlyField_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        qs = this.el.nativeElement.querySelectorAll('span,label');
        try {
            for (var qs_2 = tslib_1.__values(qs), qs_2_1 = qs_2.next(); !qs_2_1.done; qs_2_1 = qs_2.next()) {
                var e = qs_2_1.value;
                /** @type {?} */
                var classList = (e) ? e.className.split(' ') : [];
                classList.forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) {
                    if (className.startsWith("sh-ctl-state-"))
                        e.classList.remove(className);
                }));
                e.classList.add("sh-ctl-state-" + this.state + "-message");
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (qs_2_1 && !qs_2_1.done && (_c = qs_2.return)) _c.call(qs_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    ShCtlStateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[state]'
                },] }
    ];
    /** @nocollapse */
    ShCtlStateDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ShCtlStateDirective.propDecorators = {
        state: [{ type: Input, args: ['state',] }],
        onlyField: [{ type: Input }]
    };
    return ShCtlStateDirective;
}());
export { ShCtlStateDirective };
if (false) {
    /** @type {?} */
    ShCtlStateDirective.prototype.state;
    /** @type {?} */
    ShCtlStateDirective.prototype.onlyField;
    /**
     * @type {?}
     * @private
     */
    ShCtlStateDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY3RsLXN0YXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NoLWN0bC1zdGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFFeEU7SUFLRSw2QkFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFFbEIsVUFBSyxHQUFXLEVBQUUsQ0FBQztRQUMxQixjQUFTLEdBQVksS0FBSyxDQUFDO0lBSEUsQ0FBQzs7OztJQUt2Qyw2Q0FBZTs7O0lBQWY7UUFDRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELGdEQUFrQjs7O0lBQWxCOzs7WUFDTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7O1lBQ2pFLEtBQWMsSUFBQSxPQUFBLGlCQUFBLEVBQUUsQ0FBQSxzQkFBQSxzQ0FBRTtnQkFBYixJQUFJLENBQUMsZUFBQTs7b0JBQ0osU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNqRCxTQUFTLENBQUMsT0FBTzs7OztnQkFBQyxVQUFBLFNBQVM7b0JBQ3pCLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUM7d0JBQ3ZDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLEVBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9DOzs7Ozs7Ozs7UUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7O2dCQUNkLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7O2dCQUN2RSxLQUFjLElBQUEsZ0JBQUEsaUJBQUEsV0FBVyxDQUFBLHdDQUFBLGlFQUFFO29CQUF0QixJQUFJLENBQUMsd0JBQUE7O3dCQUNKLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDakQsU0FBUyxDQUFDLE9BQU87Ozs7b0JBQUMsVUFBQSxTQUFTO3dCQUN6QixJQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUM7NEJBQ3JDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3lCQUMvQjtvQkFDSCxDQUFDLEVBQUMsQ0FBQztvQkFDSCxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3Qzs7Ozs7Ozs7O1NBQ0Y7UUFFRCxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7O1lBQzFELEtBQWMsSUFBQSxPQUFBLGlCQUFBLEVBQUUsQ0FBQSxzQkFBQSxzQ0FBRTtnQkFBYixJQUFJLENBQUMsZUFBQTs7b0JBQ0osU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNqRCxTQUFTLENBQUMsT0FBTzs7OztnQkFBQyxVQUFBLFNBQVM7b0JBQ3pCLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUM7d0JBQ3ZDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLEVBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQzthQUM1RDs7Ozs7Ozs7O0lBQ0gsQ0FBQzs7Z0JBbkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsU0FBUztpQkFDcEI7Ozs7Z0JBSm1CLFVBQVU7Ozt3QkFTM0IsS0FBSyxTQUFDLE9BQU87NEJBQ2IsS0FBSzs7SUE2Q1IsMEJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQWxEWSxtQkFBbUI7OztJQUk5QixvQ0FBbUM7O0lBQ25DLHdDQUFvQzs7Ozs7SUFIeEIsaUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzdGF0ZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaEN0bFN0YXRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIEBJbnB1dCgnc3RhdGUnKSBzdGF0ZTogc3RyaW5nID0gXCJcIjtcclxuICBASW5wdXQoKSBvbmx5RmllbGQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5hZGRTaEN0bFN0YXRlQ2xhc3MoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgdGhpcy5hZGRTaEN0bFN0YXRlQ2xhc3MoKTtcclxuICB9XHJcblxyXG4gIGFkZFNoQ3RsU3RhdGVDbGFzcygpIHtcclxuICAgIGxldCBxcyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdtYXQtZm9ybS1maWVsZCcpO1xyXG4gICAgZm9yICh2YXIgZSBvZiBxcykge1xyXG4gICAgICBsZXQgY2xhc3NMaXN0ID0gKGUpID8gZS5jbGFzc05hbWUuc3BsaXQoJyAnKSA6IFtdO1xyXG4gICAgICBjbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xyXG4gICAgICAgIGlmIChjbGFzc05hbWUuc3RhcnRzV2l0aChcInNoLWN0bC1zdGF0ZS1cIikpXHJcbiAgICAgICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGUuY2xhc3NMaXN0LmFkZChcInNoLWN0bC1zdGF0ZS1cIiArIHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9ubHlGaWVsZCkge1xyXG4gICAgICBsZXQgcXNPbmx5RmllbGQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm9ubHktZmllbGQnKTtcclxuICAgICAgZm9yICh2YXIgZSBvZiBxc09ubHlGaWVsZCkge1xyXG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSAoZSkgPyBlLmNsYXNzTmFtZS5zcGxpdCgnICcpIDogW107XHJcbiAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NOYW1lID0+IHtcclxuICAgICAgICAgIGlmKGNsYXNzTmFtZS5zdGFydHNXaXRoKFwib25seS1maWVsZC1cIikpe1xyXG4gICAgICAgICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBlLmNsYXNzTGlzdC5hZGQoXCJvbmx5LWZpZWxkLVwiICsgdGhpcy5zdGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBxcyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLGxhYmVsJyk7XHJcbiAgICBmb3IgKHZhciBlIG9mIHFzKSB7XHJcbiAgICAgIGxldCBjbGFzc0xpc3QgPSAoZSkgPyBlLmNsYXNzTmFtZS5zcGxpdCgnICcpIDogW107XHJcbiAgICAgIGNsYXNzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XHJcbiAgICAgICAgaWYgKGNsYXNzTmFtZS5zdGFydHNXaXRoKFwic2gtY3RsLXN0YXRlLVwiKSlcclxuICAgICAgICAgIGUuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgZS5jbGFzc0xpc3QuYWRkKFwic2gtY3RsLXN0YXRlLVwiICsgdGhpcy5zdGF0ZSArIFwiLW1lc3NhZ2VcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=