(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common'), require('@angular/material'), require('sh-http-client'), require('rxjs'), require('@angular/cdk/collections'), require('@angular/material-moment-adapter'), require('@angular/material/core'), require('moment')) :
    typeof define === 'function' && define.amd ? define('sh-form-control', ['exports', '@angular/core', '@angular/forms', '@angular/common', '@angular/material', 'sh-http-client', 'rxjs', '@angular/cdk/collections', '@angular/material-moment-adapter', '@angular/material/core', 'moment'], factory) :
    (global = global || self, factory(global['sh-form-control'] = {}, global.ng.core, global.ng.forms, global.ng.common, global.ng.material, global.shHttpClient, global.rxjs, global.ng.cdk.collections, global.ng['material-moment-adapter'], global.ng.material.core, global._moment));
}(this, (function (exports, core, forms, common, material, shHttpClient, rxjs, collections, materialMomentAdapter, core$1, _moment) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlCommon = /** @class */ (function () {
        function SHCtlCommon() {
        }
        /**
         * 指定したフォーマットでDateをstringに変換
         * @param date
         * @param format
         */
        /**
         * 指定したフォーマットでDateをstringに変換
         * @param {?} date
         * @param {?} format
         * @return {?}
         */
        SHCtlCommon.getDateStr = /**
         * 指定したフォーマットでDateをstringに変換
         * @param {?} date
         * @param {?} format
         * @return {?}
         */
        function (date, format) {
            format = format.replace(/YYYY/g, date.getFullYear().toString());
            format = format.replace(/MM/g, ('0' + (date.getMonth() + 1).toString()).slice(-2).toString());
            format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2).toString());
            return format;
        };
        /**
         * 中身が空かどうかの判定
         * @param obj
         */
        /**
         * 中身が空かどうかの判定
         * @param {?} obj
         * @return {?}
         */
        SHCtlCommon.isBlank = /**
         * 中身が空かどうかの判定
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (obj === undefined)
                return true;
            if (obj === null)
                return true;
            if (typeof (obj) === "string" && obj === "")
                return true;
            if (typeof (obj) === "object" && (obj.length !== undefined && obj.length <= 0))
                return true;
            return false;
        };
        /**
         * 指定された値または0でパディングする
         * @param num パディング対象値
         * @param length　値の長さ
         * @param option 何でパディングしたいか
         */
        /**
         * 指定された値または0でパディングする
         * @param {?} num パディング対象値
         * @param {?} length 　値の長さ
         * @param {?=} option 何でパディングしたいか
         * @return {?}
         */
        SHCtlCommon.padding = /**
         * 指定された値または0でパディングする
         * @param {?} num パディング対象値
         * @param {?} length 　値の長さ
         * @param {?=} option 何でパディングしたいか
         * @return {?}
         */
        function (num, length, option) {
            //指定がなければ0
            option = option || "0";
            //数値型に変換
            num = Number(num);
            //数値でなければnullを返す
            if (isNaN(num))
                return null;
            return (Array(length).join(option) + num).slice(-length);
        };
        /**
         * 改行の削除
         * @param str　改行削除したい文字列
         */
        /**
         * 改行の削除
         * @param {?} str 　改行削除したい文字列
         * @return {?}
         */
        SHCtlCommon.LineBreak = /**
         * 改行の削除
         * @param {?} str 　改行削除したい文字列
         * @return {?}
         */
        function (str) {
            /** @type {?} */
            var tmp = str.replace(/\r?\n/g, "");
            return tmp;
        };
        /*********************************************************
         * 新:入力チェック
         * ********************************************************/
        /**
         * 全角入力チェック
         * @param event inputイベント
         */
        /*********************************************************
           * 新:入力チェック
           * ********************************************************/
        /**
         * 全角入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceFullWidth = /*********************************************************
           * 新:入力チェック
           * ********************************************************/
        /**
         * 全角入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, '');
        };
        /**
         * 半角入力チェック
         * @param event inputイベント
         */
        /**
         * 半角入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceHalfChar = /**
         * 半角入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.match(/[ -~｡-ﾟ]+/g);
        };
        /**
        * 数値入力チェック
        * @param event inputイベント
        */
        /**
         * 数値入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceNumeric = /**
         * 数値入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/\d*/g, "");
        };
        /**
         * スペース入力チェック(半角)
         * @param event inputイベント
         */
        /**
         * スペース入力チェック(半角)
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceSpace = /**
         * スペース入力チェック(半角)
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/ /g, "");
        };
        /**
         * スペース入力チェック(半角)→(全角)
         * @param event inputイベント
         */
        /**
         * スペース入力チェック(半角)→(全角)
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceHalfSpaceToFull = /**
         * スペース入力チェック(半角)→(全角)
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/ /g, "　");
        };
        /**
         * スペース入力チェック(全角)
         * @param event inputイベント
         */
        /**
         * スペース入力チェック(全角)
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceFUllSpace = /**
         * スペース入力チェック(全角)
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/　/g, "");
        };
        /**
        * アルファベット入力チェック
        * @param event inputイベント
        */
        /**
         * アルファベット入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceHalfWidth = /**
         * アルファベット入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(/[a-zA-Z]/g, "");
        };
        /**
        * 記号入力チェック
        * @param event inputイベント
        * @param exclusionValue 入力を許容したい記号の配列
        */
        /**
         * 記号入力チェック
         * @param {?} event inputイベント
         * @param {?=} exclusionValue 入力を許容したい記号の配列
         * @return {?}
         */
        SHCtlCommon.replaceSign = /**
         * 記号入力チェック
         * @param {?} event inputイベント
         * @param {?=} exclusionValue 入力を許容したい記号の配列
         * @return {?}
         */
        function (event, exclusionValue) {
            if (!event)
                return;
            event.target.value = event.target.value.replace(new RegExp(SHCtlCommon.getRestrictedSign(exclusionValue), "g"), "");
        };
        /**
         * 全角ダブルクォーテーション入力チェック
         * @param event inputイベント
         */
        /**
         * 全角ダブルクォーテーション入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceFullDoubleQuote = /**
         * 全角ダブルクォーテーション入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace("”", "＂");
        };
        /**
         * 半角ダブルクォーテーション入力チェック
         * @param event inputイベント
         */
        /**
         * 半角ダブルクォーテーション入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlCommon.replaceHalfDoubleQuote = /**
         * 半角ダブルクォーテーション入力チェック
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!event)
                return;
            event.target.value = event.target.value.replace("\"", "ﾞ");
        };
        /**
         * フォーマット設定
         * @param inputTargetValue event.target.value
         */
        /**
         * フォーマット設定
         * @param {?} event
         * @return {?}
         */
        SHCtlCommon.replaceHalf = /**
         * フォーマット設定
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.replace(/[A-Za-z0-9-!"#$%&'()=<>,.?_\[\]|{}@`^~\\/+;*:}]/g, (/**
             * @param {?} inputTargetValue
             * @return {?}
             */
            function (inputTargetValue) {
                return String.fromCharCode(inputTargetValue.charCodeAt(0) + 65248);
            }));
            return event.target.value;
        };
        /**
         * フォーマット設定
         * @param inputTargetValue event.target.value
         */
        /**
         * フォーマット設定
         * @param {?} event
         * @return {?}
         */
        SHCtlCommon.replaceHalfKana = /**
         * フォーマット設定
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var kanaMap = {
                'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
                'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
                'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
                'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
                'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
                'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
                'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
                'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
                'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
                'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
                'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
                'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
                'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
                'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
                'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
                'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
                'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
                'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ'
            };
            /** @type {?} */
            var reg = new RegExp('[' + Object.keys(kanaMap) + ']', 'g');
            return event.target.value = event.target.value.replace(reg, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                return kanaMap[match];
            }));
        };
        /**
         * input値の入力文字数制限
         * @param event inputイベント
         * @param maxlength 入力制限文字数
         */
        /**
         * input値の入力文字数制限
         * @param {?} event inputイベント
         * @param {?} maxlength 入力制限文字数
         * @return {?}
         */
        SHCtlCommon.sliceLength = /**
         * input値の入力文字数制限
         * @param {?} event inputイベント
         * @param {?} maxlength 入力制限文字数
         * @return {?}
         */
        function (event, maxlength) {
            if (!event)
                return;
            event.target.value = event.target.value.slice(0, maxlength);
        };
        /**
         * 入力制限記号の取得
         * @param exclusionValue 入力可能文字の配列
         */
        /**
         * 入力制限記号の取得
         * @private
         * @param {?} exclusionValue 入力可能文字の配列
         * @return {?}
         */
        SHCtlCommon.getRestrictedSign = /**
         * 入力制限記号の取得
         * @private
         * @param {?} exclusionValue 入力可能文字の配列
         * @return {?}
         */
        function (exclusionValue) {
            if (exclusionValue === undefined || exclusionValue.length === 0)
                return SHCtlCommon.exclude();
            return SHCtlCommon.exclude(exclusionValue);
        };
        /**
         * itemが条件に適しているならtrueを返す
         * @param item
         */
        /**
         * itemが条件に適しているならtrueを返す
         * @param {?} item
         * @return {?}
         */
        SHCtlCommon.needsEscape = /**
         * itemが条件に適しているならtrueを返す
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item === "." || item === "*" || item === "-" || item === "+" || item === "[" || item === "]")
                return true;
        };
        /**
         * itemの前にダブルバックスラッシュ付与する
         * @param item
         */
        /**
         * itemの前にダブルバックスラッシュ付与する
         * @param {?} item
         * @return {?}
         */
        SHCtlCommon.escapeByBackSlash = /**
         * itemの前にダブルバックスラッシュ付与する
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var escapedValue = "\\" + item;
            return escapedValue;
        };
        /**
         * 入力不可対象の記号から指定した文字列を除外する
         * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
         * @param exclusionValue 入力可能文字の配列
         */
        /**
         * 入力不可対象の記号から指定した文字列を除外する
         * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
         * @private
         * @param {?=} exclusionValue 入力可能文字の配列
         * @return {?}
         */
        SHCtlCommon.exclude = /**
         * 入力不可対象の記号から指定した文字列を除外する
         * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
         * @private
         * @param {?=} exclusionValue 入力可能文字の配列
         * @return {?}
         */
        function (exclusionValue) {
            var _this = this;
            /** @type {?} */
            var excludeIndex = null;
            /** @type {?} */
            var signsList = this.signs.split("");
            signsList.map((/**
             * @param {?} item
             * @param {?} index
             * @param {?} array
             * @return {?}
             */
            function (item, index, array) {
                if (exclusionValue !== undefined)
                    excludeIndex = exclusionValue.indexOf(item);
                if (excludeIndex !== -1 && excludeIndex !== null)
                    array[index] = "";
                if (array[index] !== "" && index !== 0 && index !== signsList.length - 1) {
                    if (_this.needsEscape(item))
                        array[index] = _this.escapeByBackSlash(item);
                }
            }));
            return signsList.join("");
        };
        /**
         * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
         * カスタムコントロール1つに対し1つ持つ
        */
        /**
         * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
         * カスタムコントロール1つに対し1つ持つ
         * @return {?}
         */
        SHCtlCommon.getUniqueStr = /**
         * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
         * カスタムコントロール1つに対し1つ持つ
         * @return {?}
         */
        function () {
            return "uk-" + Math.random().toString(36).slice(-8);
        };
        /**
        * 従業員コードの変換(6桁→8桁)
        * @param s コード文字列
        * @return 変換後のコード文字列
        */
        /**
         * 従業員コードの変換(6桁→8桁)
         * @param {?} s コード文字列
         * @return {?} 変換後のコード文字列
         */
        SHCtlCommon.convJyuCode6To8 = /**
         * 従業員コードの変換(6桁→8桁)
         * @param {?} s コード文字列
         * @return {?} 変換後のコード文字列
         */
        function (s) {
            // ブランクなら
            if (this.isBlank(s))
                return '';
            // 6桁以外処理しない
            if (s.trim().length != 6 && !isNaN(parseInt(s.toString())))
                return s;
            /** @type {?} */
            var sJyuCode = s;
            /** @type {?} */
            var result = '00';
            if (((sJyuCode == '922222') || (sJyuCode == '933333') ||
                (sJyuCode == '944444') || (sJyuCode == '955555') ||
                (sJyuCode == '966666') || (sJyuCode == '977777') ||
                (sJyuCode == '988888')) || ((sJyuCode >= '999000') && (sJyuCode <= '999999'))) {
                result = '99' + sJyuCode;
            }
            else {
                /** @type {?} */
                var strCd = sJyuCode.substr(0, 1).toUpperCase();
                sJyuCode = sJyuCode.replace(/[c|k|s]/g, '');
                if (strCd == 'C' || strCd == 'S') {
                    //左1文字　[C]か[S]のとき
                    /** @type {?} */
                    var subNumber = sJyuCode.substr(2, 2);
                    //左に文字目から自分含め２文字目が　
                    if (Number(subNumber) >= 0 && Number(subNumber) <= 49) {
                        //>= 0 および　 <=49 の場合
                        result = '20' + sJyuCode;
                    }
                    else {
                        //>= 0 および　 <=49 でない場合
                        result = '19' + sJyuCode;
                    }
                }
                else if (strCd == 'K') {
                    //左1文字　[C]か[S]のときでなく[K]の場合
                    result = '00' + sJyuCode;
                }
                else {
                    //左1文字　上記以外
                    /** @type {?} */
                    var rStr = sJyuCode.substr(-2, 2);
                    //左２文字が
                    if (Number(rStr) >= 0 && Number(rStr) <= 43) {
                        //     >= 0 及び　<= 43 の場合
                        result = '20' + sJyuCode;
                    }
                    else {
                        //>= 0 及び　<= 43 でない場合
                        result = '19' + sJyuCode;
                    }
                }
            }
            // 整形文字返却
            return result;
        };
        SHCtlCommon.Const = {
            keyCodes: {
                numerics: { min: 48, max: 57 },
                // 半角1 to 0
                tenKeyNumerics: { min: 96, max: 105 },
                // テンキーの半角0 to 9
                enter: 13,
                // エンター
                chars: { min: 65, max: 90 },
                // 半角a to z
                space: 32,
                // 半角スペース
                wideChara: 229,
                // 全角
                okCharas: {
                    "65": "a", "67": "c", "86": "v", "88": "x", "90": "z"
                },
                // Ctrlとの組み合わせ
                signs: {
                    // 半角記号
                    "186": ":", "187": ";", "188": ",", "189": "-", "190": ".", "191": "/",
                    "192": "@", "219": "[", "220": "\\", "221": "]", "222": "^", "226": "_",
                    "111": "/", "106": "*", "109": "-", "107": "+", "110": "." // テンキーの分
                },
                minus: [109, 189],
                // 半角マイナス(ハイフン)
                dot: [110, 190],
                // 半角ドット
                slash: [111, 191],
                // 半角スラッシュ
                plus: [107, 187],
            },
            state: {
                none: 'none',
                danger: 'danger',
                warning: 'warning',
                success: 'success',
            },
            timeFormat: {
                HH: 3600,
                HHMM: 60,
                HHMMSS: 1,
            }
        };
        SHCtlCommon.signs = "[\\\\!\"#$%&'()\*\+\-\.,\/:;<=>?@\[\]^_`{|}~]";
        SHCtlCommon.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */ SHCtlCommon.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SHCtlCommon_Factory() { return new SHCtlCommon(); }, token: SHCtlCommon, providedIn: "root" });
        return SHCtlCommon;
    }());
    if (false) {
        /** @type {?} */
        SHCtlCommon.Const;
        /**
         * @type {?}
         * @private
         */
        SHCtlCommon.signs;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxByteLengthService = /** @class */ (function () {
        function MaxByteLengthService() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        MaxByteLengthService.prototype.generateByteInfo = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var length = 0;
            /** @type {?} */
            var bytes = [];
            if (!value)
                return { length: length, bytes: bytes };
            for (var i = 0; i < value.length; i++) {
                /** @type {?} */
                var c = value.charCodeAt(i);
                if ((c >= 0x0 && c < 0x81) ||
                    c === 0xf8f0 ||
                    (c >= 0xff61 && c < 0xffa0) ||
                    (c >= 0xf8f1 && c < 0xf8f4)) {
                    length += 1;
                    bytes.push(1);
                }
                else {
                    length += 2;
                    bytes.push(2);
                }
            }
            return { length: length, bytes: bytes };
        };
        /**
         * @param {?} bytes
         * @param {?} maxBytelength
         * @param {?=} total
         * @return {?}
         */
        MaxByteLengthService.prototype.calcMaxLength = /**
         * @param {?} bytes
         * @param {?} maxBytelength
         * @param {?=} total
         * @return {?}
         */
        function (bytes, maxBytelength, total) {
            if (total === void 0) { total = 0; }
            /** @type {?} */
            var i;
            for (i = 0; i < bytes.length; i++) {
                total += bytes[i];
                if (total >= maxBytelength) {
                    break;
                }
            }
            return (total - maxBytelength) > 0 ? i : i + 1;
        };
        /**
         * @param {?} e
         * @return {?}
         */
        MaxByteLengthService.isAllowOperation = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.ctrlKey && MaxByteLengthService.isAllowWithCtlKey(e.key))
                return true;
            if (e.shiftKey && MaxByteLengthService.isAllowWithShiftKey(e.key))
                return true;
            if (MaxByteLengthService.isAllowCodes(e.code))
                return true;
            if (MaxByteLengthService.isAllowKey(e.key))
                return true;
            return false;
        };
        /**
         * @param {?} key
         * @return {?}
         */
        MaxByteLengthService.isAllowKey = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (MaxByteLengthService.allowKeys.includes(key))
                return true;
            return false;
        };
        /**
         * @private
         * @param {?} code
         * @return {?}
         */
        MaxByteLengthService.isAllowCodes = /**
         * @private
         * @param {?} code
         * @return {?}
         */
        function (code) {
            if (MaxByteLengthService.allowCodes.includes(code))
                return true;
            return false;
        };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        MaxByteLengthService.isAllowWithCtlKey = /**
         * @private
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (MaxByteLengthService.allowWithCtlKey.includes(key))
                return true;
            return false;
        };
        /**
         * @private
         * @param {?} key
         * @return {?}
         */
        MaxByteLengthService.isAllowWithShiftKey = /**
         * @private
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (MaxByteLengthService.allowWithShiftKey.includes(key))
                return true;
            return false;
        };
        MaxByteLengthService.allowKeys = ["ArrowRight", "ArrowLeft", "Backspace", "ArrowDown", "ArrowUp"];
        MaxByteLengthService.allowCodes = ["Enter", "Tab"];
        MaxByteLengthService.allowWithCtlKey = ["a", "Home", "End"];
        MaxByteLengthService.allowWithShiftKey = ["Home", "End"];
        MaxByteLengthService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: "root",
                    },] }
        ];
        /** @nocollapse */
        MaxByteLengthService.ctorParameters = function () { return []; };
        /** @nocollapse */ MaxByteLengthService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MaxByteLengthService_Factory() { return new MaxByteLengthService(); }, token: MaxByteLengthService, providedIn: "root" });
        return MaxByteLengthService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthService.allowKeys;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthService.allowCodes;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthService.allowWithCtlKey;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthService.allowWithShiftKey;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaxByteLengthHistory = /** @class */ (function () {
        function MaxByteLengthHistory(value, startPoint, maxByteLength) {
            this.enterableBytes = 0;
            this.service = new MaxByteLengthService();
            this.cache = value;
            this.startPoint = value.length == 1 && startPoint == 1 ? 0 : startPoint;
            this.maxByteLength = maxByteLength;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        MaxByteLengthHistory.isAllowOperation = /**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            return MaxByteLengthService.isAllowOperation(e);
        };
        /**
         *@ enterableBytesを書き換えます
         */
        /**
         * \@ enterableBytesを書き換えます
         * @param {?} value
         * @return {?}
         */
        MaxByteLengthHistory.prototype.changeEnterableBytes = /**
         * \@ enterableBytesを書き換えます
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var info = this.service.generateByteInfo(value);
            /** @type {?} */
            var entarableByte = this.maxByteLength - info.length;
            this.enterableBytes = entarableByte >= 0 ? entarableByte : 0;
        };
        /**
         *@ 残りの入力可能byte数を返す
         */
        /**
         * \@ 残りの入力可能byte数を返す
         * @return {?}
         */
        MaxByteLengthHistory.prototype.getEnterableBytes = /**
         * \@ 残りの入力可能byte数を返す
         * @return {?}
         */
        function () {
            return this.enterableBytes;
        };
        /**
         *@ inputにセットする値を返す
         */
        /**
         * \@ inputにセットする値を返す
         * @param {?} data
         * @param {?} value
         * @return {?}
         */
        MaxByteLengthHistory.prototype.getResult = /**
         * \@ inputにセットする値を返す
         * @param {?} data
         * @param {?} value
         * @return {?}
         */
        function (data, value) {
            if (!value)
                return "";
            // // 許容バイト数がまだある時
            if (this.enterableBytes)
                return value;
            if (this.startPoint === 0) {
                var bytes_1 = this.service.generateByteInfo(value).bytes;
                /** @type {?} */
                var maxByteLength = this.service.calcMaxLength(bytes_1, this.maxByteLength);
                return value.substr(0, maxByteLength);
            }
            var bytes = this.service.generateByteInfo(data).bytes;
            var length = this.service.generateByteInfo(this.cache).length;
            /** @type {?} */
            var len = this.service.calcMaxLength(bytes, this.maxByteLength, length);
            /** @type {?} */
            var insertStr = data.substr(0, len);
            /** @type {?} */
            var h = this.cache.substr(0, this.startPoint);
            /** @type {?} */
            var f = this.cache.substring(this.startPoint);
            return h + insertStr + f;
        };
        /**
         *アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
         */
        /**
         * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
         * @param {?} value
         * @return {?}
         */
        MaxByteLengthHistory.prototype.getMaxLength = /**
         * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var bytes = this.service.generateByteInfo(value).bytes;
            return this.service.calcMaxLength(bytes, this.maxByteLength);
        };
        /**
         *デバッグ用
         */
        /**
         * デバッグ用
         * @return {?}
         */
        MaxByteLengthHistory.prototype.toString = /**
         * デバッグ用
         * @return {?}
         */
        function () {
            return JSON.stringify({
                cache: this.cache,
                startPoint: this.startPoint,
                enterableBytes: this.enterableBytes,
                maxByteLength: this.maxByteLength,
            });
        };
        return MaxByteLengthHistory;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthHistory.prototype.cache;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthHistory.prototype.startPoint;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthHistory.prototype.enterableBytes;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthHistory.prototype.maxByteLength;
        /**
         * @type {?}
         * @private
         */
        MaxByteLengthHistory.prototype.service;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var SHFormControl = /** @class */ (function () {
        function SHFormControl() {
            //要素コントロール名
            this.ctlName = "SHFormControl";
            //表示レイアウト切り替えフラグ(true:閲覧専用/false:編集可能)
            this.isDisabled = false;
            //値バインド変数
            this.value = null;
            //タイトル名
            this.title = " ";
            //コントロール挙動(auto/always/nevwer)
            this.floatLabel = "auto";
            //閲覧専用画面でのラベル幅(px)
            this.labelWidth = "150";
            //input要素に対するstyleの指定(形式：{ color: "red" })
            this.styles = {};
            //input要素に対するclassの指定(形式：{ "className": true } or "className className2")
            this.classes = {};
            //input要素に対する必須入力フラグ
            this.required = false;
            //input要素に対する状態の指定
            this.state = "";
            //input要素に対する文言の指定
            this.message = [""];
            //input要素に対する必須入力フラグ
            this.disabled = false;
            //値バインド結果の返却を担う
            this.valueChange = new core.EventEmitter();
            //BeforeClickイベント返却
            this.beforeClick = new core.EventEmitter();
            //AfterClickイベント返却
            this.afterClick = new core.EventEmitter();
            //BeforeFocusイベント返却
            this.beforeFocus = new core.EventEmitter();
            //AfterFocusイベント返却
            this.afterFocus = new core.EventEmitter();
            //BeforeBlurイベント返却
            this.beforeBlur = new core.EventEmitter();
            //AfterBlurイベント返却
            this.afterBlur = new core.EventEmitter();
            //BeforeChangeイベント返却
            this.beforeChange = new core.EventEmitter();
            //AfterChangeイベント返却
            this.afterChange = new core.EventEmitter();
            this.objClass = {};
            this.strClass = "";
            this.isComp = false;
            this.array = [];
            //forcusの保持変数
            this.isfocused = false;
            this.onlyField = false;
        }
        /**
         * @return {?}
         */
        SHFormControl.prototype.onInit = /**
         * @return {?}
         */
        function () {
            //クラスの指定方法によって分岐する
            if (typeof this.classes === "string") {
                this.strClass = this.classes;
                this.objClass = null;
            }
            else {
                this.strClass = "";
                this.objClass = this.classes;
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHFormControl.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) { };
        /**
         * onKeyDown
         * @param event keydown
         */
        /**
         * onKeyDown
         * @param {?} event keydown
         * @return {?}
         */
        SHFormControl.prototype.onKeyDown = /**
         * onKeyDown
         * @param {?} event keydown
         * @return {?}
         */
        function (event) { };
        /**
         * @return {?}
         */
        SHFormControl.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (!this.maxByteLength)
                return;
            if (this.selfInputElm) {
                this.selfInputElm.nativeElement.addEventListener("keydown", this.handleKeydown.bind(this));
                this.selfInputElm.nativeElement.addEventListener("input", this.handleInput.bind(this));
                this.selfInputElm.nativeElement.addEventListener("compositionstart", this.handleCompositionStart.bind(this));
                this.selfInputElm.nativeElement.addEventListener("compositionend", this.handleCompositionEnd.bind(this));
            }
        };
        /**
         *maxByteLengthの制御
         */
        /**
         * maxByteLengthの制御
         * @protected
         * @param {?} e
         * @return {?}
         */
        SHFormControl.prototype.handleKeydown = /**
         * maxByteLengthの制御
         * @protected
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.maxByteLength)
                return;
            /** @type {?} */
            var value = e.target.value;
            if (value &&
                !this.maxByteLengthHistory &&
                !MaxByteLengthHistory.isAllowOperation(e)) {
                this.maxByteLengthHistory = new MaxByteLengthHistory(value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
            }
        };
        /**
         *@ あと何byte許容できるかを更新
         */
        /**
         * \@ あと何byte許容できるかを更新
         * @protected
         * @param {?} e
         * @return {?}
         */
        SHFormControl.prototype.handleInput = /**
         * \@ あと何byte許容できるかを更新
         * @protected
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.maxByteLength)
                return;
            this.maxlength = undefined;
            if (!this.maxByteLengthHistory && e.target.value) {
                this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
            }
            if (this.maxByteLengthHistory) {
                this.maxByteLengthHistory.changeEnterableBytes(e.target.value);
                if (!this.maxByteLengthHistory.getEnterableBytes() && !this.isComp) {
                    /** @type {?} */
                    var maxLen = this.maxByteLengthHistory.getMaxLength(e.target.value);
                    this.maxlength = maxLen;
                    if (e.target.value.length > maxLen) {
                        e.target.value = e.target.value.substr(0, maxLen);
                        this.valueChange.emit(e.target.value);
                    }
                }
            }
        };
        /**
         * @protected
         * @param {?} e
         * @return {?}
         */
        SHFormControl.prototype.handleCompositionStart = /**
         * @protected
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.maxByteLength)
                return;
            this.isComp = true;
            this.maxlength = undefined;
            if (e.target.value) {
                this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
            }
            else {
                this.isComp = false;
            }
        };
        /**
         * @protected
         * @param {?} e
         * @return {?}
         */
        SHFormControl.prototype.handleCompositionEnd = /**
         * @protected
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!this.maxByteLength)
                return;
            /** @type {?} */
            var result = this.maxByteLengthHistory.getResult(e.data, e.target.value.replace(/\n/g, '##')).replace(/##/g, '\n');
            e.target.value = result;
            this.valueChange.emit(result);
            this.maxByteLengthHistory = null;
            this.isComp = false;
        };
        /**
         * onFocusin
         * @param event focusin
         */
        /**
         * onFocusin
         * @param {?} event focusin
         * @return {?}
         */
        SHFormControl.prototype.onFocusin = /**
         * onFocusin
         * @param {?} event focusin
         * @return {?}
         */
        function (event) {
            this.isfocused = true;
        };
        /**
         * onFocusout
         * @param event focusout
         */
        /**
         * onFocusout
         * @param {?} event focusout
         * @return {?}
         */
        SHFormControl.prototype.onFocusout = /**
         * onFocusout
         * @param {?} event focusout
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.isfocused = false;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (!_this.isfocused)
                    _this.onBlur(event);
            }), 0);
        };
        /**
         * clickClearButton
         * @param event keydown
         */
        /**
         * clickClearButton
         * @param {?} event keydown
         * @return {?}
         */
        SHFormControl.prototype.clickClearButton = /**
         * clickClearButton
         * @param {?} event keydown
         * @return {?}
         */
        function (event) {
            var _this = this;
            if (event.keyCode == SHCtlCommon.Const.keyCodes.enter ||
                event.keyCode == SHCtlCommon.Const.keyCodes.space) {
                //エンターキーで別コントロールにフォーカスが移動しないようにフォーカスを当て直す
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + _this.ctlName + "], input[name=" + _this.ctlName + "]")));
                    inputValue.dispatchEvent(new Event('focus'));
                }), 0);
                this.clearValue();
                return false;
            }
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHFormControl.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            this.valueChange.emit(this.value);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHFormControl.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            event.target.select();
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHFormControl.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) { };
        /**
         * onBeforeClick
         * @param event
         */
        /**
         * onBeforeClick
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onBeforeClick = /**
         * onBeforeClick
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.beforeClick.emit(event);
        };
        /**
         * onAfterClick
         * @param event
         */
        /**
         * onAfterClick
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onAfterClick = /**
         * onAfterClick
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.afterClick.emit(event);
        };
        /**
         * onBeforeFocus
         * @param event
         */
        /**
         * onBeforeFocus
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onBeforeFocus = /**
         * onBeforeFocus
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.beforeFocus.emit(event);
        };
        /**
         * onAfterFocus
         * @param event
         */
        /**
         * onAfterFocus
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onAfterFocus = /**
         * onAfterFocus
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.afterFocus.emit(event);
        };
        /**
         * onBeforeBlur
         * @param event
         */
        /**
         * onBeforeBlur
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onBeforeBlur = /**
         * onBeforeBlur
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.beforeBlur.emit(event);
        };
        /**
         * onAfterBlur
         * @param event
         */
        /**
         * onAfterBlur
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onAfterBlur = /**
         * onAfterBlur
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.afterBlur.emit(event);
        };
        /**
         * onBeforeChange
         * @param event
         */
        /**
         * onBeforeChange
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onBeforeChange = /**
         * onBeforeChange
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.beforeChange.emit(event);
        };
        /**
         * onAfterChange
         * @param event
         */
        /**
         * onAfterChange
         * @param {?} event
         * @return {?}
         */
        SHFormControl.prototype.onAfterChange = /**
         * onAfterChange
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.afterChange.emit(event);
        };
        /**
         * 値のクリア
         */
        /**
         * 値のクリア
         * @return {?}
         */
        SHFormControl.prototype.clearValue = /**
         * 値のクリア
         * @return {?}
         */
        function () {
            this.value = null;
            /** @type {?} */
            var inputValue = (/** @type {?} */ ((document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]"))));
            //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
            setTimeout((/**
             * @return {?}
             */
            function () {
                inputValue.dispatchEvent(new Event('change'));
                inputValue.dispatchEvent(new Event('focus'));
            }), 10);
        };
        SHFormControl.propDecorators = {
            ctlName: [{ type: core.Input }],
            isDisabled: [{ type: core.Input }],
            value: [{ type: core.Input }],
            title: [{ type: core.Input }],
            floatLabel: [{ type: core.Input }],
            labelWidth: [{ type: core.Input }],
            maxlength: [{ type: core.Input }],
            maxByteLength: [{ type: core.Input }],
            styles: [{ type: core.Input }],
            classes: [{ type: core.Input }],
            required: [{ type: core.Input }],
            state: [{ type: core.Input }],
            message: [{ type: core.Input }],
            items: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            valueChange: [{ type: core.Output }],
            beforeClick: [{ type: core.Output }],
            afterClick: [{ type: core.Output }],
            beforeFocus: [{ type: core.Output }],
            afterFocus: [{ type: core.Output }],
            beforeBlur: [{ type: core.Output }],
            afterBlur: [{ type: core.Output }],
            beforeChange: [{ type: core.Output }],
            afterChange: [{ type: core.Output }],
            selfInputElm: [{ type: core.ViewChild, args: ["inputElm", { static: false },] }],
            onlyField: [{ type: core.Input }]
        };
        return SHFormControl;
    }());
    if (false) {
        /** @type {?} */
        SHFormControl.prototype.ctlName;
        /** @type {?} */
        SHFormControl.prototype.isDisabled;
        /** @type {?} */
        SHFormControl.prototype.value;
        /** @type {?} */
        SHFormControl.prototype.title;
        /** @type {?} */
        SHFormControl.prototype.floatLabel;
        /** @type {?} */
        SHFormControl.prototype.labelWidth;
        /** @type {?} */
        SHFormControl.prototype.maxlength;
        /** @type {?} */
        SHFormControl.prototype.maxByteLength;
        /** @type {?} */
        SHFormControl.prototype.styles;
        /** @type {?} */
        SHFormControl.prototype.classes;
        /** @type {?} */
        SHFormControl.prototype.required;
        /** @type {?} */
        SHFormControl.prototype.state;
        /** @type {?} */
        SHFormControl.prototype.message;
        /** @type {?} */
        SHFormControl.prototype.items;
        /** @type {?} */
        SHFormControl.prototype.disabled;
        /** @type {?} */
        SHFormControl.prototype.valueChange;
        /** @type {?} */
        SHFormControl.prototype.beforeClick;
        /** @type {?} */
        SHFormControl.prototype.afterClick;
        /** @type {?} */
        SHFormControl.prototype.beforeFocus;
        /** @type {?} */
        SHFormControl.prototype.afterFocus;
        /** @type {?} */
        SHFormControl.prototype.beforeBlur;
        /** @type {?} */
        SHFormControl.prototype.afterBlur;
        /** @type {?} */
        SHFormControl.prototype.beforeChange;
        /** @type {?} */
        SHFormControl.prototype.afterChange;
        /** @type {?} */
        SHFormControl.prototype.selfInputElm;
        /** @type {?} */
        SHFormControl.prototype.objClass;
        /** @type {?} */
        SHFormControl.prototype.strClass;
        /** @type {?} */
        SHFormControl.prototype.isComp;
        /** @type {?} */
        SHFormControl.prototype.array;
        /** @type {?} */
        SHFormControl.prototype.maxByteLengthHistory;
        /** @type {?} */
        SHFormControl.prototype.isfocused;
        /** @type {?} */
        SHFormControl.prototype.onlyField;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlAllCharComponent = /** @class */ (function (_super) {
        __extends(SHCtlAllCharComponent, _super);
        function SHCtlAllCharComponent() {
            var _this = _super.call(this) || this;
            //入力変換時を補足するための値保持
            _this._data = "";
            _this.ctlName = "SHCtlAllChar";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var isSameData = this._data == event.data;
            this._data = event.data;
            //入力変換中は書き換えを行わない
            if (event.isComposing && (!event.isComposing || !isSameData))
                return;
            if (event.inputType !== "insertCompositionText") {
                SHCtlCommon.sliceLength(event, this.maxlength);
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
            SHCtlCommon.replaceHalfDoubleQuote(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterChange(event);
            }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = SHCtlCommon.LineBreak(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterFocus(event);
            }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlAllCharComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            event.target.value = SHCtlCommon.LineBreak(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterBlur(event);
            }), 0);
        };
        SHCtlAllCharComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-all-char",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field id=\"mat-all-char\" class=\"example-full-width mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: ["mat-card-actions,mat-card-content,mat-card-title{text-align:center}mat-card-content{padding-top:20px;padding-bottom:20px}.advanced-color{color:#3f51b5}.beginner-color{color:#f44336}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlAllCharComponent.ctorParameters = function () { return []; };
        return SHCtlAllCharComponent;
    }(SHFormControl));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SHCtlAllCharComponent.prototype._data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlAllCharMLComponent = /** @class */ (function (_super) {
        __extends(SHCtlAllCharMLComponent, _super);
        function SHCtlAllCharMLComponent() {
            var _this = _super.call(this) || this;
            //入力変換時を補足するための値保持
            _this._data = "";
            _this.ctlName = "SHCtlAllCharML";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var isSameData = (this._data == event.data);
            this._data = event.data;
            //入力変換中は書き換えを行わない
            if (event.isComposing && (!event.isComposing || !isSameData))
                return;
            if (event.inputType !== 'insertCompositionText') {
                SHCtlCommon.sliceLength(event, this.maxlength);
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            SHCtlCommon.replaceFullDoubleQuote(event);
            SHCtlCommon.replaceHalfDoubleQuote(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlAllCharMLComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            if (this.value == undefined) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { _this.onAfterBlur(event); }), 0);
                ;
                return false;
            }
            this.value = String(this.value);
            this.value = this.value.trim();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        SHCtlAllCharMLComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-all-char-ml",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <textarea #inputElm matInput [required]=\"required\" [placeholder]=\"title\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlAllCharMl can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"></textarea>\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <textarea #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlAllCharMl can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" \r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"></textarea>\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div *ngIf=\"title\" [ngStyle]=\"{'width.px': labelWidth}\" class=\"display-result\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: ["textarea{min-height:2em}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlAllCharMLComponent.ctorParameters = function () { return []; };
        return SHCtlAllCharMLComponent;
    }(SHFormControl));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SHCtlAllCharMLComponent.prototype._data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlBunjNoComponent = /** @class */ (function (_super) {
        __extends(SHCtlBunjNoComponent, _super);
        function SHCtlBunjNoComponent() {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlBunjNo";
            _this.maxlength = 9;
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.replaceSign(event);
            SHCtlCommon.sliceLength(event, this.maxlength);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            event.target.value = this.toText(event.target.value);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toValue(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
            return true;
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            event.target.value = this.toText(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * ゼロパディング
         * @param inputValue inputの値
         */
        /**
         * ゼロパディング
         * @param {?} inputValue inputの値
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.toText = /**
         * ゼロパディング
         * @param {?} inputValue inputの値
         * @return {?}
         */
        function (inputValue) {
            // ブランクなら
            if (SHCtlCommon.isBlank(inputValue))
                return "";
            if (inputValue.length > 9)
                return inputValue;
            inputValue = inputValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
            /** @type {?} */
            var result = (('00000000' + inputValue).slice(-9));
            return result;
        };
        /**
         * ゼロサプレス
         * @param inputValue inputの値
         */
        /**
         * ゼロサプレス
         * @param {?} inputValue inputの値
         * @return {?}
         */
        SHCtlBunjNoComponent.prototype.toValue = /**
         * ゼロサプレス
         * @param {?} inputValue inputの値
         * @return {?}
         */
        function (inputValue) {
            if (!inputValue)
                return "";
            return inputValue.replace(/^0*/, "");
        };
        SHCtlBunjNoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-bunj-no',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlBunj can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlBunj can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n      [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlBunjNoComponent.ctorParameters = function () { return []; };
        return SHCtlBunjNoComponent;
    }(SHFormControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * DatePickerの設定
     */
    var   /**
     * DatePickerの設定
     */
    JpDateAdapter = /** @class */ (function (_super) {
        __extends(JpDateAdapter, _super);
        function JpDateAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * 日付設定
         */
        /**
         * 日付設定
         * @return {?}
         */
        JpDateAdapter.prototype.getDateNames = /**
         * 日付設定
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dateNames = [];
            for (var i = 0; i < 31; i++) {
                dateNames[i] = (i + 1).toString();
            }
            return dateNames;
        };
        /**
         * フォーマット設定
         * @param date 入力された日付
         * @param displayFormat 使用しないがinterfaceで指定があるため定義から消さないこと
         */
        /**
         * フォーマット設定
         * @param {?} date 入力された日付
         * @param {?} displayFormat 使用しないがinterfaceで指定があるため定義から消さないこと
         * @return {?}
         */
        JpDateAdapter.prototype.format = /**
         * フォーマット設定
         * @param {?} date 入力された日付
         * @param {?} displayFormat 使用しないがinterfaceで指定があるため定義から消さないこと
         * @return {?}
         */
        function (date, displayFormat) {
            if (!date)
                return '';
            /** @type {?} */
            var dateStr = SHCtlCommon.getDateStr(date, 'YYYY-MM-dd');
            return dateStr;
        };
        return JpDateAdapter;
    }(material.NativeDateAdapter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlDateComponent = /** @class */ (function (_super) {
        __extends(SHCtlDateComponent, _super);
        function SHCtlDateComponent(dataAdapter) {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlDate";
            dataAdapter.setLocale("ja");
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlDateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        SHCtlDateComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.value) {
                if (changes.value.currentValue) {
                    /** @type {?} */
                    var result = this.getfomatedDate(changes.value.currentValue.replace(/\-/g, '/'));
                    this.value = new Date(result);
                }
            }
        };
        /**
         * @return {?}
         */
        SHCtlDateComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null && this.isDisabled) {
                this.stringValue = this.changeFormat(this.value);
            }
        };
        /**
         * onOpened
         */
        /**
         * onOpened
         * @return {?}
         */
        SHCtlDateComponent.prototype.onOpened = /**
         * onOpened
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var el = document.querySelector("mat-datepicker-content");
            el.addEventListener("focusin", (/**
             * @return {?}
             */
            function () {
                _this.isfocused = true;
            }));
        };
        /**
         * onClosed
         */
        /**
         * onClosed
         * @return {?}
         */
        SHCtlDateComponent.prototype.onClosed = /**
         * onClosed
         * @return {?}
         */
        function () {
            /** @type {?} */
            var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
            setTimeout((/**
             * @return {?}
             */
            function () { inputValue.dispatchEvent(new Event('focus')); }), 0);
        };
        /**
         * onKeypress
         * @param event keyPress
         */
        /**
         * onKeypress
         * @param {?} event keyPress
         * @return {?}
         */
        SHCtlDateComponent.prototype.onKeypress = /**
         * onKeypress
         * @param {?} event keyPress
         * @return {?}
         */
        function (event) {
            this.setCurrentDate(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlDateComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlDateComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(this.getfomatedDate(event.target.value));
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterChange(event);
            }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlDateComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlDateComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * 本日日付の設定
         */
        /**
         * 本日日付の設定
         * @param {?} event
         * @return {?}
         */
        SHCtlDateComponent.prototype.setCurrentDate = /**
         * 本日日付の設定
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.key === "/") {
                this.value = new Date();
                event.target.value = this.getfomatedDate(this.value).split('/').join('-');
                this.onChange(event);
            }
        };
        /**
         * 日付データのフォーマット変更を行う
         * @param date 日付データ
         * @return 日付文字列
         */
        /**
         * 日付データのフォーマット変更を行う
         * @private
         * @param {?} date 日付データ
         * @return {?} 日付文字列
         */
        SHCtlDateComponent.prototype.getfomatedDate = /**
         * 日付データのフォーマット変更を行う
         * @private
         * @param {?} date 日付データ
         * @return {?} 日付文字列
         */
        function (date) {
            if (!date)
                return "";
            /** @type {?} */
            var toString = Object.prototype.toString;
            if (toString.call(date) == "[object Date]") {
                var _a = this.paddingDate(date.toLocaleDateString()), year = _a.year, month = _a.month, day = _a.day;
                return year + "/" + month + "/" + day;
            }
            else {
                var _b = this.paddingDate(date), year = _b.year, month = _b.month, day = _b.day;
                if (date.match(/-/))
                    return year + "/" + month + "/" + day;
                else
                    return year + "-" + month + "-" + day;
            }
        };
        /**
         * 日付文字列の年月日分割オブジェクトを返却する
         * @param dateStr 日付文字列
         * @return 分割オブジェクト(year, month, day)
         */
        /**
         * 日付文字列の年月日分割オブジェクトを返却する
         * @param {?} dateStr 日付文字列
         * @return {?} 分割オブジェクト(year, month, day)
         */
        SHCtlDateComponent.prototype.paddingDate = /**
         * 日付文字列の年月日分割オブジェクトを返却する
         * @param {?} dateStr 日付文字列
         * @return {?} 分割オブジェクト(year, month, day)
         */
        function (dateStr) {
            if (!dateStr)
                return;
            /** @type {?} */
            var dateArr = dateStr.split(/[-/]/);
            /** @type {?} */
            var year = (Array(4).join("0") + dateArr[0]).slice(-4);
            /** @type {?} */
            var month = (Array(2).join('0') + dateArr[1]).slice(-2);
            /** @type {?} */
            var day = (Array(2).join('0') + dateArr[2]).slice(-2);
            return { year: year, month: month, day: day };
        };
        /**
         * フォーマット編集
         * @param value
         */
        /**
         * フォーマット編集
         * @param {?} value
         * @return {?}
         */
        SHCtlDateComponent.prototype.changeFormat = /**
         * フォーマット編集
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                this.stringValue = "";
                return;
            }
            /** @type {?} */
            var dataStr = value.toLocaleDateString();
            /** @type {?} */
            var result = dataStr.replace('/', "年").replace('/', '月') + '日';
            return result;
        };
        SHCtlDateComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-date",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation {{strClass}}\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm [required]=\"required\" matInput type=\"date\" [matDatepicker]=\"picker\" [placeholder]=\"title\" max=\"9999-12-31\"\r\n        attr.name=\"{{ctlName}}\" (click)=\"onClick($event)\" (dateChange)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\" [(ngModel)]=\"value\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"can-moved-with-the-enter-key\">\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\" (mousedown)=\"picker.open(); $event.preventDefault(); $event.stopPropagation();\" ></mat-datepicker-toggle>\r\n      <mat-datepicker #picker (opened)=\"onOpened()\" (closed)=\"onClosed()\"></mat-datepicker>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm [required]=\"required\" matInput type=\"date\" [matDatepicker]=\"picker\" max=\"9999-12-31\"\r\n      attr.name=\"{{ctlName}}\" (click)=\"onClick($event)\" (dateChange)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\" [(ngModel)]=\"value\"\r\n      maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"can-moved-with-the-enter-key\">\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-datepicker-toggle matSuffix [for]=\"picker\" (mousedown)=\"picker.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n    <mat-datepicker #picker (opened)=\"onOpened()\" (closed)=\"onClosed()\"></mat-datepicker>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        providers: [{ provide: material.DateAdapter, useClass: JpDateAdapter }],
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}input[type=date]::-webkit-calendar-picker-indicator{display:none}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}input[type=date]::-webkit-inner-spin-button,input[type=date]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=date]::-webkit-clear-button{display:none}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlDateComponent.ctorParameters = function () { return [
            { type: material.DateAdapter }
        ]; };
        return SHCtlDateComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlDateComponent.prototype.stringValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlHalfCharComponent = /** @class */ (function (_super) {
        __extends(SHCtlHalfCharComponent, _super);
        function SHCtlHalfCharComponent() {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlHalfChar";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceFullWidth(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlHalfCharComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            event.target.value = !event.target.value ? "" : event.target.value;
            event.target.value = event.target.value.replace(/^[^\x01-\x7E\uFF61-\uFF9F]+$/g, '');
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        SHCtlHalfCharComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-half-char',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" type=\"tel\"\r\n        class=\"form-control SHCtlHalfChar can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" type=\"tel\"\r\n      class=\"form-control SHCtlHalfChar can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlHalfCharComponent.ctorParameters = function () { return []; };
        return SHCtlHalfCharComponent;
    }(SHFormControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ShCtlConst = {
        STATUS_OK: 200,
        DIALOG_WIDTH: "650px",
        DIALOG_HEIGHT: "750px",
        DIALOG_MAX_WIDTH: "1000px",
        ORDINAL: {
            KEYS: {
                KEY_ENTER: 13,
                KEY_LEFT: 37,
                KEY_RIGHT: 39,
                KEY_D: 68,
                KEY_N: 78,
                KEY_R: 82,
                KEY_F1: 112,
                KEY_F2: 113,
                KEY_F3: 114,
                KEY_F4: 115,
                KEY_F5: 116,
                KEY_F6: 117,
                KEY_F10: 121,
                KEY_F11: 122,
                KEY_F12: 123
            },
        },
        NO_CHANGE: {
            FLG_SUFFIX: "NO_CHANGE_FLG_SUFFIX",
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Data() { }
    if (false) {
        /** @type {?} */
        Data.prototype.dataTitle;
        /** @type {?} */
        Data.prototype.hiddenColumns;
    }
    var SHCtlPopupDialogComponent = /** @class */ (function () {
        function SHCtlPopupDialogComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.displayedColumns = [];
            this.name = "";
            this.uniqueStr = "";
        }
        /**
         * 値がバインドされる時に呼ばれる
         */
        /**
         * 値がバインドされる時に呼ばれる
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.ngOnInit = /**
         * 値がバインドされる時に呼ばれる
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
        * 値の初期化
        */
        /**
         * 値の初期化
         * @private
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.init = /**
         * 値の初期化
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.dataTitle = this.data.dataTitle;
            /** @type {?} */
            var cols = [];
            this.getHashKeys().forEach((/**
             * @param {?} name
             * @param {?} idx
             * @return {?}
             */
            function (name, idx) {
                if (!_this.data.hiddenColumns.find((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return _ == (idx + 1); })))
                    cols.push(name);
            }));
            this.displayedColumns = cols;
            this.uniqueStr = SHCtlCommon.getUniqueStr();
        };
        /**
        * テーブルのヘッダーを編集
        */
        /**
         * テーブルのヘッダーを編集
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.ngAfterViewChecked = /**
         * テーブルのヘッダーを編集
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headerElement = document.getElementsByTagName('th');
            /** @type {?} */
            var countBlank = 0;
            if (!this.codesHeader)
                return;
            for (var i = 0; i < headerElement.length; i++) {
                if (this.codesHeader[i] != "") {
                    for (var e = 1; e <= countBlank; e++) {
                        headerElement[i - e].style.display = 'none';
                    }
                    countBlank = 0;
                }
                else if (this.codesHeader[i] === "") {
                    countBlank += 1;
                    headerElement[i - countBlank].colSpan = countBlank + 1;
                    headerElement[i - countBlank].style.textAlign = 'center';
                    if (i === headerElement.length - 1) {
                        for (var j = 0; j < countBlank; j++) {
                            headerElement[i - j].style.display = 'none';
                        }
                    }
                }
            }
        };
        /**
         * ダイアログを閉じる
         */
        /**
         * ダイアログを閉じる
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.closeDialog = /**
         * ダイアログを閉じる
         * @return {?}
         */
        function () {
            this.dialogRef.close();
        };
        /**
         * ポップアップから選択されたデータを親に返す
         * @param item 事業所コード一覧から選択された1つ
         */
        /**
         * ポップアップから選択されたデータを親に返す
         * @param {?} item 事業所コード一覧から選択された1つ
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.selectCode = /**
         * ポップアップから選択されたデータを親に返す
         * @param {?} item 事業所コード一覧から選択された1つ
         * @return {?}
         */
        function (item) {
            //ダイアログを閉める時に値を親に渡す
            this.dialogRef.close(item);
        };
        /**
         * データのkeyを返す
         */
        /**
         * データのkeyを返す
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.getHashKeys = /**
         * データのkeyを返す
         * @return {?}
         */
        function () {
            if (!this.unchangeableCodes || this.unchangeableCodes.length == 0) {
                return [];
            }
            else {
                return Object.keys(this.unchangeableCodes[0]);
            }
        };
        /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param event inputイベント
         */
        /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlPopupDialogComponent.prototype.filter = /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            if (!this.unchangeableCodes)
                return;
            /** @type {?} */
            var filterString = event.target.value;
            /** @type {?} */
            var fileterStrArray = filterString.replace(/　/g, " ").split(" ");
            fileterStrArray = fileterStrArray.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return value;
            }));
            /** @type {?} */
            var resultArray;
            resultArray = this.unchangeableCodes.concat();
            var _loop_1 = function (i) {
                /** @type {?} */
                var obj = this_1;
                resultArray = resultArray.filter((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    /** @type {?} */
                    var values = Object.values(value);
                    var _loop_2 = function (j) {
                        if (obj.data.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { return _ == (j + 1); })))
                            return "continue";
                        if (values[j] != null && values[j].toString().match(fileterStrArray[i])) {
                            return { value: true };
                        }
                    };
                    for (var j = 0; j < values.length; j++) {
                        var state_1 = _loop_2(j);
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                    return false;
                }));
            };
            var this_1 = this;
            for (var i = 0; i < fileterStrArray.length; i++) {
                _loop_1(i);
            }
            this.codes = resultArray;
        };
        SHCtlPopupDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-popup-dialog',
                        template: "<div *ngIf=\"!unchangeableCodes\" class=\"overlay\">\r\n  <mat-spinner></mat-spinner>\r\n  <span class=\"loader-text\">Loading...</span>\r\n</div> \r\n<div class=\"sh-container\" id={{uniqueStr}}>\r\n    <h1 mat-dialog-title class=\"sh-text-center\">{{dataTitle}}</h1>\r\n    <div mat-dialog-content class=\"sh-dialog-content\">\r\n      <mat-form-field class=\"sh-width-100\">\r\n        <input matInput placeholder=\"\u691C\u7D22\u6B04\" (input)=\"filter($event)\"/>\r\n      </mat-form-field>\r\n      <div class=\"sh-dialog-table-container mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"codes\" class=\"sh-width-100\">\r\n          <span *ngFor=\"let key of getHashKeys(); let i = index\">\r\n            <ng-container matColumnDef=\"{{key}}\">\r\n              <th mat-header-cell *matHeaderCellDef>{{codesHeader[i]}}</th>\r\n              <td mat-cell *matCellDef=\"let element\">{{element[key]}}</td>\r\n            </ng-container>\r\n          </span>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selectCode(row)\"></tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <button mat-raised-button (click)=\"closeDialog()\">\u623B\u308B</button>\r\n    </div>\r\n  </div>\r\n  ",
                        styles: ["", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlPopupDialogComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] }] }
        ]; };
        return SHCtlPopupDialogComponent;
    }());
    if (false) {
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.displayedColumns;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.name;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.uniqueStr;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.dataTitle;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.codes;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.unchangeableCodes;
        /** @type {?} */
        SHCtlPopupDialogComponent.prototype.codesHeader;
        /**
         * @type {?}
         * @private
         */
        SHCtlPopupDialogComponent.prototype.dialogRef;
        /**
         * @type {?}
         * @private
         */
        SHCtlPopupDialogComponent.prototype.data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHFormPopup = /** @class */ (function (_super) {
        __extends(SHFormPopup, _super);
        function SHFormPopup(SmplPopupService, dialog, bindCtlService, lockScreenService) {
            var _this = _super.call(this) || this;
            _this.SmplPopupService = SmplPopupService;
            _this.dialog = dialog;
            _this.bindCtlService = bindCtlService;
            _this.lockScreenService = lockScreenService;
            //データタイトル名
            _this.dataTitle = "";
            //データ区分名
            _this.dataKbnName = "";
            //API URL
            _this.apiUrl = "/api/";
            //入力コントロールに紐づく列番号
            _this.bindColumnKey = 1;
            //ラベルコントロールに紐づく列番号
            _this.bindColumnValue = 2;
            //入力コントロールを非表示にするモードフラグ
            _this.hiddenInput = false;
            //ラベルを非表示にするモードフラグ
            _this.hiddenLabel = false;
            //虫眼鏡アイコンを非表示にするモードフラグ
            _this.hiddenPopupButton = false;
            //データキャッシュON/OFF機能フラグ
            _this.dataCache = false;
            //ポップアップ上非表示となる列番号
            _this.hiddenColumns = [];
            _this.name = "";
            _this.codes = [];
            _this.codesHeader = [];
            _this.extendWidth = ShCtlConst.DIALOG_WIDTH;
            //Dialogの結果を受け取る
            _this.dialogRef = null;
            // 初回通信用フラグ
            _this.initFetchFlg = false;
            // bindColumnArrayを利用し値が設定された場合にチェンジを止める
            _this.noChangeFlg = "OFF";
            // 通信中かどうか
            _this.isBusy = false;
            _this.ctlName = "SHCtlPopup";
            return _this;
        }
        Object.defineProperty(SHFormPopup.prototype, "noChangeFlgCtlName", {
            // bindColumnArrayを利用し値が設定された場合にチェンジを止める
            get: 
            // bindColumnArrayを利用し値が設定された場合にチェンジを止める
            /**
             * @return {?}
             */
            function () {
                return this.ctlName + "_" + ShCtlConst.NO_CHANGE.FLG_SUFFIX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SHFormPopup.prototype, "ownValueInputElm", {
            // inputの参照
            get: 
            // inputの参照
            /**
             * @return {?}
             */
            function () {
                return ((/** @type {?} */ ((document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")))) || null);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SHFormPopup.prototype, "ownLabelInputElm", {
            get: /**
             * @return {?}
             */
            function () {
                return (/** @type {?} */ (((document.querySelector("textarea[name=" + this.popupLabelName + "], input[name=" + this.popupLabelName + "]") || null))));
            },
            enumerable: true,
            configurable: true
        });
        /**
         *
         */
        /**
         *
         * @param {?} event
         * @return {?}
         */
        SHFormPopup.prototype.noChangeFlgChange = /**
         *
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.noChangeFlg = event.target.value;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.noChangeFlg = "OFF";
            }), 1000);
        };
        /**
         * 入力コントロールの幅を指定
         */
        /**
         * 入力コントロールの幅を指定
         * @return {?}
         */
        SHFormPopup.prototype.setInputWidth = /**
         * 入力コントロールの幅を指定
         * @return {?}
         */
        function () {
            return this.hiddenLabel ? { width: "100%" } : { width: "33.3%" };
        };
        /**
         * ラベルコントロールの幅を指定
         */
        /**
         * ラベルコントロールの幅を指定
         * @return {?}
         */
        SHFormPopup.prototype.setLabelWidth = /**
         * ラベルコントロールの幅を指定
         * @return {?}
         */
        function () {
            return this.hiddenInput ? { width: "100%" } : { width: "66.6%" };
        };
        /**
         * データバインドされた値を再設定する際に値を検証し
         * 親コンポーネントに渡す
         * @param changes 現在の値と直前の値を取得出来る
         */
        /**
         * データバインドされた値を再設定する際に値を検証し
         * 親コンポーネントに渡す
         * @param {?} changes 現在の値と直前の値を取得出来る
         * @return {?}
         */
        SHFormPopup.prototype.ngOnChanges = /**
         * データバインドされた値を再設定する際に値を検証し
         * 親コンポーネントに渡す
         * @param {?} changes 現在の値と直前の値を取得出来る
         * @return {?}
         */
        function (changes) {
            var _this = this;
            if (changes.value && !changes.value.currentValue) {
                this.name = "";
                this.value = "";
                return;
            }
            if (this.noChangeFlg == "OFF") {
                if (changes.value && changes.value.currentValue) {
                    if (changes.value.currentValue != changes.value.previousValue) {
                        this.fetchCodes(this.apiUrl);
                        return;
                    }
                }
                if (changes.value && changes.value.firstChange) {
                    this.initFetchFlg = true;
                }
                if (this.initFetchFlg) {
                    if (!this.value || !changes.value.currentValue)
                        return;
                    this.fetchCodes(this.apiUrl);
                    this.initFetchFlg = false;
                }
                if (changes.apiUrl &&
                    changes.apiUrl.previousValue != changes.apiUrl.currentValue &&
                    !this.isBindInputNull(this.bindColumnArray)) {
                    if (this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)
                        .length == 0) {
                        if (changes.value &&
                            changes.value.currentValue == changes.value.previousValue)
                            return;
                        this.fetchCodes(changes.apiUrl.currentValue);
                    }
                    else {
                        this.codes = Object(this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)).data;
                        this.value = this.setName(this.value);
                    }
                }
            }
            setTimeout((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.noChangeFlg = "OFF";
                }), 1000);
            }), 0);
        };
        /**
         *プロパティの初期化
         *通常サービスにキャッシュしているが、無ければ再度マスタより取得
         */
        /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        SHFormPopup.prototype.ngOnInit = /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.onInit();
            if (this.popupWidth) {
                this.extendWidth = this.popupWidth;
            }
            // //ユニークな文字列
            if (this.isDisabled) {
                if (this.SmplPopupService.getMasterData(this.apiUrl).length <= 0) {
                    this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        _this.codes = response.data;
                        _this.codesHeader = Object.values(response.header);
                    }));
                }
            }
        };
        /**
         *api 通信 マスタから取得
         */
        /**
         * api 通信 マスタから取得
         * @param {?} url
         * @param {?=} value
         * @return {?}
         */
        SHFormPopup.prototype.fetchCodes = /**
         * api 通信 マスタから取得
         * @param {?} url
         * @param {?=} value
         * @return {?}
         */
        function (url, value) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this.isBusy)
                        return [2 /*return*/];
                    this.isBusy = true;
                    this.lockScreenService.lockScreen();
                    ((/** @type {?} */ (document.activeElement))).blur();
                    return [2 /*return*/, Promise.resolve(this.SmplPopupService.fetchAll(url)).catch((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { _this.lockScreenService.unlock(); })).then((/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            _this.codes = response.data;
                            _this.codesHeader = Object.values(response.header);
                            _this.dataTitle = response.title;
                            /** @type {?} */
                            var ok = _this.checkValue(value || _this.value);
                            /** @type {?} */
                            var result = "";
                            if (ok) {
                                if (value || _this.value) {
                                    result = _this.setName(value || _this.value);
                                }
                                if (_this.dataCache) {
                                    _this.SmplPopupService.setMasterData(url, response);
                                }
                            }
                            _this.isBusy = false;
                            return new Promise((/**
                             * @param {?} resolve
                             * @return {?}
                             */
                            function (resolve) {
                                resolve(result);
                                _this.lockScreenService.unlock();
                            }));
                        }))];
                });
            });
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHFormPopup.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceSign(event);
        };
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         */
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        SHFormPopup.prototype.openDialog = /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        function () {
            var _this = this;
            // valueの値を一時対比　ダイアログを閉じる際に比較します
            /** @type {?} */
            var tmp = this.value;
            if (!this.popupWidth &&
                this.codes.length != 0 &&
                Object.values(this.codes[0]).length >= 4) {
                this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
            }
            this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                height: ShCtlConst.DIALOG_HEIGHT,
                width: this.extendWidth,
                data: {
                    dataTitle: this.dataTitle,
                    codes: this.codes,
                    codesHeader: this.codesHeader,
                    hiddenColumns: this.hiddenColumns,
                },
            });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    _this.setValueName(result);
                    //this.allocateToInputValue(result);
                    _this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: _this.bindColumnArray,
                        record: result,
                    });
                    _this.bindCtlService.setBindValue({
                        bindColumnArray: _this.bindColumnArray,
                        record: result,
                    });
                    _this.noChangeFlg = "ON";
                    //changeイベント経由でemitすると無条件でafterChangeイベントが呼ばれるので
                    //値を比較し変更がなければこのタイミングでemitする
                    /** @type {?} */
                    var resultValues = Object.values(result);
                    if (resultValues && resultValues.includes(tmp)) {
                        _this.valueChange.emit(_this.value);
                        return;
                    }
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.dispatchOwnValueInputChangeEvent();
                    }), 0);
                }
            }));
        };
        /**
         *@ 自身のvalueに紐づくinputのチェンジイベントを発火
         */
        /**
         * \@ 自身のvalueに紐づくinputのチェンジイベントを発火
         * @private
         * @return {?}
         */
        SHFormPopup.prototype.dispatchOwnValueInputChangeEvent = /**
         * \@ 自身のvalueに紐づくinputのチェンジイベントを発火
         * @private
         * @return {?}
         */
        function () {
            if (this.ownValueInputElm) {
                this.ownValueInputElm.dispatchEvent(new Event("change"));
            }
        };
        /**
         *@ bind先のinputがnullかどうか
         */
        /**
         * \@ bind先のinputがnullかどうか
         * @param {?} bindColumnArray
         * @return {?}
         */
        SHFormPopup.prototype.isBindInputNull = /**
         * \@ bind先のinputがnullかどうか
         * @param {?} bindColumnArray
         * @return {?}
         */
        function (bindColumnArray) {
            if (!bindColumnArray || bindColumnArray.length == 0)
                return true;
            return bindColumnArray
                .map((/**
             * @param {?} bindColumnData
             * @return {?}
             */
            function (bindColumnData) {
                return (/** @type {?} */ (document.querySelector("input[name=" + Object.keys(bindColumnData)[0] + "]")));
            }))
                .map((/**
             * @param {?} bindInput
             * @return {?}
             */
            function (bindInput) {
                if (!bindInput)
                    return false;
                return !!bindInput.value;
            }))
                .includes(false);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHFormPopup.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeClick(event);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterClick(event);
            }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHFormPopup.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterFocus(event);
            }), 0);
        };
        /**
         * @return {?}
         */
        SHFormPopup.prototype.clearAll = /**
         * @return {?}
         */
        function () {
            this.value = "";
            this.name = "";
            if (this.ownLabelInputElm) {
                this.ownLabelInputElm.value = "";
            }
            this.valueChange.emit("");
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHFormPopup.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            if (!event.target.value) {
                this.clearAll();
            }
            /** @type {?} */
            var flg = false;
            if (this.noChangeFlg == "OFF") {
                flg = true;
                if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                    event.target.value) {
                    this.noChangeFlg = "ON";
                    this.fetchCodes(this.apiUrl, this.toText(event.target.value)).then((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        _this.valueChange.emit(value);
                        event.target.value = _this.toText(event.target.value);
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.onAfterChange(event);
                        }), 0);
                    }));
                }
                else {
                    event.target.value = this.setName(event.target.value);
                    this.valueChange.emit(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.onAfterChange(event);
                    }), 0);
                }
            }
            if (!flg) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.valueChange.emit(event.target.value);
                    _this.onAfterChange(event);
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.noChangeFlg = "OFF";
                    }), 1000);
                }), 0);
            }
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHFormPopup.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterBlur(event);
            }), 0);
        };
        /**
         *手入力の値からの検索結果が複数あった場合はアラートを出す
         */
        /**
         * 手入力の値からの検索結果が複数あった場合はアラートを出す
         * @param {?} value
         * @return {?}
         */
        SHFormPopup.prototype.checkValue = /**
         * 手入力の値からの検索結果が複数あった場合はアラートを出す
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (!value)
                return false;
            //let matchedArray = [];
            if (this.codes[0]) {
                /** @type {?} */
                var filterResult = this.codes.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    //this.hasMatchRecords(element, value)
                    return Object.values(element)[_this.bindColumnKey - 1] == value;
                }));
                if (filterResult.length == 0) {
                    this.clearValue();
                    this.valueChange.emit("");
                    return false;
                }
                if (filterResult.length >= 2) {
                    alert(value + "に複数の候補が検出されました");
                    this.clearValue();
                    this.valueChange.emit("");
                    return false;
                }
            }
            return true;
        };
        /**
         * マスタ情報よりコードを取得
         */
        /**
         * マスタ情報よりコードを取得
         * @return {?}
         */
        SHFormPopup.prototype.getCodes = /**
         * マスタ情報よりコードを取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.openDialog();
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0) {
                this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.codes = response.data;
                    _this.codesHeader = Object.values(response.header);
                    _this.dataTitle = response.title;
                    if (_this.dataCache)
                        _this.SmplPopupService.setMasterData(_this.apiUrl, response);
                    if (!_this.dialogRef)
                        return;
                    if (_this.dialogRef.componentInstance) {
                        _this.dialogRef.componentInstance.codesHeader = _this.codesHeader;
                        _this.dialogRef.componentInstance.unchangeableCodes = _this.codes;
                        _this.dialogRef.componentInstance.codes = _this.codes;
                        _this.dialogRef.componentInstance.dataTitle = _this.dataTitle;
                        if (!_this.popupWidth && Object.values(_this.codes[0]).length >= 4) {
                            _this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                        }
                        _this.dialogRef.updateSize(_this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                        /** @type {?} */
                        var cols_1 = [];
                        _this.dialogRef.componentInstance
                            .getHashKeys()
                            .forEach((/**
                         * @param {?} name
                         * @param {?} idx
                         * @return {?}
                         */
                        function (name, idx) {
                            if (!_this.hiddenColumns.find((/**
                             * @param {?} _
                             * @return {?}
                             */
                            function (_) { return _ == idx + 1; })))
                                cols_1.push(name);
                        }));
                        _this.dialogRef.componentInstance.displayedColumns = cols_1;
                    }
                }));
            }
            else {
                this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                this.codesHeader = Object.values(Object(this.SmplPopupService.getMasterData(this.apiUrl)).header);
                if (this.dialogRef.componentInstance) {
                    this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                    this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                    this.dialogRef.componentInstance.codes = this.codes;
                    this.dialogRef.componentInstance.dataTitle = this.dataTitle;
                    if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                        this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                    }
                    this.dialogRef.updateSize(this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                    /** @type {?} */
                    var cols_2 = [];
                    this.dialogRef.componentInstance.getHashKeys().forEach((/**
                     * @param {?} name
                     * @param {?} idx
                     * @return {?}
                     */
                    function (name, idx) {
                        if (!_this.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { return _ == idx + 1; })))
                            cols_2.push(name);
                    }));
                    this.dialogRef.componentInstance.displayedColumns = cols_2;
                }
            }
        };
        /**
         * 自コントロールのinput value に値を渡す
         * @param matchedArray
         */
        /**
         * 自コントロールのinput value に値を渡す
         * @param {?} matchedArray
         * @return {?}
         */
        SHFormPopup.prototype.setValueName = /**
         * 自コントロールのinput value に値を渡す
         * @param {?} matchedArray
         * @return {?}
         */
        function (matchedArray) {
            if (Object.values(matchedArray)[this.bindColumnKey - 1]) {
                /** @type {?} */
                var val = Object.values(matchedArray)[this.bindColumnKey - 1].toString();
                this.value = val;
            }
            else {
                this.value = "";
            }
            if (Object.values(matchedArray)[this.bindColumnValue - 1]) {
                this.name = Object.values(matchedArray)[this.bindColumnValue - 1].toString();
            }
            else {
                this.name = "";
            }
        };
        /**
         *親子関係になっているinputがある場合に検索対象を親まで広げる
         */
        /**
         * 親子関係になっているinputがある場合に検索対象を親まで広げる
         * @private
         * @param {?} element
         * @param {?} val
         * @return {?}
         */
        SHFormPopup.prototype.hasMatchRecords = /**
         * 親子関係になっているinputがある場合に検索対象を親まで広げる
         * @private
         * @param {?} element
         * @param {?} val
         * @return {?}
         */
        function (element, val) {
            // 検索結果一行分の比較すべき列の値
            /** @type {?} */
            var searchs = [];
            // 現在の比較すべき値
            /** @type {?} */
            var values = [val];
            searchs.push(Object.values(element)[this.bindColumnKey - 1]);
            if (this.bindColumnArray && this.bindColumnArray.length != 0) {
                this.bindColumnArray.forEach((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    /** @type {?} */
                    var bindIndex = ((/** @type {?} */ (Object.values(data)[0]))) - 1;
                    searchs.push(Object.values(element)[bindIndex]);
                    /** @type {?} */
                    var targetInput = (/** @type {?} */ (document.querySelector("input[name=" + Object.keys(data)[0] + "]")));
                    if (targetInput) {
                        if (targetInput.value) {
                            values.push(targetInput.value);
                        }
                        else {
                            searchs = searchs.filter((/**
                             * @param {?} val
                             * @return {?}
                             */
                            function (val) { return val != Object.values(element)[bindIndex]; }));
                        }
                    }
                }));
            }
            /** @type {?} */
            var result = searchs.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return values.includes(val); }));
            return !result.includes(false);
        };
        /**
         * 選択された区分コードに紐づく区分名を設定
         */
        /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        SHFormPopup.prototype.setName = /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            /** @type {?} */
            var record = this.codes
                ? this.codes.find((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return Object.values(element)[_this.bindColumnKey - 1] == val; }))
                : null;
            if (record) {
                /** @type {?} */
                var kbnValue = Object.values(record)[this.bindColumnValue - 1];
                this.name = kbnValue ? kbnValue.toString() : "";
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record: record,
                });
            }
            else {
                val = "";
                this.clearAll();
            }
            return val;
        };
        /**
         * 入力のクリア
         */
        /**
         * 入力のクリア
         * @return {?}
         */
        SHFormPopup.prototype.clearValue = /**
         * 入力のクリア
         * @return {?}
         */
        function () {
            var _this = this;
            this.value = "";
            this.name = "";
            if (this.ctlName) {
                this.ownValueInputElm.value = "";
                //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.ownValueInputElm.dispatchEvent(new Event("change"));
                    _this.ownValueInputElm.dispatchEvent(new Event("focus"));
                }), 0);
            }
            if (this.popupLabelName) {
                this.ownLabelInputElm.value = "";
            }
        };
        /**
         * サブクラスでオーバーライドして使うので消さない
         */
        /**
         * サブクラスでオーバーライドして使うので消さない
         * @param {?} s
         * @return {?}
         */
        SHFormPopup.prototype.toText = /**
         * サブクラスでオーバーライドして使うので消さない
         * @param {?} s
         * @return {?}
         */
        function (s) {
            return s;
        };
        /**
         * @param {?} result
         * @return {?}
         */
        SHFormPopup.prototype.extractBindValue = /**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (!result)
                return;
            return Object.values(result)[this.bindColumnKey - 1];
        };
        SHFormPopup.propDecorators = {
            dataTitle: [{ type: core.Input }],
            dataKbnName: [{ type: core.Input }],
            apiUrl: [{ type: core.Input }],
            bindColumnKey: [{ type: core.Input }],
            bindColumnValue: [{ type: core.Input }],
            ctlName: [{ type: core.Input }],
            popupLabelName: [{ type: core.Input }],
            bindColumnArray: [{ type: core.Input }],
            hiddenInput: [{ type: core.Input }],
            hiddenLabel: [{ type: core.Input }],
            hiddenPopupButton: [{ type: core.Input }],
            dataCache: [{ type: core.Input }],
            hiddenColumns: [{ type: core.Input }],
            popupWidth: [{ type: core.Input }]
        };
        return SHFormPopup;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHFormPopup.prototype.dataTitle;
        /** @type {?} */
        SHFormPopup.prototype.dataKbnName;
        /** @type {?} */
        SHFormPopup.prototype.apiUrl;
        /** @type {?} */
        SHFormPopup.prototype.bindColumnKey;
        /** @type {?} */
        SHFormPopup.prototype.bindColumnValue;
        /** @type {?} */
        SHFormPopup.prototype.ctlName;
        /** @type {?} */
        SHFormPopup.prototype.popupLabelName;
        /** @type {?} */
        SHFormPopup.prototype.bindColumnArray;
        /** @type {?} */
        SHFormPopup.prototype.hiddenInput;
        /** @type {?} */
        SHFormPopup.prototype.hiddenLabel;
        /** @type {?} */
        SHFormPopup.prototype.hiddenPopupButton;
        /** @type {?} */
        SHFormPopup.prototype.dataCache;
        /** @type {?} */
        SHFormPopup.prototype.hiddenColumns;
        /** @type {?} */
        SHFormPopup.prototype.popupWidth;
        /** @type {?} */
        SHFormPopup.prototype.name;
        /** @type {?} */
        SHFormPopup.prototype.event;
        /** @type {?} */
        SHFormPopup.prototype.codes;
        /** @type {?} */
        SHFormPopup.prototype.codesHeader;
        /** @type {?} */
        SHFormPopup.prototype.extendWidth;
        /** @type {?} */
        SHFormPopup.prototype.dialogRef;
        /** @type {?} */
        SHFormPopup.prototype.initFetchFlg;
        /** @type {?} */
        SHFormPopup.prototype.noChangeFlg;
        /** @type {?} */
        SHFormPopup.prototype.isBusy;
        /**
         * @type {?}
         * @protected
         */
        SHFormPopup.prototype.SmplPopupService;
        /**
         * @type {?}
         * @protected
         */
        SHFormPopup.prototype.dialog;
        /**
         * @type {?}
         * @protected
         */
        SHFormPopup.prototype.bindCtlService;
        /**
         * @type {?}
         * @protected
         */
        SHFormPopup.prototype.lockScreenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * ShCtl　Api通信クラス
     */
    var ShCtlApiService = /** @class */ (function () {
        function ShCtlApiService(apiComService) {
            this.apiComService = apiComService;
        }
        /**
        * API返却結果に応じて処理分岐を行い、ApplicationDataのみを返却する
        * @param apiResponse API返却結果
        * @return API返却結果のApplicationData
        */
        /**
         * API返却結果に応じて処理分岐を行い、ApplicationDataのみを返却する
         * @private
         * @template T
         * @param {?} apiResponseBody
         * @return {?} API返却結果のApplicationData
         */
        ShCtlApiService.prototype.getApplicationData = /**
         * API返却結果に応じて処理分岐を行い、ApplicationDataのみを返却する
         * @private
         * @template T
         * @param {?} apiResponseBody
         * @return {?} API返却結果のApplicationData
         */
        function (apiResponseBody) {
            //バリデーション処理
            //アラート処理
            //システムに返す際は処理に必要なデータだけにする
            return apiResponseBody.applicationData;
        };
        /**
        * GET
        * @param url ApiUrl
        * @return API返却結果
        */
        /**
         * GET
         * @template T
         * @param {?} url ApiUrl
         * @return {?} API返却結果
         */
        ShCtlApiService.prototype.get = /**
         * GET
         * @template T
         * @param {?} url ApiUrl
         * @return {?} API返却結果
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var ret;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ret = null;
                            return [4 /*yield*/, this.apiComService.get(url, false)
                                    .then((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    ret = _this.getApplicationData(response);
                                }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        };
        /**
        * POST
        * @param url ApiUrl
        * @param data データ
        * @return API返却結果
        */
        /**
         * POST
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @return {?} API返却結果
         */
        ShCtlApiService.prototype.post = /**
         * POST
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @return {?} API返却結果
         */
        function (url, data) {
            return __awaiter(this, void 0, void 0, function () {
                var ret;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ret = null;
                            return [4 /*yield*/, this.apiComService.post(url, data)
                                    .then((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    ret = _this.getApplicationData(response);
                                }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        };
        /**
        * PUT
        * @param url ApiUrl
        * @param data データ
        * @return API返却結果
        */
        /**
         * PUT
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @return {?} API返却結果
         */
        ShCtlApiService.prototype.put = /**
         * PUT
         * @template T
         * @param {?} url ApiUrl
         * @param {?} data データ
         * @return {?} API返却結果
         */
        function (url, data) {
            return __awaiter(this, void 0, void 0, function () {
                var ret;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ret = null;
                            return [4 /*yield*/, this.apiComService.put(url, data)
                                    .then((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    ret = _this.getApplicationData(response);
                                }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        };
        /**
        * DELETE
        * @param url ApiUrl
        * @return API返却結果
        */
        /**
         * DELETE
         * @template T
         * @param {?} url ApiUrl
         * @return {?} API返却結果
         */
        ShCtlApiService.prototype.delete = /**
         * DELETE
         * @template T
         * @param {?} url ApiUrl
         * @return {?} API返却結果
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var ret;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ret = null;
                            return [4 /*yield*/, this.apiComService.delete(url)
                                    .then((/**
                                 * @param {?} response
                                 * @return {?}
                                 */
                                function (response) {
                                    ret = _this.getApplicationData(response);
                                }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        };
        ShCtlApiService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShCtlApiService.ctorParameters = function () { return [
            { type: shHttpClient.ShHttpClientService }
        ]; };
        /** @nocollapse */ ShCtlApiService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ShCtlApiService_Factory() { return new ShCtlApiService(core.ɵɵinject(shHttpClient.ShHttpClientService)); }, token: ShCtlApiService, providedIn: "root" });
        return ShCtlApiService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShCtlApiService.prototype.apiComService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 区分マスタの情報を取得
     */
    var SmplPopupService = /** @class */ (function () {
        function SmplPopupService(apiComService) {
            this.apiComService = apiComService;
            this.popupCdSubject = new rxjs.Subject();
            this.popupCdState = this.popupCdSubject.asObservable();
            //汎用マスタ
            this.masterCache = [];
        }
        /**
         * 汎用マスタ取得
         */
        /**
         * 汎用マスタ取得
         * @param {?} url
         * @return {?}
         */
        SmplPopupService.prototype.fetchAll = /**
         * 汎用マスタ取得
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.apiComService.get(url)];
                });
            });
        };
        /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param key マスタの名前
         */
        /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param {?} key マスタの名前
         * @return {?}
         */
        SmplPopupService.prototype.getMasterData = /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param {?} key マスタの名前
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var cache = this.masterCache.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.masterName == key;
            }));
            return cache.length > 0 ? cache[0].masterCache : [];
        };
        /**
         * マスタデータをキャッシュする
         * @param key マスタの名前
         * @param masterData マスタデータ
         */
        /**
         * マスタデータをキャッシュする
         * @param {?} key マスタの名前
         * @param {?} masterData マスタデータ
         * @return {?}
         */
        SmplPopupService.prototype.setMasterData = /**
         * マスタデータをキャッシュする
         * @param {?} key マスタの名前
         * @param {?} masterData マスタデータ
         * @return {?}
         */
        function (key, masterData) {
            var e_1, _a;
            if (this.masterCache.length > 0) {
                try {
                    for (var _b = __values(this.masterCache), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.masterName == key) {
                            item.masterCache = masterData;
                            break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
        };
        SmplPopupService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        SmplPopupService.ctorParameters = function () { return [
            { type: ShCtlApiService }
        ]; };
        /** @nocollapse */ SmplPopupService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SmplPopupService_Factory() { return new SmplPopupService(core.ɵɵinject(ShCtlApiService)); }, token: SmplPopupService, providedIn: "root" });
        return SmplPopupService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SmplPopupService.prototype.popupCdSubject;
        /** @type {?} */
        SmplPopupService.prototype.popupCdState;
        /**
         * @type {?}
         * @private
         */
        SmplPopupService.prototype.masterCache;
        /**
         * @type {?}
         * @private
         */
        SmplPopupService.prototype.apiComService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NoChangeFlg = (/** @type {?} */ ({
        ON: "ON",
        OFF: "OFF"
    }));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BindCtlService = /** @class */ (function () {
        function BindCtlService() {
            this.NO_CHANGE_FLG_SUFFIX = ShCtlConst.NO_CHANGE.FLG_SUFFIX;
        }
        /**
         * @param {?} param
         * @return {?}
         */
        BindCtlService.prototype.setNoChangeFlg = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            var _this = this;
            if (this.isParamEmpty(param))
                return;
            /** @type {?} */
            var info = this.generateBindInputInfo(param);
            info.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var targetInput = (/** @type {?} */ (document.querySelector("input[name=" + data.ctlName + "_" + _this.NO_CHANGE_FLG_SUFFIX + "],textarea[name=" + data.ctlName + "_" + _this.NO_CHANGE_FLG_SUFFIX + "]")));
                if (!targetInput)
                    return;
                targetInput.value = NoChangeFlg.ON;
                targetInput.dispatchEvent(new Event("change"));
            }));
        };
        /**
         * @param {?} param
         * @return {?}
         */
        BindCtlService.prototype.setBindValue = /**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            if (this.isParamEmpty(param))
                return;
            /** @type {?} */
            var info = this.generateBindInputInfo(param);
            info.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var targetInput = (/** @type {?} */ (document.querySelector("input[name=" + data.ctlName + "],textarea[name=" + data.ctlName + "]")));
                if (!targetInput)
                    return;
                targetInput.value = data.value;
                targetInput.dispatchEvent(new Event("change"));
            }));
        };
        /**
         * @private
         * @param {?} param
         * @return {?}
         */
        BindCtlService.prototype.generateBindInputInfo = /**
         * @private
         * @param {?} param
         * @return {?}
         */
        function (param) {
            return param.bindColumnArray.map((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var column = Number(Object.values(data)[0]);
                return {
                    ctlName: Object.keys(data)[0],
                    value: isNaN(Number(column)) ? "" : (/** @type {?} */ (Object.values(param.record)[column - 1])),
                };
            }));
        };
        /**
         * @private
         * @param {?} param
         * @return {?}
         */
        BindCtlService.prototype.isParamEmpty = /**
         * @private
         * @param {?} param
         * @return {?}
         */
        function (param) {
            if (!param.bindColumnArray || param.bindColumnArray.length == 0)
                return true;
            if (!param.record)
                return true;
            return false;
        };
        BindCtlService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: "root",
                    },] }
        ];
        /** @nocollapse */
        BindCtlService.ctorParameters = function () { return []; };
        /** @nocollapse */ BindCtlService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function BindCtlService_Factory() { return new BindCtlService(); }, token: BindCtlService, providedIn: "root" });
        return BindCtlService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        BindCtlService.prototype.NO_CHANGE_FLG_SUFFIX;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LockScreenService = /** @class */ (function () {
        /**
        * コンストラクタ
        */
        function LockScreenService() {
            this.isConnecting = false;
            this.isConnectingSubject = new rxjs.Subject();
            this.isConnectingState = this.isConnectingSubject.asObservable();
            this.count = 0;
        }
        /**
        * 画面をロックする(ユーザーが操作出来ないようにする)
        */
        /**
         * 画面をロックする(ユーザーが操作出来ないようにする)
         * @return {?}
         */
        LockScreenService.prototype.lockScreen = /**
         * 画面をロックする(ユーザーが操作出来ないようにする)
         * @return {?}
         */
        function () {
            this.count += 1;
            if (this.count === 1) {
                this.isConnecting = true;
                this.isConnectingSubject.next(this.isConnecting);
            }
        };
        /**
        * 画面のロックを解除する(ユーザーが操作出来る状態にする)
        */
        /**
         * 画面のロックを解除する(ユーザーが操作出来る状態にする)
         * @return {?}
         */
        LockScreenService.prototype.unlock = /**
         * 画面のロックを解除する(ユーザーが操作出来る状態にする)
         * @return {?}
         */
        function () {
            this.count -= 1;
            if (this.count === 0) {
                this.isConnecting = false;
                this.isConnectingSubject.next(this.isConnecting);
            }
        };
        LockScreenService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LockScreenService.ctorParameters = function () { return []; };
        /** @nocollapse */ LockScreenService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LockScreenService_Factory() { return new LockScreenService(); }, token: LockScreenService, providedIn: "root" });
        return LockScreenService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        LockScreenService.prototype.isConnecting;
        /**
         * @type {?}
         * @private
         */
        LockScreenService.prototype.isConnectingSubject;
        /** @type {?} */
        LockScreenService.prototype.isConnectingState;
        /** @type {?} */
        LockScreenService.prototype.count;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlJigCodeComponent = /** @class */ (function (_super) {
        __extends(SHCtlJigCodeComponent, _super);
        function SHCtlJigCodeComponent(smplPopupService, dialog, bindCtlService, lockScreenService) {
            var _this = _super.call(this, smplPopupService, dialog, bindCtlService, lockScreenService) || this;
            _this.smplPopupService = smplPopupService;
            _this.dialog = dialog;
            _this.bindCtlService = bindCtlService;
            _this.lockScreenService = lockScreenService;
            _this.ctlName = "SHCtlJigCode";
            _this.maxlength = 6;
            return _this;
        }
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlJigCodeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.replaceSign(event);
            SHCtlCommon.sliceLength(event, this.maxlength);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlJigCodeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toText(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlJigCodeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * 3桁入力時に残りを補完する
         * @param jigCode 事業所コード
         */
        /**
         * 3桁入力時に残りを補完する
         * @param {?} jigCode 事業所コード
         * @return {?}
         */
        SHCtlJigCodeComponent.prototype.toText = /**
         * 3桁入力時に残りを補完する
         * @param {?} jigCode 事業所コード
         * @return {?}
         */
        function (jigCode) {
            // ブランクなら
            if (SHCtlCommon.isBlank(jigCode))
                return "";
            // 6桁は処理しない
            if (jigCode.trim().length == 6)
                return jigCode;
            /** @type {?} */
            var result = null;
            if (jigCode.trim().length == 3) {
                /** @type {?} */
                var firstString = parseInt((Number(jigCode.substr(0, 1)) * 9).toString(), 10);
                // 一文字目
                /** @type {?} */
                var secondString = parseInt((Number(jigCode.substr(1, 1)) * 8).toString(), 10);
                // 弐文字目
                /** @type {?} */
                var thirdString = parseInt((Number(jigCode.substr(2, 1)) * 7).toString(), 10);
                // 参文字目
                /** @type {?} */
                var strNo = firstString + secondString + thirdString;
                /** @type {?} */
                var lastStrting = strNo.toString().substr(strNo.toString().length - 1, 1);
                // one + two + three + '00' + lastNo
                result = jigCode + "00" + lastStrting;
            }
            else {
                result = "";
            }
            return result;
        };
        SHCtlJigCodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-jig-code',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input [required]=\"required\" #inputElm matInput (input)=\"onInput($event)\"\r\n          (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n          class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"result-container\" style=\"width: 66.6%;\">\r\n        <input class=\"result-input {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n        attr.name=\"{{popupLabelName}}\" [ngClass]=\"objClass\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}\r\n    </span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input [required]=\"required\" #inputElm matInput (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n        class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n      attr.name=\"{{popupLabelName}}\" [ngClass]=\"objClass\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis;padding-right:10%}.display-ctl-view{display:-webkit-box;display:flex}.display-block{display:inline-block}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlJigCodeComponent.ctorParameters = function () { return [
            { type: SmplPopupService },
            { type: material.MatDialog },
            { type: BindCtlService },
            { type: LockScreenService }
        ]; };
        return SHCtlJigCodeComponent;
    }(SHFormPopup));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        SHCtlJigCodeComponent.prototype.smplPopupService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJigCodeComponent.prototype.dialog;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJigCodeComponent.prototype.bindCtlService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJigCodeComponent.prototype.lockScreenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Data$1() { }
    if (false) {
        /** @type {?} */
        Data$1.prototype.dataTitle;
        /** @type {?} */
        Data$1.prototype.value;
        /** @type {?} */
        Data$1.prototype.uniqueColumns;
        /** @type {?} */
        Data$1.prototype.hiddenColumns;
    }
    var SHCtlPopupDialogMultiComponent = /** @class */ (function () {
        function SHCtlPopupDialogMultiComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.displayedColumns = [];
            this.name = "";
            this.uniqueStr = "";
            this.selection = new collections.SelectionModel(true, []);
        }
        /**
         * 値がバインドされる時に呼ばれる
         */
        /**
         * 値がバインドされる時に呼ばれる
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.ngOnInit = /**
         * 値がバインドされる時に呼ばれる
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
        * 値の初期化
        */
        /**
         * 値の初期化
         * @private
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.init = /**
         * 値の初期化
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.dataTitle = this.data.dataTitle;
            if (this.data.value)
                this.data.value.forEach((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return _this.selection.select(row); }));
            /** @type {?} */
            var cols = ['select'];
            this.getHashKeys().forEach((/**
             * @param {?} name
             * @param {?} idx
             * @return {?}
             */
            function (name, idx) {
                if (!_this.data.hiddenColumns.find((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) { return _ == (idx + 1); })))
                    cols.push(name);
            }));
            this.displayedColumns = cols;
            this.uniqueStr = SHCtlCommon.getUniqueStr();
        };
        /**
        * テーブルのヘッダーを編集
        */
        /**
         * テーブルのヘッダーを編集
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.ngAfterViewChecked = /**
         * テーブルのヘッダーを編集
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headerElement = document.getElementsByTagName('th');
            /** @type {?} */
            var countBlank = 0;
            if (!this.codesHeader)
                return;
            for (var i = 0; i < headerElement.length; i++) {
                if (this.codesHeader[i] != "") {
                    for (var e = 1; e <= countBlank; e++) {
                        headerElement[i - e].style.display = 'none';
                    }
                    countBlank = 0;
                }
                else if (this.codesHeader[i] === "") {
                    countBlank += 1;
                    headerElement[i - countBlank].colSpan = countBlank + 1;
                    headerElement[i - countBlank].style.textAlign = 'center';
                    if (i === headerElement.length - 1) {
                        for (var j = 0; j < countBlank; j++) {
                            headerElement[i - j].style.display = 'none';
                        }
                    }
                }
            }
        };
        /**
         * チェックボックス選択
         */
        /**
         * チェックボックス選択
         * @param {?} row
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.itemSelect = /**
         * チェックボックス選択
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (!this.isItemSelected(row))
                this.selection.select(row);
        };
        /**
         * 行選択によるチェックボックス値の操作
         */
        /**
         * 行選択によるチェックボックス値の操作
         * @param {?} row
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.itemToggle = /**
         * 行選択によるチェックボックス値の操作
         * @param {?} row
         * @return {?}
         */
        function (row) {
            var _this = this;
            if (!this.isItemSelected(row))
                this.selection.select(row);
            else {
                /** @type {?} */
                var keys_1 = Object.keys(row);
                /** @type {?} */
                var item = this.selection.selected.find((/**
                 * @param {?} _
                 * @return {?}
                 */
                function (_) {
                    /** @type {?} */
                    var isSame = true;
                    keys_1.forEach((/**
                     * @param {?} key
                     * @param {?} idx
                     * @return {?}
                     */
                    function (key, idx) {
                        if (_this.data.uniqueColumns.find((/**
                         * @param {?} __
                         * @return {?}
                         */
                        function (__) { return __ == (idx + 1); }))) {
                            if (_[key] != row[key]) {
                                isSame = false;
                                return;
                            }
                        }
                    }));
                    return isSame;
                }));
                this.selection.deselect(item);
            }
        };
        /**
         * 項目を選択しているかどうか
         */
        /**
         * 項目を選択しているかどうか
         * @param {?} row
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.isItemSelected = /**
         * 項目を選択しているかどうか
         * @param {?} row
         * @return {?}
         */
        function (row) {
            var _this = this;
            if (!this.selection.selected)
                return false;
            /** @type {?} */
            var keys = Object.keys(row);
            /** @type {?} */
            var item = this.selection.selected.find((/**
             * @param {?} _
             * @return {?}
             */
            function (_) {
                /** @type {?} */
                var isSame = true;
                keys.forEach((/**
                 * @param {?} key
                 * @param {?} idx
                 * @return {?}
                 */
                function (key, idx) {
                    if (_this.data.uniqueColumns.find((/**
                     * @param {?} __
                     * @return {?}
                     */
                    function (__) { return __ == (idx + 1); }))) {
                        if (_[key] != row[key]) {
                            isSame = false;
                            return;
                        }
                    }
                }));
                return isSame;
            }));
            return item ? true : false;
        };
        /**
         * ダイアログを閉じる
         */
        /**
         * ダイアログを閉じる
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.closeDialog = /**
         * ダイアログを閉じる
         * @return {?}
         */
        function () {
            //ダイアログを閉める時に抽入値を親に渡す
            this.dialogRef.close();
        };
        /**
         * ポップアップから選択されたデータを親に返す
         * @param item
         */
        /**
         * ポップアップから選択されたデータを親に返す
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.returnDialog = /**
         * ポップアップから選択されたデータを親に返す
         * @return {?}
         */
        function () {
            //ダイアログを閉める時に選択値を親に渡す
            this.dialogRef.close(this.selection.selected);
        };
        /**
         * 全ての項目を選択しているかどうか
         */
        /**
         * 全ての項目を選択しているかどうか
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.isAllSelected = /**
         * 全ての項目を選択しているかどうか
         * @return {?}
         */
        function () {
            /** @type {?} */
            var numSelected = this.selection.selected.length;
            /** @type {?} */
            var numRows = this.unchangeableCodes.length;
            return numSelected === numRows;
        };
        /**
         * 全選択・全解除処理
         */
        /**
         * 全選択・全解除処理
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.masterToggle = /**
         * 全選択・全解除処理
         * @return {?}
         */
        function () {
            var _this = this;
            this.isAllSelected() ?
                this.selection.clear() :
                this.unchangeableCodes.forEach((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return _this.itemSelect(row); }));
        };
        /**
         * チェックボックスラベル
         */
        /**
         * チェックボックスラベル
         * @param {?=} row
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.checkboxLabel = /**
         * チェックボックスラベル
         * @param {?=} row
         * @return {?}
         */
        function (row) {
            if (!row) {
                return (this.isAllSelected() ? 'select' : 'deselect') + " all";
            }
            return (this.selection.isSelected(row) ? 'deselect' : 'select') + " row " + (row.position + 1);
        };
        /**
         * データのkeyを返す
         */
        /**
         * データのkeyを返す
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.getHashKeys = /**
         * データのkeyを返す
         * @return {?}
         */
        function () {
            if (!this.unchangeableCodes || this.unchangeableCodes.length == 0) {
                return;
            }
            else {
                return Object.keys(this.unchangeableCodes[0]);
            }
        };
        /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param event inputイベント
         */
        /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param {?} event inputイベント
         * @return {?}
         */
        SHCtlPopupDialogMultiComponent.prototype.filter = /**
         * ポップアップ内での曖昧検索
         * スペース区切りで1キーワードとする
         * @param {?} event inputイベント
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var filterString = event.target.value;
            /** @type {?} */
            var fileterStrArray = filterString.replace(/　/g, " ").split(" ");
            fileterStrArray = fileterStrArray.filter((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return value;
            }));
            /** @type {?} */
            var resultArray;
            resultArray = this.unchangeableCodes.concat();
            var _loop_1 = function (i) {
                /** @type {?} */
                var obj = this_1;
                resultArray = resultArray.filter((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    /** @type {?} */
                    var values = Object.values(value);
                    var _loop_2 = function (j) {
                        if (obj.data.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { return _ == (j + 1); })))
                            return "continue";
                        if (values[j] != null && values[j].toString().match(fileterStrArray[i])) {
                            return { value: true };
                        }
                    };
                    for (var j = 0; j < values.length; j++) {
                        var state_1 = _loop_2(j);
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                    return false;
                }));
            };
            var this_1 = this;
            for (var i = 0; i < fileterStrArray.length; i++) {
                _loop_1(i);
            }
            this.codes = resultArray;
        };
        SHCtlPopupDialogMultiComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-popup-multi-dialog',
                        template: "<div *ngIf=\"!unchangeableCodes\" class=\"overlay\">\r\n  <mat-spinner></mat-spinner>\r\n  <span class=\"loader-text\">Loading...</span>\r\n</div> \r\n<div class=\"sh-container\" id={{uniqueStr}}>\r\n    <h1 mat-dialog-title class=\"sh-text-center\">{{dataTitle}}</h1>\r\n    <div mat-dialog-content class=\"sh-dialog-content\">\r\n      <mat-form-field class=\"sh-width-100\">\r\n        <input matInput placeholder=\"\u691C\u7D22\u6B04\" (input)=\"filter($event)\"/>\r\n      </mat-form-field>\r\n      <div class=\"sh-dialog-table-container mat-elevation-z8\">\r\n        <table mat-table [dataSource]=\"codes\" class=\"sh-width-100\">\r\n          <ng-container matColumnDef=\"select\">\r\n            <th mat-header-cell *matHeaderCellDef>\r\n              <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\r\n                            [aria-label]=\"checkboxLabel()\">\r\n              </mat-checkbox>\r\n            </th>\r\n            <td mat-cell *matCellDef=\"let row\">\r\n              <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                            (change)=\"$event ? itemToggle(row) : null\"\r\n                            [checked]=\"isItemSelected(row)\"\r\n                            [aria-label]=\"checkboxLabel(row)\">\r\n              </mat-checkbox>\r\n            </td>\r\n          </ng-container>\r\n          <span *ngFor=\"let key of getHashKeys(); let i = index\">\r\n            <ng-container matColumnDef=\"{{key}}\">\r\n              <th mat-header-cell *matHeaderCellDef>{{codesHeader[i]}}</th>\r\n              <td mat-cell *matCellDef=\"let element\">{{element[key]}}</td>\r\n            </ng-container>\r\n          </span>\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"itemToggle(row)\"></tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div mat-dialog-actions>\r\n      <div ShFlexRow style=\"width: 100%\">\r\n        <div ShFlex [colLg]=\"50\" [colMd]=\"50\">\r\n          <button mat-raised-button (click)=\"closeDialog()\">\u623B\u308B</button>\r\n        </div>\r\n        <div ShFlex [colLg]=\"50\" [colMd]=\"50\" style=\"text-align: right; padding-right: 0px;\">\r\n          <span style=\"margin-right: 1em;\">\u9078\u629E\u6570\u3000{{selection.selected ? selection.selected.length : \"-\"}} / {{unchangeableCodes ? unchangeableCodes.length : \"-\"}}</span>\r\n          <button mat-raised-button color=\"primary\" (click)=\"returnDialog()\">\u9078\u629E</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  ",
                        styles: ["", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlPopupDialogMultiComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] }] }
        ]; };
        return SHCtlPopupDialogMultiComponent;
    }());
    if (false) {
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.displayedColumns;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.name;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.uniqueStr;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.dataTitle;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.codes;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.unchangeableCodes;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.codesHeader;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.selection;
        /**
         * @type {?}
         * @private
         */
        SHCtlPopupDialogMultiComponent.prototype.dialogRef;
        /** @type {?} */
        SHCtlPopupDialogMultiComponent.prototype.data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlJyuCodeComponent = /** @class */ (function (_super) {
        __extends(SHCtlJyuCodeComponent, _super);
        function SHCtlJyuCodeComponent(smplPopupService, dialog, bindCtlService, lockScreenService) {
            var _this = _super.call(this, smplPopupService, dialog, bindCtlService, lockScreenService) || this;
            _this.smplPopupService = smplPopupService;
            _this.dialog = dialog;
            _this.bindCtlService = bindCtlService;
            _this.lockScreenService = lockScreenService;
            _this.enabledHalfKanaInput = true;
            _this.obj = ".SHCtlJyuCode";
            _this.ctlName = "SHCtlJyuCode";
            _this.maxlength = 6;
            return _this;
        }
        /**
        * コンポーネントに値がバインドされた後で呼び出される
        * プロパティの初期化
        */
        /**
         * コンポーネントに値がバインドされた後で呼び出される
         * プロパティの初期化
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.ngOnInit = /**
         * コンポーネントに値がバインドされた後で呼び出される
         * プロパティの初期化
         * @return {?}
         */
        function () {
            this.onInit();
            if (this.popupWidth) {
                this.extendWidth = this.popupWidth;
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.replace(/[^0-9]/g, "");
            SHCtlCommon.sliceLength(event, this.maxlength);
            if (!this.enabledHalfKanaInput) {
                SHCtlCommon.replaceFullWidth(event);
            }
            event.target.value = event.target.value.replace(/["！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・"]/g, "");
            if (event.target.value.length >= 6 &&
                event.inputType != "deleteContentBackward") {
                if (isNaN(parseInt(event.target.value)) &&
                    event.target.value.length != 7) {
                    return;
                }
                return;
            }
            if (event.inputType !== "insertCompositionText") {
                SHCtlCommon.replaceSpace(event);
                SHCtlCommon.replaceSign(event);
            }
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            /** @type {?} */
            var flg = false;
            if (this.noChangeFlg == "OFF") {
                flg = true;
                if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                    event.target.value) {
                    this.fetchCodes(this.apiUrl).then((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        _this.valueChange.emit(value);
                        event.target.value = _this.toText(event.target.value);
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.onAfterChange(event);
                        }), 0);
                    }));
                }
                else {
                    this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                    event.target.value = this.setName(event.target.value);
                    this.valueChange.emit(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.onAfterChange(event);
                    }), 0);
                }
            }
            if (!flg) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    // this.noChangeFlg == `OFF`;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.noChangeFlg = "OFF";
                    }), 1000);
                    _this.valueChange.emit(event.target.value);
                    _this.onAfterChange(event);
                    event.target.value = _this.toText(event.target.value);
                }), 0);
            }
        };
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         */
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.openDialog = /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var extendWidth;
            if (this.codes) {
                if (!this.popupWidth &&
                    this.codes.length != 0 &&
                    Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                /** @type {?} */
                var rawCodes = void 0;
                /** @type {?} */
                var rawCodesArray = [];
                for (var i = 0; this.codes.length > i; i++) {
                    rawCodes = this.codes[i].contactCode;
                    rawCodesArray.push(rawCodes);
                    /** @type {?} */
                    var code = Object.values(this.codes[i])[this.bindColumnKey - 1].toString()
                        .substr(2);
                    this.codes[i].contactCode = code;
                }
                this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                    height: ShCtlConst.DIALOG_HEIGHT,
                    width: extendWidth,
                    data: {
                        dataTitle: this.dataTitle,
                        codes: this.codes,
                        codesHeader: this.codesHeader,
                        hiddenColumns: this.hiddenColumns,
                    },
                });
                this.dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.setValueName(result);
                        _this.bindCtlService.setNoChangeFlg({
                            bindColumnArray: _this.bindColumnArray,
                            record: result,
                        });
                        _this.bindCtlService.setBindValue({
                            bindColumnArray: _this.bindColumnArray,
                            record: result,
                        });
                        _this.noChangeFlg = "ON";
                        _this.valueChange.emit(_this.extractBindValue(result));
                        _this.ownValueInputElm.dispatchEvent(new Event("change"));
                    }
                }));
            }
        };
        /**
         * 選択された区分コードに紐づく区分名を設定
         */
        /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.setName = /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            /** @type {?} */
            var record;
            val = this.toText(val);
            if (val.length == 6) {
                record = this.codes.find((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    return _this.toText(Object.values(element)[_this.bindColumnKey - 1]).includes(val);
                }));
            }
            if (record != null) {
                /** @type {?} */
                var name_1 = (/** @type {?} */ (Object.values(record)[this.bindColumnValue - 1]));
                if (name_1 && val.length == 6) {
                    this.setValueName(record);
                    this.noChangeFlg = "ON";
                    this.bindCtlService.setBindValue({
                        bindColumnArray: this.bindColumnArray,
                        record: record,
                    });
                    this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: this.bindColumnArray,
                        record: record,
                    });
                    val = Object.values(record)[this.bindColumnKey - 1];
                    /** @type {?} */
                    var inputElement_1 = this.ownValueInputElm;
                    if (inputElement_1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            inputElement_1.value = _this.toText(val);
                        }), 0);
                    }
                }
            }
            else {
                val = "";
            }
            return val;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.checkValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (!value)
                return false;
            if (value.length < 6) {
                this.clearValue();
                return false;
            }
            //let matchedArray = [];
            if (this.codes[0]) {
                /** @type {?} */
                var filterResult = this.codes.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    //this.hasMatchRecords(element, value)
                    return ((/** @type {?} */ (Object.values(element)[_this.bindColumnKey - 1]))).includes(value);
                }));
                if (filterResult.length == 0) {
                    this.clearValue();
                    return false;
                }
                if (filterResult.length >= 2) {
                    alert(value + "に複数の候補が検出されました");
                    this.clearValue();
                    this.valueChange.emit("");
                    return false;
                }
            }
            return true;
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toText(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterFocus(event);
            }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterBlur(event);
            }), 0);
        };
        /**
         * onKeyUp
         * @param event KeyUp
         */
        /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.onKeyUp = /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (!event.isComposing) {
                event.target.value = this.toHankaku(this.hiraganaToKatagana(event.target.value));
            }
        };
        /**
         * 先頭除去
         * @param inputTargetValue event.target.value
         */
        /**
         * 先頭除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.toText = /**
         * 先頭除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            if (SHCtlCommon.isBlank(inputTargetValue)) {
                return "";
            }
            if (inputTargetValue.length === 8) {
                return inputTargetValue.substr(2);
            }
            return inputTargetValue;
        };
        /**
         * ひらがなをカタカナに変換
         * @param inputValue
         */
        /**
         * ひらがなをカタカナに変換
         * @param {?} inputValue
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.hiraganaToKatagana = /**
         * ひらがなをカタカナに変換
         * @param {?} inputValue
         * @return {?}
         */
        function (inputValue) {
            return inputValue.replace(/[\u3041-\u3096]/g, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                /** @type {?} */
                var chr = match.charCodeAt(0) + 0x60;
                return String.fromCharCode(chr);
            }));
        };
        /**
         * 入力文字を半角カナに変換
         * @param inputValue
         */
        /**
         * 入力文字を半角カナに変換
         * @param {?} inputValue
         * @return {?}
         */
        SHCtlJyuCodeComponent.prototype.toHankaku = /**
         * 入力文字を半角カナに変換
         * @param {?} inputValue
         * @return {?}
         */
        function (inputValue) {
            /** @type {?} */
            var half = "0123456789";
            half += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            half += "abcdefghijklmnopqrstuvwxyz";
            half += "｡､｢\\｣;:･-+|_@., ";
            half += "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮｰ";
            /** @type {?} */
            var halfArr = new Array("ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ");
            /** @type {?} */
            var full = "０１２３４５６７８９";
            full += "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ";
            full += "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ";
            full += "。、「￥」；：・－＋｜＿＠．，　";
            full +=
                "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョー";
            /** @type {?} */
            var fullArr = new Array("ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ");
            /** @type {?} */
            var str = "";
            //半角カナ用
            for (var i = 0; i < halfArr.length; i++) {
                /** @type {?} */
                var reg = new RegExp(fullArr[i], "g");
                inputValue = inputValue.replace(reg, halfArr[i]);
            }
            for (var i = 0; i < inputValue.length; i++) {
                /** @type {?} */
                var oneStr = inputValue.charAt(i);
                /** @type {?} */
                var num = full.indexOf(oneStr, 0);
                oneStr = num >= 0 ? half.charAt(num) : oneStr;
                str += oneStr;
            }
            return str;
        };
        SHCtlJyuCodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-jyu-code",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\" (keyup)=\"onKeyUp($event)\"\r\n          (change)=\"onChange($event)\" [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key {{strClass}}\"\r\n          [disabled]=\"disabled\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field style=\"width: 66.6%;\" class=\"result-container\">\r\n        <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n          attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\" (keyup)=\"onKeyUp($event)\"\r\n        (change)=\"onChange($event)\" [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\"\r\n        [disabled]=\"disabled\" (focus)=\"onFocus($event)\" maxlength=\"8\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n        attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{toText(value)}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlJyuCodeComponent.ctorParameters = function () { return [
            { type: SmplPopupService },
            { type: material.MatDialog },
            { type: BindCtlService },
            { type: LockScreenService }
        ]; };
        SHCtlJyuCodeComponent.propDecorators = {
            enabledHalfKanaInput: [{ type: core.Input }]
        };
        return SHCtlJyuCodeComponent;
    }(SHFormPopup));
    if (false) {
        /** @type {?} */
        SHCtlJyuCodeComponent.prototype.enabledHalfKanaInput;
        /** @type {?} */
        SHCtlJyuCodeComponent.prototype.obj;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJyuCodeComponent.prototype.smplPopupService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJyuCodeComponent.prototype.dialog;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJyuCodeComponent.prototype.bindCtlService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlJyuCodeComponent.prototype.lockScreenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlKatakanaComponent = /** @class */ (function (_super) {
        __extends(SHCtlKatakanaComponent, _super);
        function SHCtlKatakanaComponent() {
            var _this = _super.call(this) || this;
            //入力変換時を補足するための値保持
            _this._data = "";
            _this.ctlName = "SHCtlKatakana";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var isSameData = (this._data == event.data);
            this._data = event.data;
            //入力変換中は書き換えを行わない
            if (event.isComposing && (!event.isComposing || !isSameData))
                return;
            if (!event.isComposing) {
                if (this.maxByteLength > 0)
                    if (event.inputType !== 'insertCompositionText') {
                        this.onKeyDown(event);
                        SHCtlCommon.sliceLength(event, this.maxByteLength);
                    }
            }
        };
        /**
         * onPaste
         * @param event paste
         */
        /**
         * onPaste
         * @param {?} event paste
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onPaste = /**
         * onPaste
         * @param {?} event paste
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var obj = this;
            setTimeout((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                SHCtlCommon.replaceHalfDoubleQuote(event);
                obj.replaceFullWIdth(event);
            }), 100);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onChange
         * @param event chage
         */
        /**
         * onChange
         * @param {?} event chage
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onChange = /**
         * onChange
         * @param {?} event chage
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            this.replaceFullWIdth(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onKeyUp = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!event.isComposing) {
                SHCtlCommon.replaceHalfDoubleQuote(event);
                this.replaceFullWIdth(event);
            }
        };
        /**
         * onKeyDown
         * @param event KeyDown
         */
        /**
         * onKeyDown
         * @param {?} event KeyDown
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.onKeyDown = /**
         * onKeyDown
         * @param {?} event KeyDown
         * @return {?}
         */
        function (event) {
            _super.prototype.onKeyDown.call(this, event);
        };
        /**
         * 除去変換
         * @param event
         */
        /**
         * 除去変換
         * @param {?} event
         * @return {?}
         */
        SHCtlKatakanaComponent.prototype.replaceFullWIdth = /**
         * 除去変換
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.replace(/[ぁ-んァ-ヶ\u30e0-\u9fcfａ-ｚＡ-Ｚ１-９！”＃＄％＆’（）＝～｜￥＾－‘｛＋＊｝＜＞？＿＠「；：」、。・￥ー　]/g, "");
        };
        SHCtlKatakanaComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-katakana',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        (paste)=\"onPaste($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlKatakana can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n      (paste)=\"onPaste($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlKatakana can-moved-with-the-enter-key {{strClass}}\" [disabled]=\"disabled\"\r\n      maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlKatakanaComponent.ctorParameters = function () { return []; };
        return SHCtlKatakanaComponent;
    }(SHFormControl));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SHCtlKatakanaComponent.prototype._data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlNumberComponent = /** @class */ (function (_super) {
        __extends(SHCtlNumberComponent, _super);
        function SHCtlNumberComponent() {
            var _this = _super.call(this) || this;
            _this.min = 0;
            _this.max = 99999999999;
            _this.decimaldigit = 0;
            _this.firstFlag = true;
            _this.ctlName = "SHCtlNumber";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlNumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * @return {?}
         */
        SHCtlNumberComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var matInputElement = document.activeElement.classList.contains('mat-input-element');
            if (this.value && !matInputElement) {
                this.value = this.toText(this.value);
            }
        };
        /**
         * ngOnChangesイベント
         * 値変更時にフォーマットを整形
         * @param event input
         */
        /**
         * ngOnChangesイベント
         * 値変更時にフォーマットを整形
         * @param {?} changes
         * @return {?}
         */
        SHCtlNumberComponent.prototype.ngOnChanges = /**
         * ngOnChangesイベント
         * 値変更時にフォーマットを整形
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.value) {
                if (changes.value.currentValue) {
                    if (changes.value.currentValue === '' || changes.value.currentValue === undefined || changes.value.currentValue === String(/[^\x01-\x7E\xA1-\xDF]+$/g)) {
                        this.value = '';
                        return;
                    }
                    if (parseFloat(changes.value.currentValue) < this.min) {
                        this.value = String(this.min);
                    }
                    if (parseFloat(changes.value.currentValue) > this.max) {
                        this.value = String(this.max);
                    }
                    this.stringValue = this.toText(changes.value.currentValue);
                    this.value = parseFloat(parseFloat(changes.value.currentValue).toFixed(this.decimaldigit)).toString();
                }
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlNumberComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
            //2文字目以降の「-」の入力を受け付けない
            if (event.target.value.length > 1)
                event.target.value = event.target.value.slice(0, 1) + event.target.value.slice(1).replace(/[\-]/g, "");
            SHCtlCommon.replaceFullWidth(event);
            this.checkNumbersSigns(event);
            if (event.inputType !== 'insertCompositionText') {
                SHCtlCommon.replaceSpace(event);
                SHCtlCommon.replaceFUllSpace(event);
                SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
                SHCtlCommon.replaceFullWidth(event);
                this.checkNumbersSigns(event);
            }
        };
        /**
         * マッチした値を記号に置き換える
         * @param event input
         */
        /**
         * マッチした値を記号に置き換える
         * @param {?} event input
         * @return {?}
         */
        SHCtlNumberComponent.prototype.checkNumbersSigns = /**
         * マッチした値を記号に置き換える
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.replace(/^[\.|,]/g, "");
            event.target.value = event.target.value.replace(/[\.]{2,}/g, ".");
            event.target.value = event.target.value.replace(/[\,]{2,}/g, ",");
            event.target.value = event.target.value.replace(/[\-]{1,}/g, "-");
            if ((/\d.*\.\d.*/).test(event.target.value) && event.data === ".") {
                event.target.value = event.target.value.slice(0, event.target.value.length - 1);
            }
        };
        /**
         * 条件に沿うvalueを返す
         * @param event input
         */
        /**
         * 条件に沿うvalueを返す
         * @param {?} event input
         * @return {?}
         */
        SHCtlNumberComponent.prototype.checkMinus = /**
         * 条件に沿うvalueを返す
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            return event.target.value.match(/\d/g) && event.data === "-";
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlNumberComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlNumberComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            //onChange発火時に数値でなければクリアする
            if (isNaN(Number(event.target.value)) === true) {
                event.target.value = '';
                return;
            }
            //min maxの値を反映させる
            event.target.value = this.setMinMax(event.target.value);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlNumberComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.removeComma(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlNumberComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            //桁数指定で値を丸める
            this.onBeforeBlur(event);
            //カンマ区切り
            setTimeout((/**
             * @return {?}
             */
            function () {
                event.target.value = _this.toText(event.target.value);
            }), 100);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * カンマ付きの値を返す
         * @param inputTargetValue event.target.value
         */
        /**
         * カンマ付きの値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlNumberComponent.prototype.toText = /**
         * カンマ付きの値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            inputTargetValue = this.removeComma(inputTargetValue);
            if (!inputTargetValue)
                return null;
            if (isNaN(Number(inputTargetValue)))
                return null;
            //桁数指定で値を丸める
            /** @type {?} */
            var ret = parseFloat(parseFloat(inputTargetValue).toFixed(this.decimaldigit)).toString();
            return parseFloat(ret).toLocaleString(undefined, {
                minimumFractionDigits: this.decimaldigit,
                maximumFractionDigits: this.decimaldigit
            });
        };
        /**
         * min maxを反映した値を返す
         * @param inputTargetValue event.target.value
         */
        /**
         * min maxを反映した値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlNumberComponent.prototype.setMinMax = /**
         * min maxを反映した値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            if (!inputTargetValue)
                return "";
            if (isNaN(Number(inputTargetValue)))
                return "";
            if (parseFloat(inputTargetValue) < this.min) {
                inputTargetValue = this.min.toString();
            }
            if (parseFloat(inputTargetValue) > this.max) {
                inputTargetValue = this.max.toString();
            }
            inputTargetValue = parseFloat(parseFloat(inputTargetValue).toFixed(this.decimaldigit)).toString();
            return inputTargetValue;
        };
        /**
         * カンマを外した値を返す
         * @param inputTargetValue event.target.value
         */
        /**
         * カンマを外した値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlNumberComponent.prototype.removeComma = /**
         * カンマを外した値を返す
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            inputTargetValue = new String(inputTargetValue).replace(/,/g, "");
            return inputTargetValue;
        };
        SHCtlNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-number',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\"\r\n        value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\"\r\n      value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".item-title{margin-left:.5%;margin-right:25%}.display-ctl-view{display:-webkit-box;display:flex}.display-result{display:-webkit-box;display:flex;margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlNumberComponent.ctorParameters = function () { return []; };
        SHCtlNumberComponent.propDecorators = {
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            decimaldigit: [{ type: core.Input }]
        };
        return SHCtlNumberComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlNumberComponent.prototype.min;
        /** @type {?} */
        SHCtlNumberComponent.prototype.max;
        /** @type {?} */
        SHCtlNumberComponent.prototype.decimaldigit;
        /** @type {?} */
        SHCtlNumberComponent.prototype.stringValue;
        /** @type {?} */
        SHCtlNumberComponent.prototype.firstFlag;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlSesyuCodeComponent = /** @class */ (function (_super) {
        __extends(SHCtlSesyuCodeComponent, _super);
        function SHCtlSesyuCodeComponent() {
            var _this = _super.call(this) || this;
            _this.obj = ".SHCtlSesyuCode";
            _this.ctlName = "SHCtlSesyuCode";
            _this.maxlength = 11;
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null) {
                this.stringValue = this.toText(this.value);
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (!changes.value)
                return;
            if (changes.value.currentValue) {
                this.value = this.toText(changes.value.currentValue);
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.slice(0, this.maxlength);
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.replaceSign(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            event.target.value = this.toText(event.target.value);
            this.valueChange.emit(this.toValue(event.target.value));
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toValue(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            event.target.value = this.toText(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * 先頭零埋
         * @param inputTargetValue event.target.value
         */
        /**
         * 先頭零埋
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.toText = /**
         * 先頭零埋
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            /** @type {?} */
            var result = null;
            if (inputTargetValue.length == 0) {
                result = "";
            }
            else if (inputTargetValue.trim().length <= 9) {
                result = (("00000000" + inputTargetValue).slice(-9)) + "-" + "00";
            }
            else if (inputTargetValue.trim().length <= 11) {
                result = (("00000000" + inputTargetValue.substr(0, 9)).slice(-9)) + "-" + (("00" + inputTargetValue.substr(9)).slice(-2));
            }
            else {
                result = inputTargetValue;
            }
            return result;
        };
        /**
         * ハイフン除去
         * @param inputTargetValue event.target.value
         */
        /**
         * ハイフン除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlSesyuCodeComponent.prototype.toValue = /**
         * ハイフン除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            return new String(inputTargetValue).replace(/-/g, "");
        };
        SHCtlSesyuCodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-sesyu-code',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlSesyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlSesyuCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n      [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlSesyuCodeComponent.ctorParameters = function () { return []; };
        return SHCtlSesyuCodeComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlSesyuCodeComponent.prototype.obj;
        /** @type {?} */
        SHCtlSesyuCodeComponent.prototype.stringValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlTanCodeComponent = /** @class */ (function (_super) {
        __extends(SHCtlTanCodeComponent, _super);
        function SHCtlTanCodeComponent(smplPopupService, dialog, bindCtlService, lockScreenService) {
            var _this = _super.call(this, smplPopupService, dialog, bindCtlService, lockScreenService) || this;
            _this.smplPopupService = smplPopupService;
            _this.dialog = dialog;
            _this.bindCtlService = bindCtlService;
            _this.lockScreenService = lockScreenService;
            _this.obj = ".SHCtlTanCode";
            _this.enabledHalfKanaInput = true;
            _this.ctlName = "SHCtlTanCode";
            _this.maxlength = 6;
            return _this;
        }
        /**
         * コンポーネントに値がバインドされた後で呼び出される
         * プロパティの初期化
         */
        /**
         * コンポーネントに値がバインドされた後で呼び出される
         * プロパティの初期化
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.ngOnInit = /**
         * コンポーネントに値がバインドされた後で呼び出される
         * プロパティの初期化
         * @return {?}
         */
        function () {
            this.onInit();
            if (this.popupWidth) {
                this.extendWidth = this.popupWidth;
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            event.target.value = event.target.value.replace(/[^0-9]/g, "");
            SHCtlCommon.sliceLength(event, this.maxlength);
            if (!this.enabledHalfKanaInput) {
                SHCtlCommon.replaceFullWidth(event);
            }
            event.target.value = event.target.value.replace(/["！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・"]/g, "");
            if (event.target.value.length >= 6 &&
                event.inputType != "deleteContentBackward") {
                if (isNaN(parseInt(event.target.value)) &&
                    event.target.value.length != 7) {
                    return;
                }
                return;
            }
            if (event.inputType !== "insertCompositionText") {
                SHCtlCommon.replaceSpace(event);
                SHCtlCommon.replaceSign(event);
            }
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            /** @type {?} */
            var flg = false;
            if (this.noChangeFlg == "OFF") {
                flg = true;
                if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                    event.target.value) {
                    this.fetchCodes(this.apiUrl).then((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        _this.valueChange.emit(value);
                        event.target.value = _this.toText(event.target.value);
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            _this.onAfterChange(event);
                        }), 0);
                    }));
                }
                else {
                    this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                    event.target.value = this.setName(event.target.value);
                    this.valueChange.emit(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.onAfterChange(event);
                    }), 0);
                }
            }
            if (!flg) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    // this.noChangeFlg == `OFF`;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.noChangeFlg = "OFF";
                    }), 1000);
                    _this.valueChange.emit(event.target.value);
                    _this.onAfterChange(event);
                    event.target.value = _this.toText(event.target.value);
                }), 0);
            }
        };
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         */
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.openDialog = /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var extendWidth;
            if (this.codes) {
                if (!this.popupWidth &&
                    this.codes.length != 0 &&
                    Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                /** @type {?} */
                var rawCodes = void 0;
                /** @type {?} */
                var rawCodesArray = [];
                for (var i = 0; this.codes.length > i; i++) {
                    rawCodes = this.codes[i].contactCode;
                    rawCodesArray.push(rawCodes);
                    /** @type {?} */
                    var code = Object.values(this.codes[i])[this.bindColumnKey - 1].toString()
                        .substr(2);
                    this.codes[i].contactCode = code;
                }
                this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                    height: ShCtlConst.DIALOG_HEIGHT,
                    width: extendWidth,
                    data: {
                        dataTitle: this.dataTitle,
                        codes: this.codes,
                        codesHeader: this.codesHeader,
                        hiddenColumns: this.hiddenColumns,
                    },
                });
                this.dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.setValueName(result);
                        _this.bindCtlService.setNoChangeFlg({
                            bindColumnArray: _this.bindColumnArray,
                            record: result,
                        });
                        _this.bindCtlService.setBindValue({
                            bindColumnArray: _this.bindColumnArray,
                            record: result,
                        });
                        _this.noChangeFlg = "ON";
                        _this.valueChange.emit(_this.extractBindValue(result));
                        _this.ownValueInputElm.dispatchEvent(new Event("change"));
                    }
                }));
            }
        };
        /**
         * 選択された区分コードに紐づく区分名を設定
         */
        /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.setName = /**
         * 選択された区分コードに紐づく区分名を設定
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var _this = this;
            /** @type {?} */
            var record;
            val = this.toText(val);
            if (val.length == 6) {
                record = this.codes.find((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    return _this.toText(Object.values(element)[_this.bindColumnKey - 1]).includes(val);
                }));
            }
            if (record != null) {
                /** @type {?} */
                var name_1 = (/** @type {?} */ (Object.values(record)[this.bindColumnValue - 1]));
                if (name_1 && val.length == 6) {
                    this.setValueName(record);
                    this.noChangeFlg = "ON";
                    this.bindCtlService.setBindValue({
                        bindColumnArray: this.bindColumnArray,
                        record: record,
                    });
                    this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: this.bindColumnArray,
                        record: record,
                    });
                    val = Object.values(record)[this.bindColumnKey - 1];
                    /** @type {?} */
                    var inputElement_1 = this.ownValueInputElm;
                    if (inputElement_1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            inputElement_1.value = _this.toText(val);
                        }), 0);
                    }
                }
            }
            else {
                val = "";
            }
            return val;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.checkValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (!value)
                return false;
            if (value.length < 6) {
                this.clearValue();
                return false;
            }
            //let matchedArray = [];
            if (this.codes[0]) {
                /** @type {?} */
                var filterResult = this.codes.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    //this.hasMatchRecords(element, value)
                    return ((/** @type {?} */ (Object.values(element)[_this.bindColumnKey - 1]))).includes(value);
                }));
                if (filterResult.length == 0) {
                    this.clearValue();
                    return false;
                }
                if (filterResult.length >= 2) {
                    alert(value + "に複数の候補が検出されました");
                    this.clearValue();
                    this.valueChange.emit("");
                    return false;
                }
            }
            return true;
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toText(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterFocus(event);
            }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onAfterBlur(event);
            }), 0);
        };
        /**
         * onKeyUp
         * @param event KeyUp
         */
        /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.onKeyUp = /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (!event.isComposing) {
                event.target.value = this.toHankaku(this.hiraganaToKatagana(event.target.value));
            }
        };
        /**
         * 先頭除去
         * @param inputTargetValue event.target.value
         */
        /**
         * 先頭除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.toText = /**
         * 先頭除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            if (SHCtlCommon.isBlank(inputTargetValue)) {
                return "";
            }
            if (inputTargetValue.length === 8) {
                return inputTargetValue.substr(2);
            }
            return inputTargetValue;
        };
        /**
         * ひらがなをカタカナに変換
         * @param inputValue
         */
        /**
         * ひらがなをカタカナに変換
         * @param {?} inputValue
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.hiraganaToKatagana = /**
         * ひらがなをカタカナに変換
         * @param {?} inputValue
         * @return {?}
         */
        function (inputValue) {
            return inputValue.replace(/[\u3041-\u3096]/g, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                /** @type {?} */
                var chr = match.charCodeAt(0) + 0x60;
                return String.fromCharCode(chr);
            }));
        };
        /**
         * 入力文字を半角カナに変換
         * @param inputValue
         */
        /**
         * 入力文字を半角カナに変換
         * @param {?} inputValue
         * @return {?}
         */
        SHCtlTanCodeComponent.prototype.toHankaku = /**
         * 入力文字を半角カナに変換
         * @param {?} inputValue
         * @return {?}
         */
        function (inputValue) {
            /** @type {?} */
            var half = "0123456789";
            half += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            half += "abcdefghijklmnopqrstuvwxyz";
            half += "｡､｢\\｣;:･-+|_@., ";
            half += "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮｰ";
            /** @type {?} */
            var halfArr = new Array("ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ");
            /** @type {?} */
            var full = "０１２３４５６７８９";
            full += "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ";
            full += "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ";
            full += "。、「￥」；：・－＋｜＿＠．，　";
            full +=
                "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョー";
            /** @type {?} */
            var fullArr = new Array("ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ");
            /** @type {?} */
            var str = "";
            //半角カナ用
            for (var i = 0; i < halfArr.length; i++) {
                /** @type {?} */
                var reg = new RegExp(fullArr[i], "g");
                inputValue = inputValue.replace(reg, halfArr[i]);
            }
            for (var i = 0; i < inputValue.length; i++) {
                /** @type {?} */
                var oneStr = inputValue.charAt(i);
                /** @type {?} */
                var num = full.indexOf(oneStr, 0);
                oneStr = num >= 0 ? half.charAt(num) : oneStr;
                str += oneStr;
            }
            return str;
        };
        SHCtlTanCodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-tan-code",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n          [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n          (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field style=\"width: 66.6%;\" class=\"result-container\">\r\n        <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n          attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n        attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{toText(value)}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlTanCodeComponent.ctorParameters = function () { return [
            { type: SmplPopupService },
            { type: material.MatDialog },
            { type: BindCtlService },
            { type: LockScreenService }
        ]; };
        SHCtlTanCodeComponent.propDecorators = {
            enabledHalfKanaInput: [{ type: core.Input }]
        };
        return SHCtlTanCodeComponent;
    }(SHFormPopup));
    if (false) {
        /** @type {?} */
        SHCtlTanCodeComponent.prototype.obj;
        /** @type {?} */
        SHCtlTanCodeComponent.prototype.enabledHalfKanaInput;
        /**
         * @type {?}
         * @protected
         */
        SHCtlTanCodeComponent.prototype.smplPopupService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlTanCodeComponent.prototype.dialog;
        /**
         * @type {?}
         * @protected
         */
        SHCtlTanCodeComponent.prototype.bindCtlService;
        /**
         * @type {?}
         * @protected
         */
        SHCtlTanCodeComponent.prototype.lockScreenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlTelNoComponent = /** @class */ (function (_super) {
        __extends(SHCtlTelNoComponent, _super);
        function SHCtlTelNoComponent() {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlTelNo";
            _this.maxlength = 15;
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null) {
                this.stringValue = this.value;
            }
        };
        /**
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.sliceLength(event, this.maxlength);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlTelNoComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        SHCtlTelNoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-tel-no',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\"\r\n        attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n        [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\"\r\n      attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n      [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlTelNoComponent.ctorParameters = function () { return []; };
        return SHCtlTelNoComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlTelNoComponent.prototype.stringValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlTimeComponent = /** @class */ (function (_super) {
        __extends(SHCtlTimeComponent, _super);
        function SHCtlTimeComponent() {
            var _this = _super.call(this) || this;
            _this.obj = ".ShCtlTime";
            _this.adjust = 1;
            _this.isValidateError = false;
            _this.errorMessage = "無効な日付です";
            _this.isFirst = true;
            _this.format = SHCtlCommon.Const.timeFormat.HHMM;
            //直前の値保持
            _this.timeStrage = null;
            _this.ctlName = "SHCtlTime";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlTimeComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null) {
                /** @type {?} */
                var date = this.value.split(':');
                switch (this.format) {
                    case SHCtlCommon.Const.timeFormat.HH:
                        this.stringValue = "" + date[0];
                        break;
                    case SHCtlCommon.Const.timeFormat.HHMM:
                        this.stringValue = date[0] + ":" + (date.length > 1 ? date[1] : "00");
                        break;
                    case SHCtlCommon.Const.timeFormat.HH:
                        this.stringValue = date[0] + ":" + (date.length > 1 ? date[1] : "00") + ":" + (date.length > 2 ? date[2] : "00");
                        break;
                    default:
                        break;
                }
            }
        };
        /**
         * @return {?}
         */
        SHCtlTimeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            this.timecalculation(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            /** @type {?} */
            var val = event.target.value;
            if (val) {
                //HH形式の場合
                if (val.length == 2)
                    val += ":00:00";
                //HHMM形式の場合
                if (val.length == 5)
                    val += ":00";
            }
            if (this.timeStrage != val) {
                this.onBeforeChange(event);
                this.valueChange.emit(val);
            }
            this.timeStrage = val;
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
        };
        /**
         * onKeypress
         * @param event keypress
         */
        /**
         * onKeypress
         * @param {?} event keypress
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onKeypress = /**
         * onKeypress
         * @param {?} event keypress
         * @return {?}
         */
        function (event) {
            this.timecalculation(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlTimeComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
        };
        /**
         * キーイベント系
         * /キーを押すことで現在時刻をセット
         * @param event keypress
         */
        /**
         * キーイベント系
         * /キーを押すことで現在時刻をセット
         * @private
         * @param {?} event keypress
         * @return {?}
         */
        SHCtlTimeComponent.prototype.timecalculation = /**
         * キーイベント系
         * /キーを押すことで現在時刻をセット
         * @private
         * @param {?} event keypress
         * @return {?}
         */
        function (event) {
            if (event.key === SHCtlCommon.Const.keyCodes.signs[191]) {
                event.target.value = this.setCurrentTime();
                this.onChange(event);
            }
        };
        /**
         * 現在時刻の設定
         * @param event keypress
         */
        /**
         * 現在時刻の設定
         * @private
         * @return {?}
         */
        SHCtlTimeComponent.prototype.setCurrentTime = /**
         * 現在時刻の設定
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var newDate = new Date();
            /** @type {?} */
            var nullFirstString = null;
            /** @type {?} */
            var nullLastString = null;
            nullFirstString = SHCtlCommon.padding(newDate.getHours(), 2); // HH
            nullLastString = SHCtlCommon.padding(newDate.getMinutes(), 2); // HH:MM
            // HH:MM
            /** @type {?} */
            var stringValue = String(nullFirstString + ":" + nullLastString);
            return stringValue;
        };
        SHCtlTimeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-time',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" type=\"time\" step=\"{{format}}\" max=\"23:59\" [(ngModel)]=\"value\"\r\n        attr.name=\"{{ctlName}}\" class=\"form-control ShCtlTime can-moved-with-the-enter-key  {{strClass}}\"\r\n        (input)=\"onInput($event)\" (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\r\n        autocomplete=\"off\" (change)=\"onChange($event)\" [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\"\r\n        [class.isValidateError]=\"isValidateError\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" >\r\n      <button mat-button class=\"closeButton\" type=\"button\" *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" type=\"time\" step=\"{{format}}\" max=\"23:59\" [(ngModel)]=\"value\"\r\n      attr.name=\"{{ctlName}}\" class=\"form-control ShCtlTime can-moved-with-the-enter-key  {{strClass}}\"\r\n      (input)=\"onInput($event)\" (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\"\r\n      autocomplete=\"off\" (change)=\"onChange($event)\" [disabled]=\"disabled\" (keypress)=\"onKeypress($event)\"\r\n      [class.isValidateError]=\"isValidateError\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" >\r\n    <button mat-button class=\"closeButton\" type=\"button\" *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\" type=\"time\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".isValidateError{border:1px solid red}.alert-danger{background-color:#ffd2ff}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}.ShCtlTime{float:left}mat-form-field .closeButton{position:absolute;right:20px;bottom:5px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlTimeComponent.ctorParameters = function () { return []; };
        SHCtlTimeComponent.propDecorators = {
            format: [{ type: core.Input }]
        };
        return SHCtlTimeComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlTimeComponent.prototype.obj;
        /** @type {?} */
        SHCtlTimeComponent.prototype.adjust;
        /** @type {?} */
        SHCtlTimeComponent.prototype.isValidateError;
        /** @type {?} */
        SHCtlTimeComponent.prototype.errorMessage;
        /** @type {?} */
        SHCtlTimeComponent.prototype.stringValue;
        /** @type {?} */
        SHCtlTimeComponent.prototype.isFirst;
        /** @type {?} */
        SHCtlTimeComponent.prototype.format;
        /**
         * @type {?}
         * @private
         */
        SHCtlTimeComponent.prototype.timeStrage;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlTokuCodeComponent = /** @class */ (function (_super) {
        __extends(SHCtlTokuCodeComponent, _super);
        function SHCtlTokuCodeComponent() {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlTokuCode";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceSign(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            event.target.value = this.toText(event.target.value);
            this.valueChange.emit(this.toValue(event.target.value));
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.value = this.toValue(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            event.target.value = this.toText(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * 先頭零埋
         * @param inputTargetValue event.target.value
         */
        /**
         * 先頭零埋
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.toText = /**
         * 先頭零埋
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
            inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
            if (inputTargetValue.length == 0) {
                return "";
            }
            else if (inputTargetValue.length > 9) {
                return inputTargetValue;
            }
            /** @type {?} */
            var result = (("00000000" + inputTargetValue).slice(-9));
            return result;
        };
        /**
         * 零除去
         * @param inputTargetValue event.target.value
         */
        /**
         * 零除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlTokuCodeComponent.prototype.toValue = /**
         * 零除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            if (SHCtlCommon.isBlank(inputTargetValue)) {
                return "";
            }
            inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
            inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
            return inputTargetValue;
        };
        SHCtlTokuCodeComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-toku-code',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n        (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n      (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlTokuCodeComponent.ctorParameters = function () { return []; };
        return SHCtlTokuCodeComponent;
    }(SHFormControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlWideCharComponent = /** @class */ (function (_super) {
        __extends(SHCtlWideCharComponent, _super);
        function SHCtlWideCharComponent() {
            var _this = _super.call(this) || this;
            //入力変換時を補足するための値保持
            _this._data = "";
            _this.ctlName = "SHCtlWideChar";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
            if (this.maxByteLength % 2 != 0)
                this.maxByteLength = this.maxByteLength - 1;
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var isSameData = (this._data == event.data);
            this._data = event.data;
            //入力変換中は書き換えを行わない
            if (event.isComposing && (!event.isComposing || !isSameData))
                return;
            if (event.inputType !== 'insertCompositionText') {
                SHCtlCommon.sliceLength(event, this.maxlength);
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            this.onKeyUp(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onKeyUp
         * @param event KeyUp
         */
        /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onKeyUp = /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (!event.isComposing) {
                SHCtlCommon.replaceHalf(event);
                SHCtlCommon.replaceHalfSpaceToFull(event);
                SHCtlCommon.replaceHalfKana(event);
                SHCtlCommon.replaceFullDoubleQuote(event);
            }
        };
        /**
         * onKeyDown
         * @param event KeyUp
         */
        /**
         * onKeyDown
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlWideCharComponent.prototype.onKeyDown = /**
         * onKeyDown
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (this.maxByteLength > 0)
                _super.prototype.onKeyDown.call(this, event);
            if (!event.isComposing) {
                SHCtlCommon.replaceHalf(event);
                SHCtlCommon.replaceHalfSpaceToFull(event);
                SHCtlCommon.replaceHalfKana(event);
                SHCtlCommon.replaceFullDoubleQuote(event);
            }
        };
        SHCtlWideCharComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-wide-char',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlWideChar can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlWideChar can-moved-with-the-enter-key {{strClass}}\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlWideCharComponent.ctorParameters = function () { return []; };
        return SHCtlWideCharComponent;
    }(SHFormControl));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SHCtlWideCharComponent.prototype._data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlWideCharMLComponent = /** @class */ (function (_super) {
        __extends(SHCtlWideCharMLComponent, _super);
        function SHCtlWideCharMLComponent() {
            var _this = _super.call(this) || this;
            //入力変換時を補足するための値保持
            _this._data = "";
            _this.ctlName = "SHCtlWideCharML";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
            if (this.maxByteLength % 2 != 0)
                this.maxByteLength = this.maxByteLength - 1;
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var isSameData = (this._data == event.data);
            this._data = event.data;
            //入力変換中は書き換えを行わない
            if (event.isComposing && (!event.isComposing || !isSameData))
                return;
            if (event.inputType !== 'insertCompositionText') {
                SHCtlCommon.sliceLength(event, this.maxlength);
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //emitの直前にも値の精査を行う
            this.onInput(event);
            this.onKeyUp(event);
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            if (event.target.value == undefined) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { _this.onAfterBlur(event); }), 0);
                ;
                return;
            }
            ;
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * onKeyUp
         * @param event KeyUp
         */
        /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onKeyUp = /**
         * onKeyUp
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (!event.isComposing) {
                SHCtlCommon.replaceHalf(event);
                SHCtlCommon.replaceHalfSpaceToFull(event);
                SHCtlCommon.replaceHalfKana(event);
                SHCtlCommon.replaceFullDoubleQuote(event);
            }
        };
        /**
         * onKeyDown
         * @param event KeyUp
         */
        /**
         * onKeyDown
         * @param {?} event KeyUp
         * @return {?}
         */
        SHCtlWideCharMLComponent.prototype.onKeyDown = /**
         * onKeyDown
         * @param {?} event KeyUp
         * @return {?}
         */
        function (event) {
            if (this.maxByteLength > 0)
                _super.prototype.onKeyDown.call(this, event);
            if (!event.isComposing) {
                SHCtlCommon.replaceHalf(event);
                SHCtlCommon.replaceHalfSpaceToFull(event);
                SHCtlCommon.replaceHalfKana(event);
                SHCtlCommon.replaceFullDoubleQuote(event);
            }
        };
        SHCtlWideCharMLComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-wide-char-ml',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <textarea #inputElm matInput [placeholder]=\"title\" [required]=\"required\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlWideCharMl can-moved-with-the-enter-key {{strClass}}\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n        (change)=\"onChange($event)\" [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\"></textarea>\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <textarea #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlWideCharMl can-moved-with-the-enter-key {{strClass}}\" (keyup)=\"onKeyUp($event)\" (keydown)=\"onKeyDown($event)\"\r\n      (change)=\"onChange($event)\" [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\"></textarea>\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: ["textarea{min-height:2em}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlWideCharMLComponent.ctorParameters = function () { return []; };
        return SHCtlWideCharMLComponent;
    }(SHFormControl));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SHCtlWideCharMLComponent.prototype._data;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = _moment;
    /** @type {?} */
    var MY_FORMATS = {
        parse: {
            dateInput: "MM/YYYY"
        },
        display: {
            dateInput: "MM/YYYY",
            monthYearLabel: "MMM YYYY",
            dateA11yLabel: "LL",
            monthYearA11yLabel: "MMMM YYYY"
        }
    };
    var ɵ0 = {
        parse: {
            dateInput: "YYYY-MM"
        },
        display: {
            dateInput: "YYYY-MM",
            monthYearLabel: "MMM YYYY",
            dateA11yLabel: "LL",
            monthYearA11yLabel: "MMMM YYYY"
        }
    };
    var SHCtlYearMonthComponent = /** @class */ (function (_super) {
        __extends(SHCtlYearMonthComponent, _super);
        function SHCtlYearMonthComponent(dataAdapter, el) {
            var _this = _super.call(this) || this;
            _this.dataAdapter = dataAdapter;
            _this.el = el;
            _this.isValidateError = false;
            _this.errorMessage = "日付に誤りがあります。";
            _this.cache = { year: null, month: null };
            _this.date = new forms.FormControl(moment());
            _this.max = "9999-12";
            _this.min = "1000-12";
            _this.ctlName = "SHCtlYearMonth";
            dataAdapter.setLocale("ja");
            return _this;
        }
        /**
         * DatePickerのyear選択時のハンドラー
         * @param normalizedYear
         */
        /**
         * DatePickerのyear選択時のハンドラー
         * @param {?} normalizedYear
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.chosenYearHandler = /**
         * DatePickerのyear選択時のハンドラー
         * @param {?} normalizedYear
         * @return {?}
         */
        function (normalizedYear) {
            this.cache.year = normalizedYear.year();
        };
        /**
         * DatePickerのmonth選択時のハンドラー
         * @param normalizedMonth
         * @param datepicker
         */
        /**
         * DatePickerのmonth選択時のハンドラー
         * @param {?} normalizedMonth
         * @param {?} datepicker
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.chosenMonthHandler = /**
         * DatePickerのmonth選択時のハンドラー
         * @param {?} normalizedMonth
         * @param {?} datepicker
         * @return {?}
         */
        function (normalizedMonth, datepicker) {
            this.cache.month = normalizedMonth.month() + 1;
            datepicker.close();
            this.setValue();
            /** @type {?} */
            var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
            setTimeout((/**
             * @return {?}
             */
            function () { inputValue.dispatchEvent(new Event('change')); }), 10);
            this.valueChange.emit(this.toValue(this.value));
        };
        /**
         * DatePickerから取得した値をvalueへセットする
         */
        /**
         * DatePickerから取得した値をvalueへセットする
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.setValue = /**
         * DatePickerから取得した値をvalueへセットする
         * @return {?}
         */
        function () {
            /** @type {?} */
            var yearAndMonth = this.cache.year.toString() + this.cache.month.toString();
            this.value = this.toText(yearAndMonth);
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (!changes.value) {
                return;
            }
            if (!changes.value.currentValue) {
                this.value = "";
                return;
            }
            if (changes.value.currentValue.length >= 7) {
                this.value = "";
                return;
            }
            if (changes.value.currentValue) {
                this.value = this.toText(changes.value.currentValue);
            }
        };
        /**
         * @param {?} date
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.getYearAndManth = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (!date)
                return;
            /** @type {?} */
            var val = new Date(date).toLocaleDateString().split('/');
            /** @type {?} */
            var year = val[0];
            /** @type {?} */
            var month = val[1];
            return "" + year + month;
        };
        /**
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null && this.isDisabled) {
                this.changeFormat(this.value.replace("-", ""));
            }
        };
        /**
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngAfterViewInit.call(this);
            if (!this.isDisabled) {
                /** @type {?} */
                var element = (/** @type {?} */ (this.el.nativeElement.querySelector('input')));
                element.setAttribute("max", this.max);
                element.setAttribute("min", this.min);
            }
        };
        /**
         * onOpened
         */
        /**
         * onOpened
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onOpened = /**
         * onOpened
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var el = document.querySelector("mat-datepicker-content");
            el.addEventListener("focusin", (/**
             * @return {?}
             */
            function () {
                _this.isfocused = true;
            }));
        };
        /**
         * onClosed
         */
        /**
         * onClosed
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onClosed = /**
         * onClosed
         * @return {?}
         */
        function () {
            /** @type {?} */
            var inputValue = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
            setTimeout((/**
             * @return {?}
             */
            function () { inputValue.dispatchEvent(new Event('focus')); }), 0);
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            this.yearAndMonthCalculation(event);
        };
        /**
         * onKeypress
         * @param event keypress
         */
        /**
         * onKeypress
         * @param {?} event keypress
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onKeypress = /**
         * onKeypress
         * @param {?} event keypress
         * @return {?}
         */
        function (event) {
            this.yearAndMonthCalculation(event);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(this.toValue(event.target.value));
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            this.value = this.toText(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
            return true;
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * 年月計算
         * @param event
         */
        /**
         * 年月計算
         * @private
         * @param {?} event
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.yearAndMonthCalculation = /**
         * 年月計算
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var key = this.isKeysAllowedToMe(event);
            if (key === 0) {
                this.setCurrentDate(event);
                this.onChange(event);
            }
        };
        /**
         * 自タイプに許容されているキー
         * @param event keypress
         */
        /**
         * 自タイプに許容されているキー
         * @private
         * @param {?} event keypress
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.isKeysAllowedToMe = /**
         * 自タイプに許容されているキー
         * @private
         * @param {?} event keypress
         * @return {?}
         */
        function (event) {
            if (event.key === SHCtlCommon.Const.keyCodes.signs[191]) {
                return 0;
            }
            return null;
        };
        /**
         * 本日日付の設定
         * @param event keypress
         */
        /**
         * 本日日付の設定
         * @param {?} event keypress
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.setCurrentDate = /**
         * 本日日付の設定
         * @param {?} event keypress
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var newDate = new Date();
            /** @type {?} */
            var nullFirstString = null;
            /** @type {?} */
            var nullLastString = null;
            nullFirstString = SHCtlCommon.padding(newDate.getFullYear(), 4); // YYYY
            nullLastString = SHCtlCommon.padding(newDate.getMonth() + 1, 2); // MM
            event.target.value = String(nullFirstString + "-" + nullLastString);
        };
        /**
         * 接頭語付与
         * @param inputTargetValue num.substr(0, 2)
         */
        /**
         * 接頭語付与
         * @param {?} inputTargetValue num.substr(0, 2)
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.convYear = /**
         * 接頭語付与
         * @param {?} inputTargetValue num.substr(0, 2)
         * @return {?}
         */
        function (inputTargetValue) {
            if (inputTargetValue >= "00" && inputTargetValue <= 49) {
                return "20" + inputTargetValue;
            }
            else {
                return "19" + inputTargetValue;
            }
        };
        /**
         * YYYY/MM処理
         * @param inputTargetValue event.target.value
         */
        /**
         * YYYY/MM処理
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.toText = /**
         * YYYY/MM処理
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            /** @type {?} */
            var num = inputTargetValue.toString().replace(/\//g, "");
            if (num.trim().length === 0) {
                return "";
            }
            // 4桁西暦
            if (num.length === 3 || num.length === 4) {
                // // 接頭語取得
                return SHCtlCommon.padding(num, 4) + "-01";
            }
            else if (num.length === 5 || num.length === 6) {
                // 接頭語取得
                /** @type {?} */
                var year = num.substr(0, 4) + "-" + ("00" + num.substr(4)).slice(-2);
                return year;
            }
            else {
                return inputTargetValue;
            }
        };
        /**
         * 接続文字除去
         * @param inputTargetValue event.target.value
         */
        /**
         * 接続文字除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.toValue = /**
         * 接続文字除去
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            return new String(inputTargetValue).replace("-", "");
        };
        /**
         * フォーマット編集
         * @param value this.value
         */
        /**
         * フォーマット編集
         * @param {?} value this.value
         * @return {?}
         */
        SHCtlYearMonthComponent.prototype.changeFormat = /**
         * フォーマット編集
         * @param {?} value this.value
         * @return {?}
         */
        function (value) {
            if (value != null && value != undefined && value.length === 6) {
                /** @type {?} */
                var nullFirstString = null;
                /** @type {?} */
                var nullLastString = null;
                nullFirstString = value.slice(0, 4);
                nullLastString = value.slice(4, 6);
                this.stringValue = String(nullFirstString + "年" + nullLastString + "月");
                return this.stringValue;
            }
            else {
                this.stringValue = '';
                return this.stringValue;
            }
        };
        SHCtlYearMonthComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-year-month",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n      <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n        (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n      </mat-datepicker>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [matDatepicker]=\"dp\" type=\"month\" max=\"{{max}}\" min=\"{{min}}\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlYearMonth can-moved-with-the-enter-key {{strClass}}\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (keypress)=\"onKeypress($event)\" (click)=\"onClick($event)\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (input)=\"onInput($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp\" (mousedown)=\"dp.open(); $event.preventDefault(); $event.stopPropagation();\"></mat-datepicker-toggle>\r\n    <mat-datepicker #dp startView=\"multi-year\" (opened)=\"onOpened()\" (closed)=\"onClosed()\" (yearSelected)=\"chosenYearHandler($event)\"\r\n      (monthSelected)=\"chosenMonthHandler($event, dp)\" panelClass=\"example-month-picker\">\r\n    </mat-datepicker>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        providers: [
                            {
                                provide: core$1.DateAdapter,
                                useClass: materialMomentAdapter.MomentDateAdapter,
                                deps: [core$1.MAT_DATE_LOCALE, materialMomentAdapter.MAT_MOMENT_DATE_ADAPTER_OPTIONS]
                            },
                            {
                                provide: core$1.MAT_DATE_FORMATS,
                                useValue: ɵ0
                            }
                        ],
                        styles: [".isValidateError{background-color:#ffd2ff}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}input[type=month]::-webkit-calendar-picker-indicator{display:none}input[type=month]::-webkit-inner-spin-button,input[type=month]::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}input[type=month]::-webkit-clear-button{display:none}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlYearMonthComponent.ctorParameters = function () { return [
            { type: core$1.DateAdapter },
            { type: core.ElementRef }
        ]; };
        SHCtlYearMonthComponent.propDecorators = {
            max: [{ type: core.Input }],
            min: [{ type: core.Input }]
        };
        return SHCtlYearMonthComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.isValidateError;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.errorMessage;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.adjust;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.stringValue;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.cache;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.date;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.max;
        /** @type {?} */
        SHCtlYearMonthComponent.prototype.min;
        /**
         * @type {?}
         * @private
         */
        SHCtlYearMonthComponent.prototype.dataAdapter;
        /**
         * @type {?}
         * @private
         */
        SHCtlYearMonthComponent.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlZipNoComponent = /** @class */ (function (_super) {
        __extends(SHCtlZipNoComponent, _super);
        function SHCtlZipNoComponent() {
            var _this = _super.call(this) || this;
            _this.isValidateError = false;
            _this.errorMessage = "3桁か7桁のみ有効です。";
            _this.ctlName = "SHCtlZipNo";
            _this.maxlength = 7;
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.value) {
                if (changes.value.currentValue) {
                    if (changes.value.currentValue != changes.value.previousValue
                        && changes.value.currentValue.length == this.maxlength) {
                        this.value = this.withHyphen(changes.value.currentValue);
                    }
                }
            }
        };
        /**
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            if (this.value != null) {
                this.changeFormat(this.value);
            }
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSign(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
            SHCtlCommon.sliceLength(event, this.maxlength);
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            if (!event.target.value) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { _this.onAfterFocus(event); }), 0);
                return;
            }
            event.target.value = this.withoutHyphen(event.target.value);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
            return true;
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            if (!event.target.value) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { _this.onAfterBlur(event); }), 0);
                ;
                return;
            }
            event.target.value = this.withHyphen(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            //入力桁数が間違っている場合に、自コンポーネントにフォーカスを戻す
            if (event.target.value.length != 0 && event.target.value.length != 3 && event.target.value.length != 7) {
                event.target.value = "";
                /** @type {?} */
                var inputValue_1 = (/** @type {?} */ (document.querySelector("textarea[name=" + this.ctlName + "], input[name=" + this.ctlName + "]")));
                setTimeout((/**
                 * @return {?}
                 */
                function () { inputValue_1.focus(); }), 10);
            }
            this.valueChange.emit(event.target.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * ハイフン付与編集
         * @param inputTargetValue event.target.value
         */
        /**
         * ハイフン付与編集
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.withHyphen = /**
         * ハイフン付与編集
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            inputTargetValue = inputTargetValue.replace(/\ |\-/g, "");
            if (SHCtlCommon.isBlank(inputTargetValue)) {
                return "";
            }
            inputTargetValue = inputTargetValue.replace(/[!"#$%&'()\*\+\.,\/:;<=>?@\[\\\]^_`{|}~a-zA-Z]/g, "");
            inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
            if (isNaN(inputTargetValue)) {
                return "";
            }
            /** @type {?} */
            var zipcd = inputTargetValue.toString();
            if (zipcd.match(/^\d{3}-?\d{4}$/)) {
                zipcd = zipcd.substr(0, 3) + "-" + zipcd.substr(3);
            }
            return zipcd;
        };
        /**
         * ハイフン除去編集
         * @param inputTargetValue event.target.value
         */
        /**
         * ハイフン除去編集
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.withoutHyphen = /**
         * ハイフン除去編集
         * @param {?} inputTargetValue event.target.value
         * @return {?}
         */
        function (inputTargetValue) {
            return new String(inputTargetValue).replace(/-/g, "");
        };
        /**
         * フォーマット編集
         * @param value this.value
         */
        /**
         * フォーマット編集
         * @param {?} value this.value
         * @return {?}
         */
        SHCtlZipNoComponent.prototype.changeFormat = /**
         * フォーマット編集
         * @param {?} value this.value
         * @return {?}
         */
        function (value) {
            if (!value) {
                this.stringValue = "";
                return;
            }
            /** @type {?} */
            var nullFirstString = null;
            /** @type {?} */
            var nullLastString = null;
            nullFirstString = value.slice(0, 3);
            nullLastString = value.slice(-4);
            this.stringValue = String(nullFirstString + "-" + nullLastString);
        };
        SHCtlZipNoComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-zip-no',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\"\r\n      [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlZipNoComponent.ctorParameters = function () { return []; };
        return SHCtlZipNoComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlZipNoComponent.prototype.isValidateError;
        /** @type {?} */
        SHCtlZipNoComponent.prototype.errorMessage;
        /** @type {?} */
        SHCtlZipNoComponent.prototype.stringValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 区分マスタの情報を取得
     */
    var SmplKbnCodeService = /** @class */ (function () {
        function SmplKbnCodeService(apiComService) {
            this.apiComService = apiComService;
            //区分マスタ
            this.masterCache = [];
        }
        /**
         * 区分マスタ取得
         */
        /**
         * 区分マスタ取得
         * @param {?} url
         * @return {?}
         */
        SmplKbnCodeService.prototype.fetchAll = /**
         * 区分マスタ取得
         * @param {?} url
         * @return {?}
         */
        function (url) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.apiComService.get(url)];
                });
            });
        };
        /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param key マスタの名前
         */
        /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param {?} key マスタの名前
         * @return {?}
         */
        SmplKbnCodeService.prototype.getMasterData = /**
         * 指定したマスタのキャッシュしているデータを取得
         * @param {?} key マスタの名前
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var cache = this.masterCache.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.masterName == key;
            }));
            return cache.length > 0 ? cache[0].masterCache : [];
        };
        /**
         * マスタデータをキャッシュする
         * @param key マスタの名前
         * @param masterData マスタデータ
         */
        /**
         * マスタデータをキャッシュする
         * @param {?} key マスタの名前
         * @param {?} masterData マスタデータ
         * @return {?}
         */
        SmplKbnCodeService.prototype.setMasterData = /**
         * マスタデータをキャッシュする
         * @param {?} key マスタの名前
         * @param {?} masterData マスタデータ
         * @return {?}
         */
        function (key, masterData) {
            var e_1, _a;
            if (this.masterCache.length > 0) {
                try {
                    for (var _b = __values(this.masterCache), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        if (item.masterName == key) {
                            item.masterCache = masterData;
                            break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
        };
        SmplKbnCodeService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        SmplKbnCodeService.ctorParameters = function () { return [
            { type: ShCtlApiService }
        ]; };
        /** @nocollapse */ SmplKbnCodeService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SmplKbnCodeService_Factory() { return new SmplKbnCodeService(core.ɵɵinject(ShCtlApiService)); }, token: SmplKbnCodeService, providedIn: "root" });
        return SmplKbnCodeService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        SmplKbnCodeService.prototype.masterCache;
        /**
         * @type {?}
         * @private
         */
        SmplKbnCodeService.prototype.apiComService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlKbnRadioComponent = /** @class */ (function (_super) {
        __extends(SHCtlKbnRadioComponent, _super);
        function SHCtlKbnRadioComponent(SmplKbnRadioService) {
            var _this = _super.call(this) || this;
            _this.SmplKbnRadioService = SmplKbnRadioService;
            _this.dataKbnName = "";
            _this.radioContent = "";
            _this.apiUrl = "/api/";
            _this.displayLabel = "";
            _this.throwError = new core.EventEmitter();
            _this.name = "";
            _this.ctlName = "SHCtlKbnRadio";
            return _this;
        }
        /**
         *プロパティの初期化
         *通常サービスにキャッシュしているが、無ければ再度マスタより取得
         */
        /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.ngOnInit = /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.onInit();
            if (!this.items) {
                if (this.SmplKbnRadioService.getMasterData(this.apiUrl).length == 0) {
                    this.SmplKbnRadioService.fetchAll(this.apiUrl).then((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        _this.kbnCodes = response;
                        _this.SmplKbnRadioService.setMasterData(_this.apiUrl, response);
                    }));
                }
                else {
                    if (this.SmplKbnRadioService.getMasterData(this.apiUrl).length > 0)
                        this.kbnCodes = this.SmplKbnRadioService.getMasterData(this.apiUrl);
                }
            }
            else {
                this.kbnCodes = this.items;
            }
        };
        /**
         * ngOnChanges
         */
        /**
         * ngOnChanges
         * @param {?} change
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.ngOnChanges = /**
         * ngOnChanges
         * @param {?} change
         * @return {?}
         */
        function (change) {
            if (change.items && change.items.currentValue) {
                this.kbnCodes = change.items.currentValue;
            }
            if (change.value) {
                if (change.value.currentValue) {
                    this.value = change.value.currentValue.toString();
                }
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(event.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * フォーマット編集
         * @param value this.value
         */
        /**
         * フォーマット編集
         * @param {?} item
         * @return {?}
         */
        SHCtlKbnRadioComponent.prototype.changeRadioContent = /**
         * フォーマット編集
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this.radioContent = item;
        };
        SHCtlKbnRadioComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-kbn-radio",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" style=\"height: 52.5px;\">\r\n    <div style=\"height: 52.5px;\">\r\n      <label class=\"sh-label\">{{title}}</label>\r\n      <mat-radio-group [(ngModel)]=\"value\" [required]=\"required\" aria-label=\"Select an option\" [disabled]=\"disabled\">\r\n        <mat-radio-button *ngFor=\"let item of kbnCodes\" value=\"{{item.key}}\" attr.name=\"{{ctlName}}\"\r\n           (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n          (blur)=\"onBlur($event)\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"{{strClass}}\">\r\n          {{item.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n    <span class=\"custom-alert-message\" style=\"top:0px\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <div>\r\n      <mat-radio-group [(ngModel)]=\"value\" [required]=\"required\" aria-label=\"Select an option\" [disabled]=\"disabled\">\r\n        <mat-radio-button *ngFor=\"let item of kbnCodes\" value=\"{{item.key}}\" attr.name=\"{{ctlName}}\"\r\n           (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n          (blur)=\"onBlur($event)\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" class=\"{{strClass}}\">\r\n          {{item.value}}</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".sh-label{font-size:.75rem;min-height:18px}.sh-radio{margin:0 10px}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.mat-radio-button~.mat-radio-button{margin-left:16px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlKbnRadioComponent.ctorParameters = function () { return [
            { type: SmplKbnCodeService }
        ]; };
        SHCtlKbnRadioComponent.propDecorators = {
            dataKbnName: [{ type: core.Input }],
            radioContent: [{ type: core.Input }],
            apiUrl: [{ type: core.Input }],
            displayLabel: [{ type: core.Input }],
            throwError: [{ type: core.Output }]
        };
        return SHCtlKbnRadioComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.dataKbnName;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.radioContent;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.apiUrl;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.displayLabel;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.throwError;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.name;
        /** @type {?} */
        SHCtlKbnRadioComponent.prototype.kbnCodes;
        /**
         * @type {?}
         * @private
         */
        SHCtlKbnRadioComponent.prototype.SmplKbnRadioService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlKbnSelectComponent = /** @class */ (function (_super) {
        __extends(SHCtlKbnSelectComponent, _super);
        function SHCtlKbnSelectComponent(SmplKbnSelectService) {
            var _this = _super.call(this) || this;
            _this.SmplKbnSelectService = SmplKbnSelectService;
            _this.dataKbnName = "";
            _this.selectContent = "";
            _this.apiUrl = "/api/";
            _this.hiddenClearButton = false;
            _this.throwError = new core.EventEmitter();
            _this.name = "";
            _this.uniqueStr = "";
            _this.ctlName = "SHCtlKbnSelect";
            return _this;
        }
        /**
         *プロパティの初期化
         *通常サービスにキャッシュしているが、無ければ再度マスタより取得
         */
        /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.ngOnInit = /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.onInit();
            if (!this.items) {
                if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length == 0) {
                    this.SmplKbnSelectService.fetchAll(this.apiUrl).then((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        _this.kbnCodes = response;
                        _this.SmplKbnSelectService.setMasterData(_this.apiUrl, response);
                    }));
                }
                else {
                    if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length > 0)
                        this.kbnCodes = this.SmplKbnSelectService.getMasterData(this.apiUrl);
                }
                if (this.SmplKbnSelectService.getMasterData(this.apiUrl).length > 0)
                    this.kbnCodes = this.SmplKbnSelectService.getMasterData(this.apiUrl);
            }
            else {
                this.kbnCodes = this.items;
            }
        };
        /**
         *itemsの変更検知
         *上位コンポーネントからitemsに値が注入されているか検知し変更する
         */
        /**
         * itemsの変更検知
         * 上位コンポーネントからitemsに値が注入されているか検知し変更する
         * @param {?} change
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.ngOnChanges = /**
         * itemsの変更検知
         * 上位コンポーネントからitemsに値が注入されているか検知し変更する
         * @param {?} change
         * @return {?}
         */
        function (change) {
            if (change.items) {
                if (change.items.currentValue) {
                    this.kbnCodes = change.items.currentValue;
                }
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.onChange = /**
         * onChange
         * @return {?}
         */
        function () {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(this.value);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        /**
         * フォーマット編集
         * @param value this.value
         */
        /**
         * フォーマット編集
         * @param {?} item
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.changeSelectContent = /**
         * フォーマット編集
         * @param {?} item
         * @return {?}
         */
        function (item) {
            this.selectContent = item;
        };
        /**
         * 値のクリア
         */
        /**
         * 値のクリア
         * @return {?}
         */
        SHCtlKbnSelectComponent.prototype.clearValue = /**
         * 値のクリア
         * @return {?}
         */
        function () {
            this.value = null;
            this.onChange();
        };
        SHCtlKbnSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "sh-ctl-kbn-select",
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\">\r\n    <mat-form-field [floatLabel]=\"floatLabel\">\r\n      <mat-label class=\"sh-label\">{{title}}</mat-label>\r\n      <mat-select #inputElm [required]=\"required\" [(ngModel)]=\"value\" (selectionChange)=\"onChange()\"\r\n        class=\"SHCtlKbnListbox h6 can-moved-with-the-enter-key  {{strClass}}\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">\r\n        <mat-option *ngFor=\"let item of kbnCodes\" [value]=\"item.key\">\r\n          {{item.value}}\r\n        </mat-option>      \r\n      </mat-select>\r\n      <button mat-button *ngIf=\"value && !inputElm.disabled && !hiddenClearButton\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (click)=\"clearValue();$event.stopPropagation();\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n\r\n</ng-container>\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <mat-select #inputElm [required]=\"required\" [(ngModel)]=\"value\" (selectionChange)=\"onChange()\"\r\n        class=\"SHCtlKbnListbox h6 can-moved-with-the-enter-key  {{strClass}}\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (blur)=\"onBlur($event)\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">\r\n        <mat-option *ngFor=\"let item of kbnCodes\" [value]=\"item.key\">\r\n          {{item.value}}\r\n        </mat-option>      \r\n      </mat-select>\r\n      <button mat-button *ngIf=\"value && !inputElm.disabled && !hiddenClearButton\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (click)=\"clearValue();$event.stopPropagation();\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n  </div>\r\n\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div *ngFor=\"let item of kbnCodes;\">\r\n        <div fxFlex class=\"valueOutput\" *ngIf=\"value == item.key\">\r\n          {{item.value}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlKbnSelectComponent.ctorParameters = function () { return [
            { type: SmplKbnCodeService }
        ]; };
        SHCtlKbnSelectComponent.propDecorators = {
            dataKbnName: [{ type: core.Input }],
            selectContent: [{ type: core.Input }],
            apiUrl: [{ type: core.Input }],
            hiddenClearButton: [{ type: core.Input }],
            throwError: [{ type: core.Output }]
        };
        return SHCtlKbnSelectComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.dataKbnName;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.selectContent;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.apiUrl;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.hiddenClearButton;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.throwError;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.name;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.event;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.kbnCodes;
        /** @type {?} */
        SHCtlKbnSelectComponent.prototype.uniqueStr;
        /**
         * @type {?}
         * @private
         */
        SHCtlKbnSelectComponent.prototype.SmplKbnSelectService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShCtlPopupComponent = /** @class */ (function (_super) {
        __extends(ShCtlPopupComponent, _super);
        function ShCtlPopupComponent(SmplPopupService, dialog, bindCtlService, lockScreenService) {
            var _this = _super.call(this, SmplPopupService, dialog, bindCtlService, lockScreenService) || this;
            _this.SmplPopupService = SmplPopupService;
            _this.dialog = dialog;
            _this.bindCtlService = bindCtlService;
            _this.lockScreenService = lockScreenService;
            _this.ctlName = "SHCtlPopup";
            return _this;
        }
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        ShCtlPopupComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceSign(event);
        };
        ShCtlPopupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-popup',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field [ngStyle]=\"setInputWidth()\" *ngIf=\"!hiddenInput\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n          (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n          class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n          placeholder=\"{{title}}\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n          attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && hiddenLabel && !inputElm.readOnly && !inputElm.disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n          (click)=\"getCodes()\">\r\n          search\r\n        </mat-icon>\r\n      </mat-form-field>\r\n      <mat-form-field [ngStyle]=\"setLabelWidth()\" *ngIf=\"!hiddenLabel\" class=\"result-container\">\r\n        <input class=\"result-input  {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n          [ngClass]=\"objClass\" attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && !disabled\" mat-button matSuffix class=\"mat-search-btn\" (click)=\"getCodes()\">search\r\n        </mat-icon>\r\n      </mat-form-field>\r\n      <span class=\"mat-icon-container\">\r\n        <mat-icon *ngIf=\"!hiddenPopupButton && hiddenInput && hiddenLabel && !disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n          (click)=\"getCodes()\">\r\n          search\r\n        </mat-icon>\r\n      </span>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}\r\n    </span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\" *ngIf=\"!hiddenInput\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" [(ngModel)]=\"value\"\r\n        class=\"SHCtlJigCode can-moved-with-the-enter-key {{strClass}}\" type=\"tel\" [disabled]=\"disabled\"\r\n        maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\"\r\n        attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && hiddenLabel && !inputElm.readOnly && !inputElm.disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n        (click)=\"getCodes()\">\r\n        search\r\n      </mat-icon>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\" *ngIf=\"!hiddenInput\">\r\n      <input class=\"result-input  {{strClass}}\" matInput type=\"text\" [(ngModel)]=\"name\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && !disabled\" mat-button matSuffix class=\"mat-search-btn\" (click)=\"getCodes()\">search\r\n      </mat-icon>\r\n    </div>\r\n    <span class=\"mat-icon-container\">\r\n      <mat-icon *ngIf=\"!hiddenPopupButton && hiddenInput && hiddenLabel && !disabled\" mat-button matSuffix class=\"mat-search-btn\"\r\n        (click)=\"getCodes()\">\r\n        search\r\n      </mat-icon>\r\n    </span>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong></strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.mat-icon-container{margin-left:-17px}.mat-icon-container .mat-search-btn{color:#bababa;font-size:1.1rem;margin:17px 0 0 100%}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        ShCtlPopupComponent.ctorParameters = function () { return [
            { type: SmplPopupService },
            { type: material.MatDialog },
            { type: BindCtlService },
            { type: LockScreenService }
        ]; };
        return ShCtlPopupComponent;
    }(SHFormPopup));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupComponent.prototype.SmplPopupService;
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupComponent.prototype.dialog;
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupComponent.prototype.bindCtlService;
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupComponent.prototype.lockScreenService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShCtlPopupMultiComponent = /** @class */ (function (_super) {
        __extends(ShCtlPopupMultiComponent, _super);
        function ShCtlPopupMultiComponent(SmplPopupService, dialog) {
            var _this = _super.call(this) || this;
            _this.SmplPopupService = SmplPopupService;
            _this.dialog = dialog;
            //データタイトル名
            _this.dataTitle = "";
            //API URL
            _this.apiUrl = "/api/";
            //データキャッシュON/OFF機能フラグ
            _this.dataCache = false;
            //キーとなる列番号(起動時のチェックを入れるためのキー判定基準になります。)
            _this.uniqueColumns = [1];
            //ポップアップ上非表示となる列番号
            _this.hiddenColumns = [];
            _this.extendWidth = ShCtlConst.DIALOG_WIDTH;
            //Dialogの結果を受け取る
            _this.dialogRef = null;
            _this.codes = [];
            _this.codesHeader = [];
            _this.ctlName = "SHCtlPopupMulti";
            return _this;
        }
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         */
        /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        ShCtlPopupMultiComponent.prototype.openDialog = /**
         * ダイアログを開いて閉じる時に値を親に返す
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.codes) {
                if (!this.popupWidth && this.codes.length != 0 && Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                this.dialogRef = this.dialog.open(SHCtlPopupDialogMultiComponent, {
                    height: ShCtlConst.DIALOG_HEIGHT,
                    width: this.extendWidth,
                    data: {
                        dataTitle: this.dataTitle,
                        value: this.value,
                        uniqueColumns: this.uniqueColumns,
                        hiddenColumns: this.hiddenColumns,
                    }
                });
                this.dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result != undefined)
                        _this.valueChange.emit(result);
                }));
            }
        };
        /**
         *プロパティの初期化
         *通常サービスにキャッシュしているが、無ければ再度マスタより取得
         */
        /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        ShCtlPopupMultiComponent.prototype.ngOnInit = /**
         * プロパティの初期化
         * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.onInit();
            if (this.popupWidth) {
                this.extendWidth = this.popupWidth;
            }
            // //ユニークな文字列
            if (this.SmplPopupService.getMasterData(this.apiUrl).length >= 0) {
                this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.codes = response.data;
                    if (response.header == null) {
                        return;
                    }
                    _this.codesHeader = Object.values(response.header);
                    _this.dataTitle = response.title;
                }));
            }
        };
        /**
         * マスタ情報よりコードを取得
         */
        /**
         * マスタ情報よりコードを取得
         * @return {?}
         */
        ShCtlPopupMultiComponent.prototype.getCodes = /**
         * マスタ情報よりコードを取得
         * @return {?}
         */
        function () {
            var _this = this;
            this.openDialog();
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0) {
                this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.codes = response.data;
                    _this.codesHeader = Object.values(response.header);
                    _this.dataTitle = response.title;
                    if (_this.dataCache)
                        _this.SmplPopupService.setMasterData(_this.apiUrl, response);
                }));
                if (this.dialogRef.componentInstance) {
                    this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                    this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                    this.dialogRef.componentInstance.codes = this.codes;
                    if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                        this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                    }
                    /** @type {?} */
                    var cols_1 = [];
                    this.dialogRef.componentInstance.getHashKeys().forEach((/**
                     * @param {?} name
                     * @param {?} idx
                     * @return {?}
                     */
                    function (name, idx) {
                        if (!_this.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { return _ == (idx + 1); })))
                            cols_1.push(name);
                    }));
                    this.dialogRef.componentInstance.displayedColumns = cols_1;
                }
            }
            else {
                this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                this.codesHeader = Object.values(Object(this.SmplPopupService.getMasterData(this.apiUrl)).header);
                if (this.dialogRef.componentInstance) {
                    this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                    this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                    this.dialogRef.componentInstance.codes = this.codes;
                    if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                        this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                    }
                    /** @type {?} */
                    var cols_2 = [];
                    this.dialogRef.componentInstance.getHashKeys().forEach((/**
                     * @param {?} name
                     * @param {?} idx
                     * @return {?}
                     */
                    function (name, idx) {
                        if (!_this.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        function (_) { return _ == (idx + 1); })))
                            cols_2.push(name);
                    }));
                    this.dialogRef.componentInstance.displayedColumns = cols_2;
                }
            }
        };
        ShCtlPopupMultiComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-popup-multi',
                        template: "<div *ngIf=\"!disabled\" style=\"margin-top: 17px;\">\r\n  <mat-icon mat-button matSuffix class=\"mat-search-btn\"\r\n  (click)=\"getCodes()\">search</mat-icon>\r\n</div>",
                        styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.mat-icon-container{margin-left:-17px}.mat-icon-container .mat-search-btn{color:#bababa;font-size:1.1rem;margin:17px 0 0 100%}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        ShCtlPopupMultiComponent.ctorParameters = function () { return [
            { type: SmplPopupService },
            { type: material.MatDialog }
        ]; };
        ShCtlPopupMultiComponent.propDecorators = {
            dataTitle: [{ type: core.Input }],
            apiUrl: [{ type: core.Input }],
            dataCache: [{ type: core.Input }],
            uniqueColumns: [{ type: core.Input }],
            hiddenColumns: [{ type: core.Input }],
            popupWidth: [{ type: core.Input }]
        };
        return ShCtlPopupMultiComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.dataTitle;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.apiUrl;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.dataCache;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.uniqueColumns;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.hiddenColumns;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.popupWidth;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.extendWidth;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.dialogRef;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.codes;
        /** @type {?} */
        ShCtlPopupMultiComponent.prototype.codesHeader;
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupMultiComponent.prototype.SmplPopupService;
        /**
         * @type {?}
         * @protected
         */
        ShCtlPopupMultiComponent.prototype.dialog;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShCtlValidatedErrorComponent = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function ShCtlValidatedErrorComponent(validationErrorService) {
            this.validationErrorService = validationErrorService;
            this.isError = false;
        }
        /**
         * コンポーネント初期化
         */
        /**
         * コンポーネント初期化
         * @return {?}
         */
        ShCtlValidatedErrorComponent.prototype.ngOnInit = /**
         * コンポーネント初期化
         * @return {?}
         */
        function () {
            var _this = this;
            this.subscription = this.validationErrorService.validationErrorState
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.show) {
                    _this.isError = true;
                    _this.errors = [];
                    Object.keys(response.meesages).forEach((/**
                     * @param {?} controlName
                     * @return {?}
                     */
                    function (controlName) {
                        _this.errors = __spread(_this.errors, response.meesages[controlName]);
                    }));
                }
                else {
                    _this.isError = false;
                    _this.errors = [];
                }
            }));
        };
        /**
         * @return {?}
         */
        ShCtlValidatedErrorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.subscription.unsubscribe();
        };
        ShCtlValidatedErrorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-validated-error',
                        template: "<div *ngIf=\"isError\" class=\"error-message\">\r\n  <div *ngFor=\"let item of errors\" class=\"errorMessages text-red\" role=\"alert\">\r\n    \u30FB{{item}}\r\n  </div>\r\n</div>\r\n",
                        styles: [".error-message{text-align:left;width:100%;height:100%}.text-red{color:red}"]
                    }] }
        ];
        /** @nocollapse */
        ShCtlValidatedErrorComponent.ctorParameters = function () { return [
            { type: shHttpClient.ValidationErrorService }
        ]; };
        ShCtlValidatedErrorComponent.propDecorators = {
            message: [{ type: core.Input }],
            isError: [{ type: core.Input }],
            errors: [{ type: core.Input }]
        };
        return ShCtlValidatedErrorComponent;
    }());
    if (false) {
        /** @type {?} */
        ShCtlValidatedErrorComponent.prototype.message;
        /** @type {?} */
        ShCtlValidatedErrorComponent.prototype.isError;
        /** @type {?} */
        ShCtlValidatedErrorComponent.prototype.errors;
        /**
         * @type {?}
         * @private
         */
        ShCtlValidatedErrorComponent.prototype.subscription;
        /**
         * @type {?}
         * @private
         */
        ShCtlValidatedErrorComponent.prototype.validationErrorService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlHalfNumberComponent = /** @class */ (function (_super) {
        __extends(SHCtlHalfNumberComponent, _super);
        function SHCtlHalfNumberComponent() {
            var _this = _super.call(this) || this;
            _this.ctlName = "SHCtlHalfNumber";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * onInput
         * @param event input
         */
        /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.onInput = /**
         * onInput
         * @param {?} event input
         * @return {?}
         */
        function (event) {
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.replaceHalfWidth(event);
            if (event.inputType !== 'insertCompositionText') {
                SHCtlCommon.replaceSpace(event);
                SHCtlCommon.replaceFUllSpace(event);
                SHCtlCommon.replaceSign(event);
                SHCtlCommon.replaceFullWidth(event);
                SHCtlCommon.replaceHalfWidth(event);
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, ""));
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SHCtlHalfNumberComponent.prototype.onBlur = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        SHCtlHalfNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-half-number',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (input)=\"onInput($event)\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" (keydown)=\"onKeyDown($event)\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control SHCtlHalfNumber can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled type=\"tel\"\r\n        [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\"\r\n      (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control SHCtlHalfNumber can-moved-with-the-enter-key {{strClass}}\" type=ime-mode:disabled type=\"tel\"\r\n      [disabled]=\"disabled\" maxlength=\"{{maxlength}}\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlHalfNumberComponent.ctorParameters = function () { return []; };
        return SHCtlHalfNumberComponent;
    }(SHFormControl));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlCheckComponent = /** @class */ (function (_super) {
        __extends(SHCtlCheckComponent, _super);
        function SHCtlCheckComponent() {
            var _this = _super.call(this) || this;
            //ラベル名
            _this.checkedLabel = "";
            //ラベル位置(チェックボックスの前か)
            _this.beforeAlign = false;
            //チェックボックスのチェック時の値
            _this.checkedValue = "1";
            //チェックボックスの未チェック時の値
            _this.uncheckedValue = "0";
            _this.ctlName = "SHCtlCheck";
            return _this;
        }
        /**
         * @return {?}
         */
        SHCtlCheckComponent.prototype.setLabelPosition = /**
         * @return {?}
         */
        function () {
            return this.beforeAlign ? 'before' : 'after';
        };
        /**
         * @return {?}
         */
        SHCtlCheckComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.onInit();
        };
        /**
         * ngOnChangesイベント
         */
        /**
         * ngOnChangesイベント
         * @param {?} changes
         * @return {?}
         */
        SHCtlCheckComponent.prototype.ngOnChanges = /**
         * ngOnChangesイベント
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.value) {
                if (changes.value.currentValue) {
                    if (changes.value.currentValue === '' || changes.value.currentValue === undefined || changes.value.currentValue === String(/[^\x01-\x7E\xA1-\xDF]+$/g)) {
                        this.value = '';
                        return;
                    }
                    this.value = changes.value.currentValue == this.checkedValue ? "checked" : "";
                }
            }
        };
        /**
         * onClick
         * @param event click
         */
        /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        SHCtlCheckComponent.prototype.onClick = /**
         * onClick
         * @param {?} event click
         * @return {?}
         */
        function (event) {
            this.onBeforeClick(event);
            this.onAfterClick(event);
        };
        /**
         * onChange
         * @param event change
         */
        /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        SHCtlCheckComponent.prototype.onChange = /**
         * onChange
         * @param {?} event change
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeChange(event);
            this.valueChange.emit(event.checked ? this.checkedValue : this.uncheckedValue);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterChange(event); }), 0);
        };
        /**
         * onFocus
         * @param event focus
         */
        /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        SHCtlCheckComponent.prototype.onFocus = /**
         * onFocus
         * @param {?} event focus
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeFocus(event);
            event.target.select();
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterFocus(event); }), 0);
        };
        /**
         * onBlur
         * @param event blur
         */
        /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        SHCtlCheckComponent.prototype.onBlur = /**
         * onBlur
         * @param {?} event blur
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.onBeforeBlur(event);
            setTimeout((/**
             * @return {?}
             */
            function () { _this.onAfterBlur(event); }), 0);
            ;
        };
        SHCtlCheckComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-check',
                        template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" style=\"height: 52.5px;\">\r\n    <div style=\"height: 52.5px;\">\r\n      <label class=\"sh-label\">{{title}}</label>\r\n      <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focusin)=\"onFocus($event)\" (focusout)=\"onBlur($event)\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">{{checkedLabel}}\r\n      </mat-checkbox>\r\n    </div>\r\n    <span class=\"custom-alert-message\" style=\"top:0px\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\">\r\n    <div>\r\n      <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" attr.name=\"{{ctlName}}\" [disabled]=\"disabled\"\r\n        (click)=\"onClick($event)\" (change)=\"onChange($event)\" (focusin)=\"onFocus($event)\" (focusout)=\"onBlur($event)\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\">{{checkedLabel}}\r\n      </mat-checkbox>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" \r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" [disabled]=\"'true'\">{{checkedLabel}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        <mat-checkbox class=\"can-moved-with-the-enter-key {{strClass}}\" [(ngModel)]=\"value\" \r\n        [labelPosition]=\"setLabelPosition()\" \r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" [disabled]=\"'true'\">{{checkedLabel}}\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                        styles: ["mat-card-actions,mat-card-content,mat-card-title{text-align:center}mat-card-content{padding-top:20px;padding-bottom:20px}.advanced-color{color:#3f51b5}.beginner-color{color:#f44336}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}.sh-label{display:block;color:#0000008a;font-size:.75rem;min-height:18px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlCheckComponent.ctorParameters = function () { return []; };
        SHCtlCheckComponent.propDecorators = {
            checkedLabel: [{ type: core.Input }],
            beforeAlign: [{ type: core.Input }],
            checkedValue: [{ type: core.Input }],
            uncheckedValue: [{ type: core.Input }]
        };
        return SHCtlCheckComponent;
    }(SHFormControl));
    if (false) {
        /** @type {?} */
        SHCtlCheckComponent.prototype.checkedLabel;
        /** @type {?} */
        SHCtlCheckComponent.prototype.beforeAlign;
        /** @type {?} */
        SHCtlCheckComponent.prototype.checkedValue;
        /** @type {?} */
        SHCtlCheckComponent.prototype.uncheckedValue;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SHCtlLockScreenComponent = /** @class */ (function () {
        /**
        * コンストラクタ
        */
        function SHCtlLockScreenComponent(lockScreen) {
            this.lockScreen = lockScreen;
            this.isConnecting = false;
        }
        /**
        * コンポーネント初期化
        */
        /**
         * コンポーネント初期化
         * @return {?}
         */
        SHCtlLockScreenComponent.prototype.ngOnInit = /**
         * コンポーネント初期化
         * @return {?}
         */
        function () {
            var _this = this;
            this.lockScreen.isConnectingState.subscribe((/**
             * @param {?} isConnecting
             * @return {?}
             */
            function (isConnecting) {
                _this.isConnecting = isConnecting;
            }));
        };
        SHCtlLockScreenComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sh-ctl-lock-screen',
                        template: "<div *ngIf=\"isConnecting\" class=\"overlay\">\r\n    <mat-spinner></mat-spinner>\r\n    <span class=\"loader-text\">Loading...</span>\r\n</div>\r\n",
                        styles: [".overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}"]
                    }] }
        ];
        /** @nocollapse */
        SHCtlLockScreenComponent.ctorParameters = function () { return [
            { type: LockScreenService }
        ]; };
        return SHCtlLockScreenComponent;
    }());
    if (false) {
        /** @type {?} */
        SHCtlLockScreenComponent.prototype.isConnecting;
        /**
         * @type {?}
         * @private
         */
        SHCtlLockScreenComponent.prototype.lockScreen;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //Date型のデータをsh-ctl-dateで扱う形式のオブジェクトに変換
    var NgDateValuePipe = /** @class */ (function () {
        function NgDateValuePipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        NgDateValuePipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != null) {
                return {
                    year: value.getFullYear(),
                    month: value.getMonth() + 1,
                    day: value.getDate()
                };
            }
            return null;
        };
        NgDateValuePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'ngDateValue'
                    },] }
        ];
        return NgDateValuePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShFlexRowDirective = /** @class */ (function () {
        function ShFlexRowDirective(el) {
            this.el = el;
        }
        /**
         * @return {?}
         */
        ShFlexRowDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexRowDirective.prototype.init = /**
         * @private
         * @return {?}
         */
        function () {
            this.el.nativeElement.style.flexFlow = "row wrap";
            this.el.nativeElement.style.display = "flex";
            this.el.nativeElement.style.boxSizing = "border-box";
            this.el.nativeElement.style.margin = "0px -1rem -1rem 0px";
        };
        ShFlexRowDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ShFlexRow]'
                    },] }
        ];
        /** @nocollapse */
        ShFlexRowDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return ShFlexRowDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShFlexRowDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShFlexDirective = /** @class */ (function () {
        function ShFlexDirective(el) {
            this.el = el;
            /**
             * 最大
             */
            this.colLg = 16.6;
            this.ctlLgFlex = "1 1 " + this.colLg + "%";
            this.ctlLgMaxWidth = this.colLg + "%";
            /**
             * ipad ~ p
             */
            this.colMd = 33.3;
            this.ctlMdFlex = "1 1 " + this.colMd + "%";
            this.ctlMdMaxWidth = this.colMd + "%";
            /**
             * mobile
             */
            this.colSm = 100;
            this.ctlSmFlex = "1 1 " + this.colSm + "%";
            this.ctlSmMaxWidth = this.colSm + "%";
            //メディアクエリ閾値
            this.mediaSm = "(max-width: 768px)";
            this.mediaMd = "(max-width: 1024px)";
            //その他設定しておきたいスタイル
            this.ctlWidth = "100%";
            this.ctlBoxSizing = "border-box";
            this.ctlPadding = "0px 1rem 1rem 0px";
        }
        /**
         * @return {?}
         */
        ShFlexDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            //上から任意の値を設定した場合ここで値を再設定しておかないと
            //意図した挙動にならないので消さない
            this.initParam();
            this.initStyle();
            window.addEventListener('resize', (/**
             * @return {?}
             */
            function () {
                _this.initStyle();
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexDirective.prototype.initParam = /**
         * @private
         * @return {?}
         */
        function () {
            this.ctlLgFlex = "1 1 " + this.colLg + "%";
            this.ctlLgMaxWidth = this.colLg + "%";
            this.ctlMdFlex = "1 1 " + this.colMd + "%";
            this.ctlMdMaxWidth = this.colMd + "%";
            this.ctlSmFlex = "1 1 " + this.colSm + "%";
            this.ctlSmMaxWidth = this.colSm + "%";
            this.el.nativeElement.style.padding = this.ctlPadding;
            this.el.nativeElement.style.width = this.ctlWidth;
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexDirective.prototype.initStyle = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var sm = window.matchMedia(this.mediaSm);
            /** @type {?} */
            var md = window.matchMedia(this.mediaMd);
            if (sm.matches) {
                this.smStyleInit();
            }
            else if (md.matches) {
                this.mdStyleInit();
            }
            else {
                this.defaultStyleInit();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexDirective.prototype.smStyleInit = /**
         * @private
         * @return {?}
         */
        function () {
            this.el.nativeElement.style.padding = this.ctlPadding;
            this.el.nativeElement.style.width = this.ctlWidth;
            this.el.nativeElement.style.flex = this.ctlSmFlex;
            this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
            this.el.nativeElement.style.maxWidth = this.ctlSmMaxWidth;
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexDirective.prototype.mdStyleInit = /**
         * @private
         * @return {?}
         */
        function () {
            this.el.nativeElement.style.padding = this.ctlPadding;
            this.el.nativeElement.style.width = this.ctlWidth;
            this.el.nativeElement.style.flex = this.ctlMdFlex;
            this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
            this.el.nativeElement.style.maxWidth = this.ctlMdMaxWidth;
        };
        /**
         * @private
         * @return {?}
         */
        ShFlexDirective.prototype.defaultStyleInit = /**
         * @private
         * @return {?}
         */
        function () {
            this.el.nativeElement.style.padding = this.ctlPadding;
            this.el.nativeElement.style.width = this.ctlWidth;
            this.el.nativeElement.style.flex = this.ctlLgFlex;
            this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
            this.el.nativeElement.style.maxWidth = this.ctlLgMaxWidth;
        };
        ShFlexDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ShFlex]'
                    },] }
        ];
        /** @nocollapse */
        ShFlexDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ShFlexDirective.propDecorators = {
            colLg: [{ type: core.Input }],
            colMd: [{ type: core.Input }],
            colSm: [{ type: core.Input }]
        };
        return ShFlexDirective;
    }());
    if (false) {
        /**
         * 最大
         * @type {?}
         */
        ShFlexDirective.prototype.colLg;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlLgFlex;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlLgMaxWidth;
        /**
         * ipad ~ p
         * @type {?}
         */
        ShFlexDirective.prototype.colMd;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlMdFlex;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlMdMaxWidth;
        /**
         * mobile
         * @type {?}
         */
        ShFlexDirective.prototype.colSm;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlSmFlex;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlSmMaxWidth;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.mediaSm;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.mediaMd;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlWidth;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlBoxSizing;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.ctlPadding;
        /**
         * @type {?}
         * @private
         */
        ShFlexDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShReadOnlyDirective = /** @class */ (function () {
        function ShReadOnlyDirective(el) {
            this.el = el;
            this.isReadOnly = true;
        }
        /**
         * @return {?}
         */
        ShReadOnlyDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.addAttribute();
        };
        /**
         * @return {?}
         */
        ShReadOnlyDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            this.addAttribute();
        };
        /**
         * @return {?}
         */
        ShReadOnlyDirective.prototype.addAttribute = /**
         * @return {?}
         */
        function () {
            var e_1, _a, e_2, _b, e_3, _c;
            /** @type {?} */
            var qs = this.el.nativeElement.querySelectorAll('input,textarea,select');
            try {
                for (var qs_1 = __values(qs), qs_1_1 = qs_1.next(); !qs_1_1.done; qs_1_1 = qs_1.next()) {
                    var e = qs_1_1.value;
                    e.readOnly = this.isReadOnly;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (qs_1_1 && !qs_1_1.done && (_a = qs_1.return)) _a.call(qs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            qs = this.el.nativeElement.querySelectorAll('button,mat-icon');
            if (this.isReadOnly) {
                try {
                    for (var qs_2 = __values(qs), qs_2_1 = qs_2.next(); !qs_2_1.done; qs_2_1 = qs_2.next()) {
                        var e = qs_2_1.value;
                        e.style.display = "none";
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (qs_2_1 && !qs_2_1.done && (_b = qs_2.return)) _b.call(qs_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            else {
                try {
                    for (var qs_3 = __values(qs), qs_3_1 = qs_3.next(); !qs_3_1.done; qs_3_1 = qs_3.next()) {
                        var e = qs_3_1.value;
                        e.style.display = "inline";
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (qs_3_1 && !qs_3_1.done && (_c = qs_3.return)) _c.call(qs_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        };
        ShReadOnlyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[readonly]'
                    },] }
        ];
        /** @nocollapse */
        ShReadOnlyDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ShReadOnlyDirective.propDecorators = {
            isReadOnly: [{ type: core.Input, args: ['readonly',] }]
        };
        return ShReadOnlyDirective;
    }());
    if (false) {
        /** @type {?} */
        ShReadOnlyDirective.prototype.isReadOnly;
        /**
         * @type {?}
         * @private
         */
        ShReadOnlyDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShCtlStateDirective = /** @class */ (function () {
        function ShCtlStateDirective(el) {
            this.el = el;
            this.state = "";
            this.onlyField = false;
        }
        /**
         * @return {?}
         */
        ShCtlStateDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.addShCtlStateClass();
        };
        /**
         * @return {?}
         */
        ShCtlStateDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            this.addShCtlStateClass();
        };
        /**
         * @return {?}
         */
        ShCtlStateDirective.prototype.addShCtlStateClass = /**
         * @return {?}
         */
        function () {
            var e_1, _a, e_2, _b, e_3, _c;
            /** @type {?} */
            var qs = this.el.nativeElement.querySelectorAll('mat-form-field');
            try {
                for (var qs_1 = __values(qs), qs_1_1 = qs_1.next(); !qs_1_1.done; qs_1_1 = qs_1.next()) {
                    var e = qs_1_1.value;
                    /** @type {?} */
                    var classList = (e) ? e.className.split(' ') : [];
                    classList.forEach((/**
                     * @param {?} className
                     * @return {?}
                     */
                    function (className) {
                        if (className.startsWith("sh-ctl-state-"))
                            e.classList.remove(className);
                    }));
                    e.classList.add("sh-ctl-state-" + this.state);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (qs_1_1 && !qs_1_1.done && (_a = qs_1.return)) _a.call(qs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.onlyField) {
                /** @type {?} */
                var qsOnlyField = this.el.nativeElement.querySelectorAll('.only-field');
                try {
                    for (var qsOnlyField_1 = __values(qsOnlyField), qsOnlyField_1_1 = qsOnlyField_1.next(); !qsOnlyField_1_1.done; qsOnlyField_1_1 = qsOnlyField_1.next()) {
                        var e = qsOnlyField_1_1.value;
                        /** @type {?} */
                        var classList = (e) ? e.className.split(' ') : [];
                        classList.forEach((/**
                         * @param {?} className
                         * @return {?}
                         */
                        function (className) {
                            if (className.startsWith("only-field-")) {
                                e.classList.remove(className);
                            }
                        }));
                        e.classList.add("only-field-" + this.state);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (qsOnlyField_1_1 && !qsOnlyField_1_1.done && (_b = qsOnlyField_1.return)) _b.call(qsOnlyField_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            qs = this.el.nativeElement.querySelectorAll('span,label');
            try {
                for (var qs_2 = __values(qs), qs_2_1 = qs_2.next(); !qs_2_1.done; qs_2_1 = qs_2.next()) {
                    var e = qs_2_1.value;
                    /** @type {?} */
                    var classList = (e) ? e.className.split(' ') : [];
                    classList.forEach((/**
                     * @param {?} className
                     * @return {?}
                     */
                    function (className) {
                        if (className.startsWith("sh-ctl-state-"))
                            e.classList.remove(className);
                    }));
                    e.classList.add("sh-ctl-state-" + this.state + "-message");
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (qs_2_1 && !qs_2_1.done && (_c = qs_2.return)) _c.call(qs_2);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        ShCtlStateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[state]'
                    },] }
        ];
        /** @nocollapse */
        ShCtlStateDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ShCtlStateDirective.propDecorators = {
            state: [{ type: core.Input, args: ['state',] }],
            onlyField: [{ type: core.Input }]
        };
        return ShCtlStateDirective;
    }());
    if (false) {
        /** @type {?} */
        ShCtlStateDirective.prototype.state;
        /** @type {?} */
        ShCtlStateDirective.prototype.onlyField;
        /**
         * @type {?}
         * @private
         */
        ShCtlStateDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShCtlCommonModule = /** @class */ (function () {
        function ShCtlCommonModule() {
        }
        ShCtlCommonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SHCtlAllCharComponent,
                            SHCtlAllCharMLComponent,
                            SHCtlBunjNoComponent,
                            SHCtlDateComponent,
                            SHCtlHalfCharComponent,
                            SHCtlJigCodeComponent,
                            SHCtlJyuCodeComponent,
                            SHCtlKatakanaComponent,
                            SHCtlNumberComponent,
                            SHCtlSesyuCodeComponent,
                            SHCtlTanCodeComponent,
                            SHCtlTelNoComponent,
                            SHCtlTimeComponent,
                            SHCtlTokuCodeComponent,
                            SHCtlWideCharComponent,
                            SHCtlWideCharMLComponent,
                            SHCtlYearMonthComponent,
                            SHCtlZipNoComponent,
                            SHCtlKbnRadioComponent,
                            SHCtlKbnSelectComponent,
                            ShCtlPopupComponent,
                            ShCtlPopupMultiComponent,
                            SHCtlPopupDialogComponent,
                            SHCtlPopupDialogMultiComponent,
                            ShCtlValidatedErrorComponent,
                            SHCtlHalfNumberComponent,
                            SHCtlCheckComponent,
                            SHCtlLockScreenComponent,
                            NgDateValuePipe,
                            ShFlexRowDirective,
                            ShFlexDirective,
                            ShReadOnlyDirective,
                            ShCtlStateDirective,
                        ],
                        entryComponents: [
                            SHCtlPopupDialogComponent,
                            SHCtlPopupDialogMultiComponent,
                        ],
                        imports: [
                            forms.FormsModule,
                            common.CommonModule,
                            material.MatInputModule,
                            material.MatFormFieldModule,
                            forms.ReactiveFormsModule,
                            material.MatDialogModule,
                            material.MatTableModule,
                            material.MatButtonModule,
                            material.MatButtonToggleModule,
                            material.MatRadioModule,
                            material.MatSelectModule,
                            material.MatDatepickerModule,
                            material.MatNativeDateModule,
                            material.MatIconModule,
                            material.MatCheckboxModule,
                            material.MatProgressSpinnerModule,
                            shHttpClient.ShHttpClient
                        ],
                        exports: [
                            SHCtlAllCharComponent,
                            SHCtlAllCharMLComponent,
                            SHCtlBunjNoComponent,
                            SHCtlDateComponent,
                            SHCtlHalfCharComponent,
                            SHCtlJigCodeComponent,
                            SHCtlJyuCodeComponent,
                            SHCtlKatakanaComponent,
                            SHCtlNumberComponent,
                            SHCtlSesyuCodeComponent,
                            SHCtlTanCodeComponent,
                            SHCtlTelNoComponent,
                            SHCtlTimeComponent,
                            SHCtlTokuCodeComponent,
                            SHCtlWideCharComponent,
                            SHCtlWideCharMLComponent,
                            SHCtlYearMonthComponent,
                            SHCtlZipNoComponent,
                            SHCtlKbnRadioComponent,
                            SHCtlKbnSelectComponent,
                            ShCtlPopupComponent,
                            ShCtlPopupMultiComponent,
                            ShCtlValidatedErrorComponent,
                            SHCtlHalfNumberComponent,
                            SHCtlCheckComponent,
                            SHCtlLockScreenComponent,
                            NgDateValuePipe,
                            ShFlexRowDirective,
                            ShFlexDirective,
                            ShReadOnlyDirective,
                            ShCtlStateDirective
                        ],
                        providers: []
                    },] }
        ];
        return ShCtlCommonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * キー制御の初期化など
     */
    var   /**
     * キー制御の初期化など
     */
    ShAppComponent = /** @class */ (function () {
        /**
         * コンストラクタ
         */
        function ShAppComponent(redirectService) {
            this.redirectService = redirectService;
            this.init();
        }
        /**
         * コンポーネント初期化
         */
        /**
         * コンポーネント初期化
         * @return {?}
         */
        ShAppComponent.prototype.ngOnInit = /**
         * コンポーネント初期化
         * @return {?}
         */
        function () { };
        /**
         * 初期化
         */
        /**
         * 初期化
         * @private
         * @return {?}
         */
        ShAppComponent.prototype.init = /**
         * 初期化
         * @private
         * @return {?}
         */
        function () {
            this.redirect();
            this.keyValidation();
            this.setToekn();
        };
        /**
         * @private
         * @return {?}
         */
        ShAppComponent.prototype.redirect = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.redirectService.redirectPath) {
                this.redirectService.redirect();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ShAppComponent.prototype.setToekn = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var params = new URLSearchParams(location.search);
            /** @type {?} */
            var token = params.get('access_token');
            if (token) {
                sessionStorage.setItem("" + shHttpClient.ShHttpClientConst.AUTHORIZATION_TOKEN, token);
                params.delete("access_token");
                history.pushState(null, null, location.pathname);
            }
        };
        /**
         *@ エンター時にフォーカスを当てたくない場合の条件
         */
        /**
         * \@ エンター時にフォーカスを当てたくない場合の条件
         * @private
         * @param {?} elm
         * @return {?}
         */
        ShAppComponent.prototype.isTargetElement = /**
         * \@ エンター時にフォーカスを当てたくない場合の条件
         * @private
         * @param {?} elm
         * @return {?}
         */
        function (elm) {
            if (elm.type == 'hidden')
                return false;
            if (elm.style.display == 'none')
                return false;
            if (elm.style.opacity == '0')
                return false;
            if (elm.disabled)
                return false;
            /** @type {?} */
            var shctl = this.getShCtlElement(elm);
            if (this.checkShCtlAttr(shctl.attributes, [
                'hidden'
            ]))
                return false;
            return true;
        };
        /**
         * @private
         * @param {?} map
         * @param {?} targets
         * @return {?}
         */
        ShAppComponent.prototype.checkShCtlAttr = /**
         * @private
         * @param {?} map
         * @param {?} targets
         * @return {?}
         */
        function (map, targets) {
            return targets.map((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return map.getNamedItem(t) != null;
            })).includes(true);
        };
        /**
         * @private
         * @param {?} elm
         * @return {?}
         */
        ShAppComponent.prototype.getShCtlElement = /**
         * @private
         * @param {?} elm
         * @return {?}
         */
        function (elm) {
            /** @type {?} */
            var parent = elm.parentElement;
            if (!parent)
                return null;
            if (parent.tagName.includes('SH-CTL')) {
                return parent;
            }
            else {
                return this.getShCtlElement(parent);
            }
        };
        /**
         * キーバリデーション付与
         */
        /**
         * キーバリデーション付与
         * @return {?}
         */
        ShAppComponent.prototype.keyValidation = /**
         * キーバリデーション付与
         * @return {?}
         */
        function () {
            var _this = this;
            window.document.onkeydown = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F1 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F2 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F3 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F4 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F5 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F6 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F10 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F11 ||
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_F12) {
                    return false;
                }
                if (event.altKey &&
                    (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_LEFT ||
                        event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_RIGHT)) {
                    return false;
                }
                if ((event.ctrlKey || event.metaKey) &&
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_N) {
                    return false;
                }
                if ((event.ctrlKey || event.metaKey) &&
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_R) {
                    return false;
                }
                if ((event.ctrlKey || event.metaKey) &&
                    event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_D) {
                    return false;
                }
                if (event.keyCode === ShCtlConst.ORDINAL.KEYS.KEY_ENTER) {
                    /** @type {?} */
                    var input = (/** @type {?} */ (document.activeElement));
                    if (input != null) {
                        if (input.type != 'textarea') {
                            //次の操作可能なタグに切り替える
                            /** @type {?} */
                            var nodeList = window.document.querySelectorAll('.can-moved-with-the-enter-key');
                            /** @type {?} */
                            var filteredInput = Array.from(nodeList).filter((/**
                             * @param {?} el
                             * @return {?}
                             */
                            function (el) {
                                return _this.isTargetElement((/** @type {?} */ (el)));
                            }));
                            /** @type {?} */
                            var preInput = null;
                            for (var i = 0; i < filteredInput.length; i++) {
                                /** @type {?} */
                                var cur_input = (/** @type {?} */ (filteredInput[i]));
                                if (input.name === cur_input.name) {
                                    if (++i >= filteredInput.length) {
                                        i = 0;
                                    }
                                    cur_input.blur();
                                    if (event.shiftKey) {
                                        preInput.focus();
                                    }
                                    else {
                                        /** @type {?} */
                                        var nextInput = (/** @type {?} */ (filteredInput[i]));
                                        nextInput.focus();
                                    }
                                    return false;
                                }
                                preInput = (/** @type {?} */ (filteredInput[i]));
                            }
                        }
                    }
                }
            });
        };
        return ShAppComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ShAppComponent.prototype.redirectService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShFormControlType = /** @class */ (function () {
        //コンストラクタでctlNameを必ず指定する
        function ShFormControlType(_ctlName) {
            //要素コントロール名
            this.ctlName = "SHFormControl";
            //表示レイアウト切り替えフラグ(true:閲覧専用/false:編集可能)
            this.isDisabled = false;
            //値バインド変数
            this.value = "";
            //タイトル名
            this.title = "";
            //コントロール挙動(auto/always/nevwer)
            this.floatLabel = "auto";
            //閲覧専用画面でのラベル幅(px)
            this.labelWidth = "150";
            //input要素に対するstyleの指定(形式：{ color: "red" })
            this.styles = {};
            //input要素に対するclassの指定(形式：{ "className": true } or "className className2")
            this.classes = {};
            //input要素に対する必須入力フラグ
            this.required = false;
            //input要素に対する状態の指定
            this.state = "";
            //input要素に対する文言の指定
            this.message = [""];
            this.ctlName = _ctlName;
        }
        return ShFormControlType;
    }());
    if (false) {
        /** @type {?} */
        ShFormControlType.prototype.ctlName;
        /** @type {?} */
        ShFormControlType.prototype.isDisabled;
        /** @type {?} */
        ShFormControlType.prototype.value;
        /** @type {?} */
        ShFormControlType.prototype.title;
        /** @type {?} */
        ShFormControlType.prototype.floatLabel;
        /** @type {?} */
        ShFormControlType.prototype.labelWidth;
        /** @type {?} */
        ShFormControlType.prototype.maxlength;
        /** @type {?} */
        ShFormControlType.prototype.styles;
        /** @type {?} */
        ShFormControlType.prototype.classes;
        /** @type {?} */
        ShFormControlType.prototype.required;
        /** @type {?} */
        ShFormControlType.prototype.state;
        /** @type {?} */
        ShFormControlType.prototype.message;
    }

    exports.SHCtlCommon = SHCtlCommon;
    exports.ShAppComponent = ShAppComponent;
    exports.ShCtlApiService = ShCtlApiService;
    exports.ShCtlCommonModule = ShCtlCommonModule;
    exports.ShFlexDirective = ShFlexDirective;
    exports.ShFlexRowDirective = ShFlexRowDirective;
    exports.ShFormControlType = ShFormControlType;
    exports.ShReadOnlyDirective = ShReadOnlyDirective;
    exports.ɵa = SHCtlAllCharComponent;
    exports.ɵb = SHFormControl;
    exports.ɵba = SHCtlKbnSelectComponent;
    exports.ɵbb = ShCtlPopupComponent;
    exports.ɵbc = ShCtlPopupMultiComponent;
    exports.ɵbd = SHCtlPopupDialogComponent;
    exports.ɵbe = SHCtlPopupDialogMultiComponent;
    exports.ɵbf = ShCtlValidatedErrorComponent;
    exports.ɵbg = SHCtlHalfNumberComponent;
    exports.ɵbh = SHCtlCheckComponent;
    exports.ɵbi = SHCtlLockScreenComponent;
    exports.ɵbj = NgDateValuePipe;
    exports.ɵbk = ShCtlStateDirective;
    exports.ɵc = SHCtlAllCharMLComponent;
    exports.ɵd = SHCtlBunjNoComponent;
    exports.ɵe = SHCtlDateComponent;
    exports.ɵf = JpDateAdapter;
    exports.ɵg = SHCtlHalfCharComponent;
    exports.ɵh = SHCtlJigCodeComponent;
    exports.ɵi = SHFormPopup;
    exports.ɵj = SmplPopupService;
    exports.ɵk = BindCtlService;
    exports.ɵl = LockScreenService;
    exports.ɵm = SHCtlJyuCodeComponent;
    exports.ɵn = SHCtlKatakanaComponent;
    exports.ɵo = SHCtlNumberComponent;
    exports.ɵp = SHCtlSesyuCodeComponent;
    exports.ɵq = SHCtlTanCodeComponent;
    exports.ɵr = SHCtlTelNoComponent;
    exports.ɵs = SHCtlTimeComponent;
    exports.ɵt = SHCtlTokuCodeComponent;
    exports.ɵu = SHCtlWideCharComponent;
    exports.ɵv = SHCtlWideCharMLComponent;
    exports.ɵw = SHCtlYearMonthComponent;
    exports.ɵx = SHCtlZipNoComponent;
    exports.ɵy = SHCtlKbnRadioComponent;
    exports.ɵz = SmplKbnCodeService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=sh-form-control.umd.js.map
