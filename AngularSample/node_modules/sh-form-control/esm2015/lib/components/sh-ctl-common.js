/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class SHCtlCommon {
    /**
     * 指定したフォーマットでDateをstringに変換
     * @param {?} date
     * @param {?} format
     * @return {?}
     */
    static getDateStr(date, format) {
        format = format.replace(/YYYY/g, date.getFullYear().toString());
        format = format.replace(/MM/g, ('0' + (date.getMonth() + 1).toString()).slice(-2).toString());
        format = format.replace(/dd/g, ('0' + date.getDate()).slice(-2).toString());
        return format;
    }
    /**
     * 中身が空かどうかの判定
     * @param {?} obj
     * @return {?}
     */
    static isBlank(obj) {
        if (obj === undefined)
            return true;
        if (obj === null)
            return true;
        if (typeof (obj) === "string" && obj === "")
            return true;
        if (typeof (obj) === "object" && (obj.length !== undefined && obj.length <= 0))
            return true;
        return false;
    }
    /**
     * 指定された値または0でパディングする
     * @param {?} num パディング対象値
     * @param {?} length 　値の長さ
     * @param {?=} option 何でパディングしたいか
     * @return {?}
     */
    static padding(num, length, option) {
        //指定がなければ0
        option = option || "0";
        //数値型に変換
        num = Number(num);
        //数値でなければnullを返す
        if (isNaN(num))
            return null;
        return (Array(length).join(option) + num).slice(-length);
    }
    /**
     * 改行の削除
     * @param {?} str 　改行削除したい文字列
     * @return {?}
     */
    static LineBreak(str) {
        /** @type {?} */
        let tmp = str.replace(/\r?\n/g, "");
        return tmp;
    }
    /*********************************************************
       * 新:入力チェック
       * ********************************************************/
    /**
     * 全角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFullWidth(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[^\x01-\x7E\xA1-\xDF]/g, '');
    }
    /**
     * 半角入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfChar(event) {
        if (!event)
            return;
        event.target.value = event.target.value.match(/[ -~｡-ﾟ]+/g);
    }
    /**
     * 数値入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceNumeric(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/\d*/g, "");
    }
    /**
     * スペース入力チェック(半角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceSpace(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "");
    }
    /**
     * スペース入力チェック(半角)→(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfSpaceToFull(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/ /g, "　");
    }
    /**
     * スペース入力チェック(全角)
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFUllSpace(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/　/g, "");
    }
    /**
     * アルファベット入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfWidth(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(/[a-zA-Z]/g, "");
    }
    /**
     * 記号入力チェック
     * @param {?} event inputイベント
     * @param {?=} exclusionValue 入力を許容したい記号の配列
     * @return {?}
     */
    static replaceSign(event, exclusionValue) {
        if (!event)
            return;
        event.target.value = event.target.value.replace(new RegExp(SHCtlCommon.getRestrictedSign(exclusionValue), "g"), "");
    }
    /**
     * 全角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceFullDoubleQuote(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("”", "＂");
    }
    /**
     * 半角ダブルクォーテーション入力チェック
     * @param {?} event inputイベント
     * @return {?}
     */
    static replaceHalfDoubleQuote(event) {
        if (!event)
            return;
        event.target.value = event.target.value.replace("\"", "ﾞ");
    }
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    static replaceHalf(event) {
        event.target.value = event.target.value.replace(/[A-Za-z0-9-!"#$%&'()=<>,.?_\[\]|{}@`^~\\/+;*:}]/g, (/**
         * @param {?} inputTargetValue
         * @return {?}
         */
        function (inputTargetValue) {
            return String.fromCharCode(inputTargetValue.charCodeAt(0) + 65248);
        }));
        return event.target.value;
    }
    /**
     * フォーマット設定
     * @param {?} event
     * @return {?}
     */
    static replaceHalfKana(event) {
        /** @type {?} */
        let kanaMap = {
            'ｶﾞ': 'ガ', 'ｷﾞ': 'ギ', 'ｸﾞ': 'グ', 'ｹﾞ': 'ゲ', 'ｺﾞ': 'ゴ',
            'ｻﾞ': 'ザ', 'ｼﾞ': 'ジ', 'ｽﾞ': 'ズ', 'ｾﾞ': 'ゼ', 'ｿﾞ': 'ゾ',
            'ﾀﾞ': 'ダ', 'ﾁﾞ': 'ヂ', 'ﾂﾞ': 'ヅ', 'ﾃﾞ': 'デ', 'ﾄﾞ': 'ド',
            'ﾊﾞ': 'バ', 'ﾋﾞ': 'ビ', 'ﾌﾞ': 'ブ', 'ﾍﾞ': 'ベ', 'ﾎﾞ': 'ボ',
            'ﾊﾟ': 'パ', 'ﾋﾟ': 'ピ', 'ﾌﾟ': 'プ', 'ﾍﾟ': 'ペ', 'ﾎﾟ': 'ポ',
            'ｳﾞ': 'ヴ', 'ﾜﾞ': 'ヷ', 'ｦﾞ': 'ヺ',
            'ｱ': 'ア', 'ｲ': 'イ', 'ｳ': 'ウ', 'ｴ': 'エ', 'ｵ': 'オ',
            'ｶ': 'カ', 'ｷ': 'キ', 'ｸ': 'ク', 'ｹ': 'ケ', 'ｺ': 'コ',
            'ｻ': 'サ', 'ｼ': 'シ', 'ｽ': 'ス', 'ｾ': 'セ', 'ｿ': 'ソ',
            'ﾀ': 'タ', 'ﾁ': 'チ', 'ﾂ': 'ツ', 'ﾃ': 'テ', 'ﾄ': 'ト',
            'ﾅ': 'ナ', 'ﾆ': 'ニ', 'ﾇ': 'ヌ', 'ﾈ': 'ネ', 'ﾉ': 'ノ',
            'ﾊ': 'ハ', 'ﾋ': 'ヒ', 'ﾌ': 'フ', 'ﾍ': 'ヘ', 'ﾎ': 'ホ',
            'ﾏ': 'マ', 'ﾐ': 'ミ', 'ﾑ': 'ム', 'ﾒ': 'メ', 'ﾓ': 'モ',
            'ﾔ': 'ヤ', 'ﾕ': 'ユ', 'ﾖ': 'ヨ',
            'ﾗ': 'ラ', 'ﾘ': 'リ', 'ﾙ': 'ル', 'ﾚ': 'レ', 'ﾛ': 'ロ',
            'ﾜ': 'ワ', 'ｦ': 'ヲ', 'ﾝ': 'ン',
            'ｧ': 'ァ', 'ｨ': 'ィ', 'ｩ': 'ゥ', 'ｪ': 'ェ', 'ｫ': 'ォ',
            'ｯ': 'ッ', 'ｬ': 'ャ', 'ｭ': 'ュ', 'ｮ': 'ョ'
        };
        /** @type {?} */
        let reg = new RegExp('[' + Object.keys(kanaMap) + ']', 'g');
        return event.target.value = event.target.value.replace(reg, (/**
         * @param {?} match
         * @return {?}
         */
        match => {
            return kanaMap[match];
        }));
    }
    /**
     * input値の入力文字数制限
     * @param {?} event inputイベント
     * @param {?} maxlength 入力制限文字数
     * @return {?}
     */
    static sliceLength(event, maxlength) {
        if (!event)
            return;
        event.target.value = event.target.value.slice(0, maxlength);
    }
    /**
     * 入力制限記号の取得
     * @private
     * @param {?} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    static getRestrictedSign(exclusionValue) {
        if (exclusionValue === undefined || exclusionValue.length === 0)
            return SHCtlCommon.exclude();
        return SHCtlCommon.exclude(exclusionValue);
    }
    /**
     * itemが条件に適しているならtrueを返す
     * @param {?} item
     * @return {?}
     */
    static needsEscape(item) {
        if (item === "." || item === "*" || item === "-" || item === "+" || item === "[" || item === "]")
            return true;
    }
    /**
     * itemの前にダブルバックスラッシュ付与する
     * @param {?} item
     * @return {?}
     */
    static escapeByBackSlash(item) {
        /** @type {?} */
        const escapedValue = "\\" + item;
        return escapedValue;
    }
    /**
     * 入力不可対象の記号から指定した文字列を除外する
     * "+" "." などエスケープが必要な文字には　"\"をつける　ex"\+"
     * @private
     * @param {?=} exclusionValue 入力可能文字の配列
     * @return {?}
     */
    static exclude(exclusionValue) {
        /** @type {?} */
        let excludeIndex = null;
        /** @type {?} */
        let signsList = this.signs.split("");
        signsList.map((/**
         * @param {?} item
         * @param {?} index
         * @param {?} array
         * @return {?}
         */
        (item, index, array) => {
            if (exclusionValue !== undefined)
                excludeIndex = exclusionValue.indexOf(item);
            if (excludeIndex !== -1 && excludeIndex !== null)
                array[index] = "";
            if (array[index] !== "" && index !== 0 && index !== signsList.length - 1) {
                if (this.needsEscape(item))
                    array[index] = this.escapeByBackSlash(item);
            }
        }));
        return signsList.join("");
    }
    /**
     * カスタムコントロールコンポーネント内の要素名重複を避けるためのユニークキー
     * カスタムコントロール1つに対し1つ持つ
     * @return {?}
     */
    static getUniqueStr() {
        return "uk-" + Math.random().toString(36).slice(-8);
    }
    /**
     * 従業員コードの変換(6桁→8桁)
     * @param {?} s コード文字列
     * @return {?} 変換後のコード文字列
     */
    static convJyuCode6To8(s) {
        // ブランクなら
        if (this.isBlank(s))
            return '';
        // 6桁以外処理しない
        if (s.trim().length != 6 && !isNaN(parseInt(s.toString())))
            return s;
        /** @type {?} */
        let sJyuCode = s;
        /** @type {?} */
        let result = '00';
        if (((sJyuCode == '922222') || (sJyuCode == '933333') ||
            (sJyuCode == '944444') || (sJyuCode == '955555') ||
            (sJyuCode == '966666') || (sJyuCode == '977777') ||
            (sJyuCode == '988888')) || ((sJyuCode >= '999000') && (sJyuCode <= '999999'))) {
            result = '99' + sJyuCode;
        }
        else {
            /** @type {?} */
            let strCd = sJyuCode.substr(0, 1).toUpperCase();
            sJyuCode = sJyuCode.replace(/[c|k|s]/g, '');
            if (strCd == 'C' || strCd == 'S') {
                //左1文字　[C]か[S]のとき
                /** @type {?} */
                let subNumber = sJyuCode.substr(2, 2);
                //左に文字目から自分含め２文字目が　
                if (Number(subNumber) >= 0 && Number(subNumber) <= 49) {
                    //>= 0 および　 <=49 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 および　 <=49 でない場合
                    result = '19' + sJyuCode;
                }
            }
            else if (strCd == 'K') {
                //左1文字　[C]か[S]のときでなく[K]の場合
                result = '00' + sJyuCode;
            }
            else {
                //左1文字　上記以外
                /** @type {?} */
                let rStr = sJyuCode.substr(-2, 2);
                //左２文字が
                if (Number(rStr) >= 0 && Number(rStr) <= 43) {
                    //     >= 0 及び　<= 43 の場合
                    result = '20' + sJyuCode;
                }
                else {
                    //>= 0 及び　<= 43 でない場合
                    result = '19' + sJyuCode;
                }
            }
        }
        // 整形文字返却
        return result;
    }
}
SHCtlCommon.Const = {
    keyCodes: {
        numerics: { min: 48, max: 57 },
        // 半角1 to 0
        tenKeyNumerics: { min: 96, max: 105 },
        // テンキーの半角0 to 9
        enter: 13,
        // エンター
        chars: { min: 65, max: 90 },
        // 半角a to z
        space: 32,
        // 半角スペース
        wideChara: 229,
        // 全角
        okCharas: {
            "65": "a", "67": "c", "86": "v", "88": "x", "90": "z"
        },
        // Ctrlとの組み合わせ
        signs: {
            // 半角記号
            "186": ":", "187": ";", "188": ",", "189": "-", "190": ".", "191": "/",
            "192": "@", "219": "[", "220": "\\", "221": "]", "222": "^", "226": "_",
            "111": "/", "106": "*", "109": "-", "107": "+", "110": "." // テンキーの分
        },
        minus: [109, 189],
        // 半角マイナス(ハイフン)
        dot: [110, 190],
        // 半角ドット
        slash: [111, 191],
        // 半角スラッシュ
        plus: [107, 187],
    },
    state: {
        none: 'none',
        danger: 'danger',
        warning: 'warning',
        success: 'success',
    },
    timeFormat: {
        HH: 3600,
        HHMM: 60,
        HHMMSS: 1,
    }
};
SHCtlCommon.signs = "[\\\\!\"#$%&'()\*\+\-\.,\/:;<=>?@\[\]^_`{|}~]";
SHCtlCommon.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ SHCtlCommon.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SHCtlCommon_Factory() { return new SHCtlCommon(); }, token: SHCtlCommon, providedIn: "root" });
if (false) {
    /** @type {?} */
    SHCtlCommon.Const;
    /**
     * @type {?}
     * @private
     */
    SHCtlCommon.signs;
}
//# sourceMappingURL=data:application/json;base64,