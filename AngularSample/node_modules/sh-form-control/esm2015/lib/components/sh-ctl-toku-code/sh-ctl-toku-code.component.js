/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { SHCtlCommon } from '../sh-ctl-common';
import { SHFormControl } from '../../utilities/ShFormControl';
export class SHCtlTokuCodeComponent extends SHFormControl {
    constructor() {
        super();
        this.ctlName = "SHCtlTokuCode";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceSign(event);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        event.target.value = this.toText(event.target.value);
        this.valueChange.emit(this.toValue(event.target.value));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toValue(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        event.target.value = this.toText(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * 先頭零埋
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
        if (inputTargetValue.length == 0) {
            return "";
        }
        else if (inputTargetValue.length > 9) {
            return inputTargetValue;
        }
        /** @type {?} */
        let result = (("00000000" + inputTargetValue).slice(-9));
        return result;
    }
    /**
     * 零除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toValue(inputTargetValue) {
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        inputTargetValue = inputTargetValue.replace(/[a-zA-Z]/g, "");
        return inputTargetValue;
    }
}
SHCtlTokuCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-toku-code',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [placeholder]=\"title\" [required]=\"required\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n        (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlTokuCode can-moved-with-the-enter-key {{strClass}}\" (change)=\"onChange($event)\"\r\n      (input)=\"onInput($event)\" maxlength=\"{{maxlength}}\" [disabled]=\"disabled\" type=\"tel\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{value}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTokuCodeComponent.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY3RsLXRva3UtY29kZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaC1mb3JtLWNvbnRyb2wvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zaC1jdGwtdG9rdS1jb2RlL3NoLWN0bC10b2t1LWNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFPN0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGFBQXFCO0lBRS9EO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRU0sUUFBUTtRQUNiLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFNTSxPQUFPLENBQUMsS0FBVTtRQUN2QixXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7O0lBTU0sT0FBTyxDQUFDLEtBQUs7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQU1NLFFBQVEsQ0FBQyxLQUFVO1FBQ3hCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXhELFVBQVU7OztRQUFDLEdBQUcsRUFBRSxHQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBTU0sT0FBTyxDQUFDLEtBQUs7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUUxQixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUV0QixVQUFVOzs7UUFBQyxHQUFHLEVBQUUsR0FBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUEsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7OztJQU1NLE1BQU0sQ0FBQyxLQUFLO1FBQ2pCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJELFVBQVU7OztRQUFDLEdBQUcsRUFBRSxHQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7UUFBQSxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQU1NLE1BQU0sQ0FBQyxnQkFBZ0I7UUFDNUIsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLHdCQUF3QixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0QsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sRUFBRSxDQUFDO1NBQ1g7YUFDSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEMsT0FBTyxnQkFBZ0IsQ0FBQztTQUN6Qjs7WUFDRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQU1NLE9BQU8sQ0FBQyxnQkFBZ0I7UUFDN0IsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDekMsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELGdCQUFnQixHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdELE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQzs7O1lBeEdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1Qix5bUZBQWdEOzthQUVqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNIQ3RsQ29tbW9uIH0gZnJvbSAnLi4vc2gtY3RsLWNvbW1vbic7XHJcbmltcG9ydCB7IFNIRm9ybUNvbnRyb2wgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvU2hGb3JtQ29udHJvbCdcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnc2gtY3RsLXRva3UtY29kZScsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3NoLWN0bC10b2t1LWNvZGUuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3NoLWN0bC10b2t1LWNvZGUuY29tcG9uZW50LmNzcycsICcuLi8uLi8uLi9zdHlsZS5jb21tb24uY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFNIQ3RsVG9rdUNvZGVDb21wb25lbnQgZXh0ZW5kcyBTSEZvcm1Db250cm9sPHN0cmluZz4gaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmN0bE5hbWUgPSBcIlNIQ3RsVG9rdUNvZGVcIjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMub25Jbml0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvbklucHV0XHJcbiAgICogQHBhcmFtIGV2ZW50IGlucHV0XHJcbiAgICovXHJcbiAgcHVibGljIG9uSW5wdXQoZXZlbnQ6IGFueSkge1xyXG4gICAgU0hDdGxDb21tb24ucmVwbGFjZUZVbGxTcGFjZShldmVudCk7XHJcbiAgICBTSEN0bENvbW1vbi5yZXBsYWNlU3BhY2UoZXZlbnQpO1xyXG4gICAgU0hDdGxDb21tb24ucmVwbGFjZUhhbGZXaWR0aChldmVudCk7XHJcbiAgICBTSEN0bENvbW1vbi5yZXBsYWNlRnVsbFdpZHRoKGV2ZW50KTtcclxuICAgIFNIQ3RsQ29tbW9uLnJlcGxhY2VTaWduKGV2ZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG9uQ2xpY2tcclxuICAgKiBAcGFyYW0gZXZlbnQgY2xpY2tcclxuICAgKi9cclxuICBwdWJsaWMgb25DbGljayhldmVudCkge1xyXG4gICAgdGhpcy5vbkJlZm9yZUNsaWNrKGV2ZW50KTtcclxuXHJcbiAgICB0aGlzLm9uQWZ0ZXJDbGljayhldmVudCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvbkNoYW5nZVxyXG4gICAqIEBwYXJhbSBldmVudCBjaGFuZ2VcclxuICAgKi9cclxuICBwdWJsaWMgb25DaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgdGhpcy5vbkJlZm9yZUNoYW5nZShldmVudCk7XHJcblxyXG4gICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gdGhpcy50b1RleHQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnRvVmFsdWUoZXZlbnQudGFyZ2V0LnZhbHVlKSk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7dGhpcy5vbkFmdGVyQ2hhbmdlKGV2ZW50KX0sIDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb25Gb2N1c1xyXG4gICAqIEBwYXJhbSBldmVudCBmb2N1c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvbkZvY3VzKGV2ZW50KSB7XHJcbiAgICB0aGlzLm9uQmVmb3JlRm9jdXMoZXZlbnQpO1xyXG5cclxuICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IHRoaXMudG9WYWx1ZShldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgZXZlbnQudGFyZ2V0LnNlbGVjdCgpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge3RoaXMub25BZnRlckZvY3VzKGV2ZW50KX0sIDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb25CbHVyXHJcbiAgICogQHBhcmFtIGV2ZW50IGJsdXJcclxuICAgKi9cclxuICBwdWJsaWMgb25CbHVyKGV2ZW50KSB7XHJcbiAgICB0aGlzLm9uQmVmb3JlQmx1cihldmVudCk7XHJcblxyXG4gICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gdGhpcy50b1RleHQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLm9uQWZ0ZXJCbHVyKGV2ZW50KTt9LCAwKTs7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhYjpoK3pm7bln4tcclxuICAgKiBAcGFyYW0gaW5wdXRUYXJnZXRWYWx1ZSBldmVudC50YXJnZXQudmFsdWVcclxuICAgKi9cclxuICBwdWJsaWMgdG9UZXh0KGlucHV0VGFyZ2V0VmFsdWUpIHtcclxuICAgIGlucHV0VGFyZ2V0VmFsdWUgPSBpbnB1dFRhcmdldFZhbHVlLnJlcGxhY2UoL1teXFx4MDEtXFx4N0VcXHhBMS1cXHhERl0vZywgXCJcIik7XHJcbiAgICBpbnB1dFRhcmdldFZhbHVlID0gaW5wdXRUYXJnZXRWYWx1ZS5yZXBsYWNlKC9bYS16QS1aXS9nLCBcIlwiKTtcclxuICAgIGlmIChpbnB1dFRhcmdldFZhbHVlLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5wdXRUYXJnZXRWYWx1ZS5sZW5ndGggPiA5KSB7XHJcbiAgICAgIHJldHVybiBpbnB1dFRhcmdldFZhbHVlO1xyXG4gICAgfVxyXG4gICAgbGV0IHJlc3VsdCA9ICgoXCIwMDAwMDAwMFwiICsgaW5wdXRUYXJnZXRWYWx1ZSkuc2xpY2UoLTkpKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpm7bpmaTljrtcclxuICAgKiBAcGFyYW0gaW5wdXRUYXJnZXRWYWx1ZSBldmVudC50YXJnZXQudmFsdWVcclxuICAgKi9cclxuICBwdWJsaWMgdG9WYWx1ZShpbnB1dFRhcmdldFZhbHVlKSB7XHJcbiAgICBpZiAoU0hDdGxDb21tb24uaXNCbGFuayhpbnB1dFRhcmdldFZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIGlucHV0VGFyZ2V0VmFsdWUgPSBpbnB1dFRhcmdldFZhbHVlLnJlcGxhY2UoL1teXFx4MDEtXFx4N0VcXHhBMS1cXHhERl0vZywgXCJcIik7XHJcbiAgICBpbnB1dFRhcmdldFZhbHVlID0gaW5wdXRUYXJnZXRWYWx1ZS5yZXBsYWNlKC9bYS16QS1aXS9nLCBcIlwiKTtcclxuICAgIHJldHVybiBpbnB1dFRhcmdldFZhbHVlO1xyXG4gIH1cclxuXHJcbn1cclxuIl19