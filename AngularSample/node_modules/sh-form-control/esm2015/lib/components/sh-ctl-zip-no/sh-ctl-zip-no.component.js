/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { SHCtlCommon } from '../sh-ctl-common';
import { SHFormControl } from '../../utilities/ShFormControl';
export class SHCtlZipNoComponent extends SHFormControl {
    constructor() {
        super();
        this.isValidateError = false;
        this.errorMessage = "3桁か7桁のみ有効です。";
        this.ctlName = "SHCtlZipNo";
        this.maxlength = 7;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                if (changes.value.currentValue != changes.value.previousValue
                    && changes.value.currentValue.length == this.maxlength) {
                    this.value = this.withHyphen(changes.value.currentValue);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.value != null) {
            this.changeFormat(this.value);
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSign(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.sliceLength(event, this.maxlength);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        if (!event.target.value) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterFocus(event); }), 0);
            return;
        }
        event.target.value = this.withoutHyphen(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
        return true;
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        if (!event.target.value) {
            setTimeout((/**
             * @return {?}
             */
            () => { this.onAfterBlur(event); }), 0);
            ;
            return;
        }
        event.target.value = this.withHyphen(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //入力桁数が間違っている場合に、自コンポーネントにフォーカスを戻す
        if (event.target.value.length != 0 && event.target.value.length != 3 && event.target.value.length != 7) {
            event.target.value = "";
            /** @type {?} */
            let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
            setTimeout((/**
             * @return {?}
             */
            () => { inputValue.focus(); }), 10);
        }
        this.valueChange.emit(event.target.value);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * ハイフン付与編集
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    withHyphen(inputTargetValue) {
        inputTargetValue = inputTargetValue.replace(/\ |\-/g, "");
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        inputTargetValue = inputTargetValue.replace(/[!"#$%&'()\*\+\.,\/:;<=>?@\[\\\]^_`{|}~a-zA-Z]/g, "");
        inputTargetValue = inputTargetValue.replace(/[^\x01-\x7E\xA1-\xDF]/g, "");
        if (isNaN(inputTargetValue)) {
            return "";
        }
        /** @type {?} */
        let zipcd = inputTargetValue.toString();
        if (zipcd.match(/^\d{3}-?\d{4}$/)) {
            zipcd = zipcd.substr(0, 3) + "-" + zipcd.substr(3);
        }
        return zipcd;
    }
    /**
     * ハイフン除去編集
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    withoutHyphen(inputTargetValue) {
        return new String(inputTargetValue).replace(/-/g, "");
    }
    /**
     * フォーマット編集
     * @param {?} value this.value
     * @return {?}
     */
    changeFormat(value) {
        if (!value) {
            this.stringValue = "";
            return;
        }
        /** @type {?} */
        let nullFirstString = null;
        /** @type {?} */
        let nullLastString = null;
        nullFirstString = value.slice(0, 3);
        nullLastString = value.slice(-4);
        this.stringValue = String(nullFirstString + "-" + nullLastString);
    }
}
SHCtlZipNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-zip-no',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n        class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\" [placeholder]=\"title\"\r\n        [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n        [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput attr.name=\"{{ctlName}}\"\r\n      class=\"form-control ShCtlZipNo can-moved-with-the-enter-key  {{strClass}}\" type=\"tel\"\r\n      [required]=\"required\" [disabled]=\"disabled\" [class.isValidateError]=\"isValidateError\" [ngStyle]=\"styles\"\r\n      [ngClass]=\"objClass\" [(ngModel)]=\"value\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (focus)=\"onFocus($event)\" (change)=\"onChange($event)\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlZipNoComponent.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SHCtlZipNoComponent.prototype.isValidateError;
    /** @type {?} */
    SHCtlZipNoComponent.prototype.errorMessage;
    /** @type {?} */
    SHCtlZipNoComponent.prototype.stringValue;
}
//# sourceMappingURL=data:application/json;base64,