/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { SHCtlCommon } from '../sh-ctl-common';
import { SHFormControl } from '../../utilities/ShFormControl';
import { ShCtlConst } from "../../constShCtl";
export class SHCtlNumberComponent extends SHFormControl {
    constructor() {
        super();
        this.min = 0;
        this.max = 99999999999;
        this.decimaldigit = 0;
        this.rounding = "round";
        this.firstFlag = true;
        this.ctlName = "SHCtlNumber";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * ngOnChangesイベント
     * 値変更時にフォーマットを整形
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value) {
            if (changes.value.currentValue) {
                if (changes.value.currentValue === '' || changes.value.currentValue === undefined || changes.value.currentValue === String(/[^\x01-\x7E\xA1-\xDF]+$/g)) {
                    this.value = '';
                    return;
                }
                if (parseFloat(changes.value.currentValue) < this.min) {
                    this.value = String(this.min);
                }
                if (parseFloat(changes.value.currentValue) > this.max) {
                    this.value = String(this.max);
                }
                this.stringValue = this.toText(changes.value.currentValue);
                if (this.rounding === "round") {
                    this.value = changes.value.currentValue;
                }
                if (String(changes.value.currentValue).indexOf(',') === -1) {
                    this.value = this.setMinMax(this.value);
                    this.value = this.toText(this.value);
                }
            }
        }
    }
    /**
     * ngAfterViewCheckedイベント
     * 表示画面と修正画面でカンマ編集
     * @return {?}
     */
    ngAfterViewChecked() {
        if (!this.firstFlag)
            return;
        //this.valueが存在するときに、カンマ編集をしなければならない。
        /** @type {?} */
        let matInputElement = document.activeElement.classList.contains('mat-input-element');
        if (this.firstFlag && this.value && !matInputElement) {
            this.value = this.toText(this.value);
        }
        //this.valueが存在するときに、firstFlagにfalseを代入しないと、カンマ編集がされなくなる
        if (this.value) {
            this.firstFlag = false;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceHalfWidth(event);
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFUllSpace(event);
        SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
        //2文字目以降の「-」の入力を受け付けない
        if (event.target.value.length > 1)
            event.target.value = event.target.value.slice(0, 1) + event.target.value.slice(1).replace(/[\-]/g, "");
        SHCtlCommon.replaceFullWidth(event);
        this.checkNumbersSigns(event);
        if (event.inputType !== 'insertCompositionText') {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceFUllSpace(event);
            SHCtlCommon.replaceSign(event, [",", "\.", "\-"]);
            SHCtlCommon.replaceFullWidth(event);
            SHCtlCommon.sliceLength(event, this.maxlength);
            this.checkNumbersSigns(event);
        }
    }
    /**
     * マッチした値を記号に置き換える
     * @param {?} event input
     * @return {?}
     */
    checkNumbersSigns(event) {
        event.target.value = event.target.value.replace(/^[\.|,]/g, "");
        event.target.value = event.target.value.replace(/[\.]{2,}/g, ".");
        event.target.value = event.target.value.replace(/[\,]{2,}/g, ",");
        event.target.value = event.target.value.replace(/[\-]{1,}/g, "-");
        if ((/\d.*\.\d.*/).test(event.target.value) && event.data === ".") {
            event.target.value = event.target.value.slice(0, event.target.value.length - 1);
        }
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onKeyDown
     * @param {?} event keydown
     * @return {?}
     */
    onKeyDown(event) {
        if (event.keyCode == ShCtlConst.ORDINAL.KEYS.KEY_TAB) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                event.target.value = this.toText(event.target.value);
            }), 0);
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        //emitの直前にも値の精査を行う
        this.onInput(event);
        //onChange発火時に数値でなければクリアする
        if (isNaN(Number(event.target.value)) === true) {
            event.target.value = '';
            return;
        }
        //min maxの値を反映させる
        event.target.value = this.setMinMax(event.target.value);
        event.target.value = this.toText(event.target.value);
        this.valueChange.emit(Number(this.removeComma(event.target.value)));
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterChange(event); }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.removeComma(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterFocus(event); }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        //桁数指定で値を丸める
        this.onBeforeBlur(event);
        //カンマ区切り
        setTimeout((/**
         * @return {?}
         */
        () => {
            event.target.value = this.toText(event.target.value);
        }), 0);
        setTimeout((/**
         * @return {?}
         */
        () => { this.onAfterBlur(event); }), 0);
        ;
    }
    /**
     * カンマ付きの値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        inputTargetValue = this.removeComma(inputTargetValue);
        if (!inputTargetValue)
            return null;
        if (isNaN(Number(inputTargetValue)))
            return null;
        if (this.rounding === "round") {
            //桁数指定で値を丸める
            /** @type {?} */
            let ret = parseFloat(parseFloat(inputTargetValue).toFixed(this.decimaldigit)).toString();
            return parseFloat(ret).toLocaleString(undefined, {
                minimumFractionDigits: this.decimaldigit,
                maximumFractionDigits: this.decimaldigit
            });
        }
        else if (this.rounding === "floor") {
            //桁数指定で値を丸める
            /** @type {?} */
            const FLOOR = (/**
             * @param {?} value
             * @param {?} decimalDigit
             * @return {?}
             */
            (value, decimalDigit) => this.decimalAdjust(this.rounding, value, decimalDigit));
            /** @type {?} */
            let ret = FLOOR(parseFloat(inputTargetValue), -this.decimaldigit).toString();
            return parseFloat(ret).toLocaleString(undefined, {
                minimumFractionDigits: this.decimaldigit,
                maximumFractionDigits: this.decimaldigit
            });
        }
        else if (this.rounding === "ceil") {
            //桁数指定で値を丸める
            /** @type {?} */
            const CEIL = (/**
             * @param {?} value
             * @param {?} decimalDigit
             * @return {?}
             */
            (value, decimalDigit) => this.decimalAdjust(this.rounding, value, decimalDigit));
            /** @type {?} */
            let ret = CEIL(parseFloat(inputTargetValue), -this.decimaldigit).toString();
            return parseFloat(ret).toLocaleString(undefined, {
                minimumFractionDigits: this.decimaldigit,
                maximumFractionDigits: this.decimaldigit
            });
        }
    }
    /**
     * min maxを反映した値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    setMinMax(inputTargetValue) {
        if (!inputTargetValue)
            return "";
        if (isNaN(Number(inputTargetValue)))
            return "";
        if (parseFloat(inputTargetValue) < this.min) {
            inputTargetValue = this.min.toString();
        }
        if (parseFloat(inputTargetValue) > this.max) {
            inputTargetValue = this.max.toString();
        }
        if (this.rounding === "round") {
            /** @type {?} */
            let w = Math.pow(10, this.decimaldigit);
            inputTargetValue = (Math.round(+inputTargetValue * w + 1e-10) / w).toString();
            return inputTargetValue;
        }
        else if (this.rounding === "floor" || this.rounding === "ceil") {
            return inputTargetValue;
        }
    }
    /**
     * roundingがfloorかceilの時に切り捨て切り上げ処理を行う
     * @param {?} type floor or ceil
     * @param {?} value value
     * @param {?} decimalDigit decimalDigit
     * @return {?}
     */
    decimalAdjust(type, value, decimalDigit) {
        if (typeof decimalDigit === 'undefined' || +decimalDigit === 0) {
            return Math[type](value);
        }
        value = +value;
        decimalDigit = +decimalDigit;
        if (isNaN(value) || !(typeof decimalDigit === 'number' && decimalDigit % 1 === 0)) {
            return NaN;
        }
        value = value.toString().split('e');
        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - decimalDigit) : -decimalDigit)));
        value = value.toString().split('e');
        value = +(value[0] + 'e' + (value[1] ? (+value[1] + decimalDigit) : decimalDigit));
        return value;
    }
    /**
     * カンマを外した値を返す
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    removeComma(inputTargetValue) {
        inputTargetValue = new String(inputTargetValue).replace(/,/g, "");
        return inputTargetValue;
    }
}
SHCtlNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'sh-ctl-number',
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <mat-form-field class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n      <input #inputElm matInput [required]=\"required\" [placeholder]=\"title\" (focus)=\"onFocus($event)\" type=\"email\" title=\"\"\r\n        [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\"\r\n        value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\" (keydown)=\"onKeyDown($event)\"\r\n        (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"only-field\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input #inputElm matInput [required]=\"required\" (focus)=\"onFocus($event)\"\r\n      [(ngModel)]=\"value\" attr.name=\"{{ctlName}}\" class=\"form-control can-moved-with-the-enter-key {{strClass}}\" title=\"\"\r\n      value=\"\" style=\"text-align: right; \" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n      (change)=\"onChange($event)\" [disabled]=\"disabled\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" />\r\n    <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n      aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div fxFlex class=\"valueOutput\">\r\n        {{stringValue}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".item-title{margin-left:.5%;margin-right:25%}.display-ctl-view{display:-webkit-box;display:flex}.display-result{display:-webkit-box;display:flex;margin-left:30px}.valueOutput{-webkit-box-flex:1;flex:1;padding-top:4px}.validation-error::ng-deep .mat-form-field-label{color:red}.validation-error::ng-deep .mat-form-field-underline{background-color:red}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlNumberComponent.ctorParameters = () => [];
SHCtlNumberComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    decimaldigit: [{ type: Input }],
    rounding: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlNumberComponent.prototype.min;
    /** @type {?} */
    SHCtlNumberComponent.prototype.max;
    /** @type {?} */
    SHCtlNumberComponent.prototype.decimaldigit;
    /** @type {?} */
    SHCtlNumberComponent.prototype.rounding;
    /** @type {?} */
    SHCtlNumberComponent.prototype.stringValue;
    /** @type {?} */
    SHCtlNumberComponent.prototype.firstFlag;
}
//# sourceMappingURL=data:application/json;base64,