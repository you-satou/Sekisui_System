/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, } from "@angular/core";
import { SHCtlCommon } from "../sh-ctl-common";
import { MatDialog } from "@angular/material";
import { SHFormPopup } from "../../utilities/ShFormPopup";
import { SmplPopupService } from "../../services/smpl-popup.service";
import { SHCtlPopupDialogComponent } from "../sh-ctl-popup-dialog/sh-ctl-popup-dialog.component";
import { ShCtlConst } from "../../constShCtl";
import { BindCtlService } from "../../services/bind-ctl.service";
import { LockScreenService } from "../../services/lock-screen.service";
export class SHCtlTanCodeComponent extends SHFormPopup {
    /**
     * @param {?} smplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(smplPopupService, dialog, bindCtlService, lockScreenService) {
        super(smplPopupService, dialog, bindCtlService, lockScreenService);
        this.smplPopupService = smplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        this.obj = ".SHCtlTanCode";
        this.enabledHalfKanaInput = true;
        this.ctlName = "SHCtlTanCode";
        this.maxlength = 6;
    }
    /**
     * コンポーネントに値がバインドされた後で呼び出される
     * プロパティの初期化
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        event.target.value = event.target.value.replace(/[^0-9]/g, "");
        SHCtlCommon.sliceLength(event, this.maxlength);
        if (!this.enabledHalfKanaInput) {
            SHCtlCommon.replaceFullWidth(event);
        }
        event.target.value = event.target.value.replace(/["！”＃＄％＆’（）＝～｜‘｛＋＊｝＜＞？＿－＾￥＠「；：」、。・"]/g, "");
        if (event.target.value.length >= 6 &&
            event.inputType != "deleteContentBackward") {
            if (isNaN(parseInt(event.target.value)) &&
                event.target.value.length != 7) {
                return;
            }
            return;
        }
        if (event.inputType !== "insertCompositionText") {
            SHCtlCommon.replaceSpace(event);
            SHCtlCommon.replaceSign(event);
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        /** @type {?} */
        let flg = false;
        if (this.noChangeFlg == `OFF`) {
            flg = true;
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                event.target.value) {
                this.fetchCodes(this.apiUrl).then((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.valueChange.emit(value);
                    event.target.value = this.toText(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.onAfterChange(event);
                    }), 0);
                }));
            }
            else {
                this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
                event.target.value = this.setName(event.target.value);
                this.valueChange.emit(event.target.value);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.onAfterChange(event);
                }), 0);
            }
        }
        if (!flg) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                // this.noChangeFlg == `OFF`;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.noChangeFlg = `OFF`;
                }), 1000);
                this.valueChange.emit(event.target.value);
                this.onAfterChange(event);
                event.target.value = this.toText(event.target.value);
            }), 0);
        }
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        /** @type {?} */
        let extendWidth;
        if (this.codes) {
            if (!this.popupWidth &&
                this.codes.length != 0 &&
                Object.values(this.codes[0]).length >= 4) {
                this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
            }
            /** @type {?} */
            let rawCodes;
            /** @type {?} */
            let rawCodesArray = [];
            for (let i = 0; this.codes.length > i; i++) {
                rawCodes = this.codes[i].contactCode;
                rawCodesArray.push(rawCodes);
                /** @type {?} */
                let code = Object.values(this.codes[i])[this.bindColumnKey - 1].toString()
                    .substr(2);
                this.codes[i].contactCode = code;
            }
            this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
                height: ShCtlConst.DIALOG_HEIGHT,
                width: extendWidth,
                data: {
                    dataTitle: this.dataTitle,
                    codes: this.codes,
                    codesHeader: this.codesHeader,
                    hiddenColumns: this.hiddenColumns,
                },
            });
            this.dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (result) {
                    this.setValueName(result);
                    this.bindCtlService.setNoChangeFlg({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.bindCtlService.setBindValue({
                        bindColumnArray: this.bindColumnArray,
                        record: result,
                    });
                    this.noChangeFlg = `ON`;
                    this.valueChange.emit(this.extractBindValue(result));
                    this.ownValueInputElm.dispatchEvent(new Event("change"));
                }
            }));
        }
    }
    /**
     * 選択された区分コードに紐づく区分名を設定
     * @param {?} val
     * @return {?}
     */
    setName(val) {
        /** @type {?} */
        let record;
        val = this.toText(val);
        if (val.length == 6) {
            record = this.codes.find((/**
             * @param {?} element
             * @return {?}
             */
            (element) => this.toText(Object.values(element)[this.bindColumnKey - 1]).includes(val)));
        }
        if (record != null) {
            /** @type {?} */
            const name = (/** @type {?} */ (Object.values(record)[this.bindColumnValue - 1]));
            if (name && val.length == 6) {
                this.setValueName(record);
                this.noChangeFlg = "ON";
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                this.bindCtlService.setNoChangeFlg({
                    bindColumnArray: this.bindColumnArray,
                    record,
                });
                val = Object.values(record)[this.bindColumnKey - 1];
                /** @type {?} */
                const inputElement = this.ownValueInputElm;
                if (inputElement) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        inputElement.value = this.toText(val);
                    }), 0);
                }
            }
        }
        else {
            val = ``;
        }
        return val;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkValue(value) {
        if (!value)
            return false;
        if (value.length < 6) {
            this.clearValue();
            return false;
        }
        //let matchedArray = [];
        if (this.codes[0]) {
            /** @type {?} */
            const filterResult = this.codes.filter((/**
             * @param {?} element
             * @return {?}
             */
            (element) => 
            //this.hasMatchRecords(element, value)
            ((/** @type {?} */ (Object.values(element)[this.bindColumnKey - 1]))).includes(value)));
            if (filterResult.length == 0) {
                this.clearValue();
                return false;
            }
            if (filterResult.length >= 2) {
                alert(value + "に複数の候補が検出されました");
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
        }
        return true;
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        this.onAfterClick(event);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.value = this.toText(event.target.value);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
    /**
     * onKeyUp
     * @param {?} event KeyUp
     * @return {?}
     */
    onKeyUp(event) {
        if (!event.isComposing) {
            event.target.value = this.toHankaku(this.hiraganaToKatagana(event.target.value));
        }
    }
    /**
     * 先頭除去
     * @param {?} inputTargetValue event.target.value
     * @return {?}
     */
    toText(inputTargetValue) {
        if (SHCtlCommon.isBlank(inputTargetValue)) {
            return "";
        }
        if (inputTargetValue.length === 8) {
            return inputTargetValue.substr(2);
        }
        return inputTargetValue;
    }
    /**
     * ひらがなをカタカナに変換
     * @param {?} inputValue
     * @return {?}
     */
    hiraganaToKatagana(inputValue) {
        return inputValue.replace(/[\u3041-\u3096]/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            /** @type {?} */
            var chr = match.charCodeAt(0) + 0x60;
            return String.fromCharCode(chr);
        }));
    }
    /**
     * 入力文字を半角カナに変換
     * @param {?} inputValue
     * @return {?}
     */
    toHankaku(inputValue) {
        /** @type {?} */
        let half = "0123456789";
        half += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        half += "abcdefghijklmnopqrstuvwxyz";
        half += "｡､｢\\｣;:･-+|_@., ";
        half += "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝｧｨｩｪｫｯｬｭｮｰ";
        /** @type {?} */
        let halfArr = new Array("ｳﾞ", "ｶﾞ", "ｷﾞ", "ｸﾞ", "ｹﾞ", "ｺﾞ", "ｻﾞ", "ｼﾞ", "ｽﾞ", "ｾﾞ", "ｿﾞ", "ﾀﾞ", "ﾁﾞ", "ﾂﾞ", "ﾃﾞ", "ﾄﾞ", "ﾊﾞ", "ﾋﾞ", "ﾌﾞ", "ﾍﾞ", "ﾎﾞ", "ﾊﾟ", "ﾋﾟ", "ﾌﾟ", "ﾍﾟ", "ﾎﾟ");
        /** @type {?} */
        let full = "０１２３４５６７８９";
        full += "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ";
        full += "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ";
        full += "。、「￥」；：・－＋｜＿＠．，　";
        full +=
            "アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲンァィゥェォッャュョー";
        /** @type {?} */
        let fullArr = new Array("ヴ", "ガ", "ギ", "グ", "ゲ", "ゴ", "ザ", "ジ", "ズ", "ゼ", "ゾ", "ダ", "ヂ", "ヅ", "デ", "ド", "バ", "ビ", "ブ", "ベ", "ボ", "パ", "ピ", "プ", "ペ", "ポ");
        /** @type {?} */
        let str = "";
        //半角カナ用
        for (let i = 0; i < halfArr.length; i++) {
            /** @type {?} */
            let reg = new RegExp(fullArr[i], "g");
            inputValue = inputValue.replace(reg, halfArr[i]);
        }
        for (let i = 0; i < inputValue.length; i++) {
            /** @type {?} */
            let oneStr = inputValue.charAt(i);
            /** @type {?} */
            let num = full.indexOf(oneStr, 0);
            oneStr = num >= 0 ? half.charAt(num) : oneStr;
            str += oneStr;
        }
        return str;
    }
}
SHCtlTanCodeComponent.decorators = [
    { type: Component, args: [{
                selector: "sh-ctl-tan-code",
                template: "<ng-container *ngIf=\"!onlyField; else onlyFieldControl\">\r\n  <div *ngIf=\"!isDisabled\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n    <div class=\"sh-flex sh-flex-center\">\r\n      <mat-form-field style=\"width: 33.3%;\" class=\"mat-validation\" [floatLabel]=\"floatLabel\">\r\n        <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n          [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n          (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n          [placeholder]=\"title\" [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n        <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n          aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </mat-form-field>\r\n      <mat-form-field style=\"width: 66.6%;\" class=\"result-container\">\r\n        <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n          attr.name=\"{{popupLabelName}}\" disabled>\r\n        <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n          (click)=\"getCodes()\">search</mat-icon>\r\n      </mat-form-field>\r\n    </div>\r\n    <span class=\"custom-alert-message\">{{message.toString().split(',').join(' ')}}</span>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #onlyFieldControl>\r\n  <div class=\"sh-flex sh-flex-center\" (focusin)=\"onFocusin($event)\" (focusout)=\"onFocusout($event)\">\r\n    <div class=\"only-field\" style=\"width: 33.3%;\">\r\n      <input class=\"bind-flg__input\" [(value)]=\"noChangeFlg\" [name]=\"noChangeFlgCtlName\" (change)=\"noChangeFlgChange($event)\"/>\r\n      <input #inputElm matInput [required]=\"required\" (input)=\"onInput($event)\" (click)=\"onClick($event)\"\r\n        [(ngModel)]=\"value\" class=\"SHCtlJyuCode can-moved-with-the-enter-key  {{strClass}}\" [disabled]=\"disabled\"\r\n        (change)=\"onChange($event)\" (focus)=\"onFocus($event)\" maxlength=\"8\" type=\"tel\"\r\n        [ngStyle]=\"styles\" [ngClass]=\"objClass\" attr.name=\"{{ctlName}}\" />\r\n      <button mat-button *ngIf=\"inputElm.value && !inputElm.readOnly && !inputElm.disabled\" matSuffix mat-icon-button\r\n        aria-label=\"Clear\" (mousedown)=\"clearValue()\" (keydown)=\"clickClearButton($event)\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"only-field only-label\" style=\"width: 66.6%;\">\r\n      <input class=\"result-input\" matInput type=\"tel\" [(ngModel)]=\"name\" [ngStyle]=\"styles\" [ngClass]=\"classes\"\r\n        attr.name=\"{{popupLabelName}}\" disabled>\r\n      <mat-icon mat-button matSuffix class=\"mat-search-btn\" *ngIf=\"!inputElm.readOnly && !inputElm.disabled\"\r\n        (click)=\"getCodes()\">search</mat-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n\r\n<div *ngIf=\"isDisabled\" class=\"display-ctl-view\">\r\n  <div>\r\n    <div *ngIf=\"title\" class=\"display-ctl-view\">\r\n      <div class=\"display-result\" [ngStyle]=\"{'width.px': labelWidth}\" fxLayout=\"row wrap\" fxFlex>\r\n        <div fxFlex class=\"item-title\"><strong>{{title}}:</strong></div>\r\n      </div>\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{toText(value)}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!title\" class=\"display-ctl-view notitle-value\">\r\n      <div class=\"valueOutput-container\">\r\n        <div fxFlex class=\"valueOutput\">{{value}}</div>\r\n        <div fxFlex class=\"valueOutput-second\">{{name}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".input-group-text{background-color:#fff;border:none}.btn{border:none}.btn.btn-primary:disabled{background-color:#999}.btn-primary{background-color:#17a2b8}.btn-primary:hover{background-color:#1792b8}.fixed-bottom{top:708px;height:65px;max-width:1024px;margin-right:auto;margin-left:auto}.mat-search-btn{color:#bababa;font-size:1.1rem}.mat-search-btn:hover{cursor:pointer}.result-input{text-overflow:ellipsis}.display-ctl-view{display:-webkit-box;display:flex}.display-result{margin-left:30px}.valueOutput-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1}.valueOutput{margin-right:14px;padding-top:4px}.notitle-value{width:100%;margin-left:30px}", ".sh-flex{width:100%;display:-webkit-inline-box;display:inline-flex}.sh-flex-center{-webkit-box-align:center;align-items:center}.sh-flex-between{-webkit-box-pack:justify;justify-content:space-between;-webkit-box-align:center;align-items:center}.display-ctl-view{margin-top:20px}.overlay{position:fixed;display:-webkit-box;display:flex;top:0;left:0;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;height:100%;width:100%;color:gray;background-color:rgba(0,0,0,.5);z-index:9999}.loader-text{display:block;color:#f3f3f3;margin-top:1em}.mat-dialog-content{overflow:hidden;max-height:none}.sh-dialog-content{height:85%}.sh-kbn-dialog-table-container{height:92%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-dialog-table-container{display:-webkit-box;display:flex;height:83%;overflow-y:scroll;margin-top:18px;margin-bottom:18px}.sh-text-center{text-align:center}.sh-width-100{width:100%}.sh-label{display:block}.custom-alert-message{top:-20px;position:relative;font-size:.75em;color:rgba(0,0,0,.54)}.result-input,.sh-label{color:rgba(0,0,0,.87)}::ng-deep .mat-form-field-label span{color:rgba(0,0,0,.87)}::ng-deep .result-container .mat-form-field-flex{background-color:#ccdcff}.sh-ctl-state-primary::ng-deep .mat-form-field-label{color:#3f51b5}.sh-ctl-state-primary::ng-deep .mat-form-field-underline{background-color:#3f51b5}.sh-ctl-state-primary-message{color:#3f51b5}.sh-ctl-state-secondary::ng-deep .mat-form-field-label{color:#ff4081}.sh-ctl-state-secondary::ng-deep .mat-form-field-underline{background-color:#ff4081}.sh-ctl-state-secondary-message{color:#ff4081}.sh-ctl-state-success::ng-deep .mat-form-field-label{color:#0dad17}.sh-ctl-state-success::ng-deep .mat-form-field-underline{background-color:#0dad17}.sh-ctl-state-success-message{color:#0dad17}.sh-ctl-state-danger::ng-deep .mat-form-field-label{color:#f44336}.sh-ctl-state-danger::ng-deep .mat-form-field-underline{background-color:#f44336}.sh-ctl-state-danger-message{color:#f44336}.sh-ctl-state-warning::ng-deep .mat-form-field-label{color:#e29f2b}.sh-ctl-state-warning::ng-deep .mat-form-field-underline{background-color:#e29f2b}.sh-ctl-state-warning-message{color:#e29f2b}.sh-container{position:relative;width:100%;height:100%}.only-field{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;width:100%;height:100%;min-height:28px}.only-field input,.only-field textarea{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.only-field-danger{background-color:#f44336}.only-field-warning{background-color:#e29f2b}.only-field-success{background-color:#0dad17}::ng-deep .only-field .material-icons{font-size:13px}::ng-deep .only-field .mat-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon-button{position:relative;width:24px;height:24px}::ng-deep .only-field .mat-icon{position:absolute;top:0;left:0}::ng-deep .only-field .mat-datepicker-toggle-default-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;margin-right:auto}::ng-deep .mat-datepicker-toggle span svg{width:16px;height:16px}.only-label{background-color:#ccdcff;position:relative}.only-label mat-icon{position:absolute;top:25%;left:0;right:0;bottom:0;margin-left:auto;font-size:16px}.bind-flg__input{opacity:0;height:0;width:0;position:absolute;z-index:-100}"]
            }] }
];
/** @nocollapse */
SHCtlTanCodeComponent.ctorParameters = () => [
    { type: SmplPopupService },
    { type: MatDialog },
    { type: BindCtlService },
    { type: LockScreenService }
];
SHCtlTanCodeComponent.propDecorators = {
    enabledHalfKanaInput: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHCtlTanCodeComponent.prototype.obj;
    /** @type {?} */
    SHCtlTanCodeComponent.prototype.enabledHalfKanaInput;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.smplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHCtlTanCodeComponent.prototype.lockScreenService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY3RsLXRhbi1jb2RlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NoLWN0bC10YW4tY29kZS9zaC1jdGwtdGFuLWNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUlULEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBUXZFLE1BQU0sT0FBTyxxQkFDWCxTQUFRLFdBQVc7Ozs7Ozs7SUFJbkIsWUFDWSxnQkFBa0MsRUFDbEMsTUFBaUIsRUFDakIsY0FBOEIsRUFDOUIsaUJBQW9DO1FBRTlDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFMekQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2pCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBTnpDLFFBQUcsR0FBRyxlQUFlLENBQUM7UUFDcEIseUJB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QyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUNuQyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUNyQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7Z0JBQ3RDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs7Z0JBQzdCLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDakMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUM5QyxHQUFHLElBQUksTUFBTSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7OztZQXZZRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0Isc21JQUErQzs7YUFFaEQ7Ozs7WUFYUSxnQkFBZ0I7WUFGaEIsU0FBUztZQUtULGNBQWM7WUFDZCxpQkFBaUI7OzttQ0FZdkIsS0FBSzs7OztJQUROLG9DQUE2Qjs7SUFDN0IscURBQThDOzs7OztJQUU1QyxpREFBNEM7Ozs7O0lBQzVDLHVDQUEyQjs7Ozs7SUFDM0IsK0NBQXdDOzs7OztJQUN4QyxrREFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBPbkluaXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgSW5wdXQsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgU0hDdGxDb21tb24gfSBmcm9tIFwiLi4vc2gtY3RsLWNvbW1vblwiO1xyXG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWxcIjtcclxuaW1wb3J0IHsgU0hGb3JtUG9wdXAgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL1NoRm9ybVBvcHVwXCI7XHJcbmltcG9ydCB7IFNtcGxQb3B1cFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvc21wbC1wb3B1cC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IFNIQ3RsUG9wdXBEaWFsb2dDb21wb25lbnQgfSBmcm9tIFwiLi4vc2gtY3RsLXBvcHVwLWRpYWxvZy9zaC1jdGwtcG9wdXAtZGlhbG9nLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBTaEN0bENvbnN0IH0gZnJvbSBcIi4uLy4uL2NvbnN0U2hDdGxcIjtcclxuaW1wb3J0IHsgQmluZEN0bFNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvYmluZC1jdGwuc2VydmljZVwiO1xyXG5pbXBvcnQgeyBMb2NrU2NyZWVuU2VydmljZSB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9sb2NrLXNjcmVlbi5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IGRpc3RpbmN0LCB0YWtlVW50aWwgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiBcInNoLWN0bC10YW4tY29kZVwiLFxyXG4gIHRlbXBsYXRlVXJsOiBcIi4vc2gtY3RsLXRhbi1jb2RlLmNvbXBvbmVudC5odG1sXCIsXHJcbiAgc3R5bGVVcmxzOiBbXCIuL3NoLWN0bC10YW4tY29kZS5jb21wb25lbnQuY3NzXCIsIFwiLi4vLi4vLi4vc3R5bGUuY29tbW9uLmNzc1wiXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNIQ3RsVGFuQ29kZUNvbXBvbmVudFxyXG4gIGV4dGVuZHMgU0hGb3JtUG9wdXBcclxuICBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICBwdWJsaWMgb2JqID0gXCIuU0hDdGxUYW5Db2RlXCI7XHJcbiAgQElucHV0KCkgZW5hYmxlZEhhbGZLYW5hSW5wdXQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIHNtcGxQb3B1cFNlcnZpY2U6IFNtcGxQb3B1cFNlcnZpY2UsXHJcbiAgICBwcm90ZWN0ZWQgZGlhbG9nOiBNYXREaWFsb2csXHJcbiAgICBwcm90ZWN0ZWQgYmluZEN0bFNlcnZpY2U6IEJpbmRDdGxTZXJ2aWNlLFxyXG4gICAgcHJvdGVjdGVkIGxvY2tTY3JlZW5TZXJ2aWNlOiBMb2NrU2NyZWVuU2VydmljZSxcclxuICApIHtcclxuICAgIHN1cGVyKHNtcGxQb3B1cFNlcnZpY2UsIGRpYWxvZywgYmluZEN0bFNlcnZpY2UsIGxvY2tTY3JlZW5TZXJ2aWNlKTtcclxuICAgIHRoaXMuY3RsTmFtZSA9IFwiU0hDdGxUYW5Db2RlXCI7XHJcbiAgICB0aGlzLm1heGxlbmd0aCA9IDY7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrPjg7Pjg53jg7zjg43jg7Pjg4jjgavlgKTjgYzjg5DjgqTjg7Pjg4njgZXjgozjgZ/lvozjgaflkbzjgbPlh7rjgZXjgozjgotcclxuICAgKiDjg5fjg63jg5Hjg4bjgqPjga7liJ3mnJ/ljJZcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9uSW5pdCgpO1xyXG4gICAgaWYgKHRoaXMucG9wdXBXaWR0aCkge1xyXG4gICAgICB0aGlzLmV4dGVuZFdpZHRoID0gdGhpcy5wb3B1cFdpZHRoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb25JbnB1dFxyXG4gICAqIEBwYXJhbSBldmVudCBpbnB1dFxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbklucHV0KGV2ZW50KSB7XHJcbiAgICBldmVudC50YXJnZXQudmFsdWUgPSBldmVudC50YXJnZXQudmFsdWUucmVwbGFjZSgvW14wLTldL2csIFwiXCIpO1xyXG4gICAgU0hDdGxDb21tb24uc2xpY2VMZW5ndGgoZXZlbnQsIHRoaXMubWF4bGVuZ3RoKTtcclxuICAgIGlmICghdGhpcy5lbmFibGVkSGFsZkthbmFJbnB1dCkge1xyXG4gICAgICBTSEN0bENvbW1vbi5yZXBsYWNlRnVsbFdpZHRoKGV2ZW50KTtcclxuICAgIH1cclxuICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZS5yZXBsYWNlKFxyXG4gICAgICAvW1wi77yB4oCd77yD77yE77yF77yG4oCZ77yI77yJ77yd772e772c4oCY772b77yL77yK772d77yc77ye77yf77y/77yN77y+77+l77yg44CM77yb77ya44CN44CB44CC44O7XCJdL2csXHJcbiAgICAgIFwiXCJcclxuICAgICk7XHJcbiAgICBpZiAoXHJcbiAgICAgIGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggPj0gNiAmJlxyXG4gICAgICBldmVudC5pbnB1dFR5cGUgIT0gXCJkZWxldGVDb250ZW50QmFja3dhcmRcIlxyXG4gICAgKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBpc05hTihwYXJzZUludChldmVudC50YXJnZXQudmFsdWUpKSAmJlxyXG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZS5sZW5ndGggIT0gN1xyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGV2ZW50LmlucHV0VHlwZSAhPT0gXCJpbnNlcnRDb21wb3NpdGlvblRleHRcIikge1xyXG4gICAgICBTSEN0bENvbW1vbi5yZXBsYWNlU3BhY2UoZXZlbnQpO1xyXG4gICAgICBTSEN0bENvbW1vbi5yZXBsYWNlU2lnbihldmVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvbkNoYW5nZVxyXG4gICAqIEBwYXJhbSBldmVudCBjaGFuZ2VcclxuICAgKi9cclxuICBwdWJsaWMgb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgIHRoaXMub25CZWZvcmVDaGFuZ2UoZXZlbnQpO1xyXG4gICAgbGV0IGZsZyA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMubm9DaGFuZ2VGbGcgPT0gYE9GRmApIHtcclxuICAgICAgZmxnID0gdHJ1ZTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMuU21wbFBvcHVwU2VydmljZS5nZXRNYXN0ZXJEYXRhKHRoaXMuYXBpVXJsKS5sZW5ndGggPT0gMCAmJlxyXG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmZldGNoQ29kZXModGhpcy5hcGlVcmwpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsdWUpO1xyXG4gICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gdGhpcy50b1RleHQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uQWZ0ZXJDaGFuZ2UoZXZlbnQpO1xyXG4gICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5jb2RlcyA9IE9iamVjdChcclxuICAgICAgICAgIHRoaXMuU21wbFBvcHVwU2VydmljZS5nZXRNYXN0ZXJEYXRhKHRoaXMuYXBpVXJsKVxyXG4gICAgICAgICkuZGF0YTtcclxuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSB0aGlzLnNldE5hbWUoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMub25BZnRlckNoYW5nZShldmVudCk7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZmxnKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIHRoaXMubm9DaGFuZ2VGbGcgPT0gYE9GRmA7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm5vQ2hhbmdlRmxnID0gYE9GRmA7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5vbkFmdGVyQ2hhbmdlKGV2ZW50KTtcclxuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSB0aGlzLnRvVGV4dChldmVudC50YXJnZXQudmFsdWUpO1xyXG4gICAgICB9LCAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODgOOCpOOCouODreOCsOOCkumWi+OBhOOBpumWieOBmOOCi+aZguOBq+WApOOCkuimquOBq+i/lOOBmVxyXG4gICAqL1xyXG4gIHB1YmxpYyBvcGVuRGlhbG9nKCkge1xyXG4gICAgbGV0IGV4dGVuZFdpZHRoO1xyXG4gICAgaWYgKHRoaXMuY29kZXMpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICF0aGlzLnBvcHVwV2lkdGggJiZcclxuICAgICAgICB0aGlzLmNvZGVzLmxlbmd0aCAhPSAwICYmXHJcbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLmNvZGVzWzBdKS5sZW5ndGggPj0gNFxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLmV4dGVuZFdpZHRoID0gU2hDdGxDb25zdC5ESUFMT0dfTUFYX1dJRFRIO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgcmF3Q29kZXM7XHJcbiAgICAgIGxldCByYXdDb2Rlc0FycmF5ID0gW107XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyB0aGlzLmNvZGVzLmxlbmd0aCA+IGk7IGkrKykge1xyXG4gICAgICAgIHJhd0NvZGVzID0gdGhpcy5jb2Rlc1tpXS5jb250YWN0Q29kZTtcclxuICAgICAgICByYXdDb2Rlc0FycmF5LnB1c2gocmF3Q29kZXMpO1xyXG4gICAgICAgIGxldCBjb2RlID0gT2JqZWN0LnZhbHVlcyh0aGlzLmNvZGVzW2ldKVxyXG4gICAgICAgICAgW3RoaXMuYmluZENvbHVtbktleSAtIDFdLnRvU3RyaW5nKClcclxuICAgICAgICAgIC5zdWJzdHIoMik7XHJcbiAgICAgICAgdGhpcy5jb2Rlc1tpXS5jb250YWN0Q29kZSA9IGNvZGU7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5kaWFsb2dSZWYgPSB0aGlzLmRpYWxvZy5vcGVuKFNIQ3RsUG9wdXBEaWFsb2dDb21wb25lbnQsIHtcclxuICAgICAgICBoZWlnaHQ6IFNoQ3RsQ29uc3QuRElBTE9HX0hFSUdIVCxcclxuICAgICAgICB3aWR0aDogZXh0ZW5kV2lkdGgsXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgZGF0YVRpdGxlOiB0aGlzLmRhdGFUaXRsZSxcclxuICAgICAgICAgIGNvZGVzOiB0aGlzLmNvZGVzLFxyXG4gICAgICAgICAgY29kZXNIZWFkZXI6IHRoaXMuY29kZXNIZWFkZXIsXHJcbiAgICAgICAgICBoaWRkZW5Db2x1bW5zOiB0aGlzLmhpZGRlbkNvbHVtbnMsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLmRpYWxvZ1JlZi5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgdGhpcy5zZXRWYWx1ZU5hbWUocmVzdWx0KTtcclxuICAgICAgICAgIHRoaXMuYmluZEN0bFNlcnZpY2Uuc2V0Tm9DaGFuZ2VGbGcoe1xyXG4gICAgICAgICAgICBiaW5kQ29sdW1uQXJyYXk6IHRoaXMuYmluZENvbHVtbkFycmF5LFxyXG4gICAgICAgICAgICByZWNvcmQ6IHJlc3VsdCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5iaW5kQ3RsU2VydmljZS5zZXRCaW5kVmFsdWUoe1xyXG4gICAgICAgICAgICBiaW5kQ29sdW1uQXJyYXk6IHRoaXMuYmluZENvbHVtbkFycmF5LFxyXG4gICAgICAgICAgICByZWNvcmQ6IHJlc3VsdCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy5ub0NoYW5nZUZsZyA9IGBPTmA7XHJcbiAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy5leHRyYWN0QmluZFZhbHVlKHJlc3VsdCkpO1xyXG4gICAgICAgICAgdGhpcy5vd25WYWx1ZUlucHV0RWxtLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiY2hhbmdlXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6YG45oqe44GV44KM44Gf5Yy65YiG44Kz44O844OJ44Gr57SQ44Gl44GP5Yy65YiG5ZCN44KS6Kit5a6aXHJcbiAgICovXHJcbiAgcHVibGljIHNldE5hbWUodmFsKSB7XHJcbiAgICBsZXQgcmVjb3JkOiBhbnk7XHJcbiAgICB2YWwgPSB0aGlzLnRvVGV4dCh2YWwpO1xyXG4gICAgaWYgKHZhbC5sZW5ndGggPT0gNikge1xyXG4gICAgICByZWNvcmQgPSB0aGlzLmNvZGVzLmZpbmQoKGVsZW1lbnQpID0+XHJcbiAgICAgICAgdGhpcy50b1RleHQoT2JqZWN0LnZhbHVlcyhlbGVtZW50KVt0aGlzLmJpbmRDb2x1bW5LZXkgLSAxXSkuaW5jbHVkZXMoXHJcbiAgICAgICAgICB2YWxcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAocmVjb3JkICE9IG51bGwpIHtcclxuICAgICAgY29uc3QgbmFtZSA9IE9iamVjdC52YWx1ZXMocmVjb3JkKVt0aGlzLmJpbmRDb2x1bW5WYWx1ZSAtIDFdIGFzIHN0cmluZztcclxuICAgICAgaWYgKG5hbWUgJiYgdmFsLmxlbmd0aCA9PSA2KSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZU5hbWUocmVjb3JkKTtcclxuICAgICAgICB0aGlzLm5vQ2hhbmdlRmxnID0gXCJPTlwiO1xyXG4gICAgICAgIHRoaXMuYmluZEN0bFNlcnZpY2Uuc2V0QmluZFZhbHVlKHtcclxuICAgICAgICAgIGJpbmRDb2x1bW5BcnJheTogdGhpcy5iaW5kQ29sdW1uQXJyYXksXHJcbiAgICAgICAgICByZWNvcmQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5iaW5kQ3RsU2VydmljZS5zZXROb0NoYW5nZUZsZyh7XHJcbiAgICAgICAgICBiaW5kQ29sdW1uQXJyYXk6IHRoaXMuYmluZENvbHVtbkFycmF5LFxyXG4gICAgICAgICAgcmVjb3JkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhbCA9IE9iamVjdC52YWx1ZXMocmVjb3JkKVt0aGlzLmJpbmRDb2x1bW5LZXkgLSAxXTtcclxuICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB0aGlzLm93blZhbHVlSW5wdXRFbG07XHJcbiAgICAgICAgaWYgKGlucHV0RWxlbWVudCkge1xyXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC52YWx1ZSA9IHRoaXMudG9UZXh0KHZhbCk7XHJcbiAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhbCA9IGBgO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWw7XHJcbiAgfVxyXG4gIHB1YmxpYyBjaGVja1ZhbHVlKHZhbHVlKSB7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZih2YWx1ZS5sZW5ndGggPCA2KSB7XHJcbiAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvL2xldCBtYXRjaGVkQXJyYXkgPSBbXTtcclxuICAgIGlmICh0aGlzLmNvZGVzWzBdKSB7XHJcbiAgICAgIGNvbnN0IGZpbHRlclJlc3VsdCA9IHRoaXMuY29kZXMuZmlsdGVyKChlbGVtZW50KSA9PlxyXG4gICAgICAgIC8vdGhpcy5oYXNNYXRjaFJlY29yZHMoZWxlbWVudCwgdmFsdWUpXHJcbiAgICAgICAgKE9iamVjdC52YWx1ZXMoZWxlbWVudClbdGhpcy5iaW5kQ29sdW1uS2V5IC0gMV0gYXMgc3RyaW5nKS5pbmNsdWRlcyhcclxuICAgICAgICAgIHZhbHVlXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgICBpZiAoZmlsdGVyUmVzdWx0Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZmlsdGVyUmVzdWx0Lmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgYWxlcnQodmFsdWUgKyBcIuOBq+ikh+aVsOOBruWAmeijnOOBjOaknOWHuuOBleOCjOOBvuOBl+OBn1wiKTtcclxuICAgICAgICB0aGlzLmNsZWFyVmFsdWUoKVxyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdChcIlwiKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBvbkNsaWNrXHJcbiAgICogQHBhcmFtIGV2ZW50IGNsaWNrXHJcbiAgICovXHJcbiAgcHVibGljIG9uQ2xpY2soZXZlbnQpIHtcclxuICAgIHRoaXMub25CZWZvcmVDbGljayhldmVudCk7XHJcblxyXG4gICAgdGhpcy5vbkFmdGVyQ2xpY2soZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb25Gb2N1c1xyXG4gICAqIEBwYXJhbSBldmVudCBmb2N1c1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvbkZvY3VzKGV2ZW50KSB7XHJcbiAgICB0aGlzLm9uQmVmb3JlRm9jdXMoZXZlbnQpO1xyXG5cclxuICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IHRoaXMudG9UZXh0KGV2ZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICBldmVudC50YXJnZXQuc2VsZWN0KCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMub25BZnRlckZvY3VzKGV2ZW50KTtcclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogb25CbHVyXHJcbiAgICogQHBhcmFtIGV2ZW50IGJsdXJcclxuICAgKi9cclxuICBwdWJsaWMgb25CbHVyKGV2ZW50KSB7XHJcbiAgICB0aGlzLm9uQmVmb3JlQmx1cihldmVudCk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMub25BZnRlckJsdXIoZXZlbnQpO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvbktleVVwXHJcbiAgICogQHBhcmFtIGV2ZW50IEtleVVwXHJcbiAgICovXHJcbiAgcHVibGljIG9uS2V5VXAoZXZlbnQpIHtcclxuICAgIGlmICghZXZlbnQuaXNDb21wb3NpbmcpIHtcclxuICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gdGhpcy50b0hhbmtha3UoXHJcbiAgICAgICAgdGhpcy5oaXJhZ2FuYVRvS2F0YWdhbmEoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5YWI6aCt6Zmk5Y67XHJcbiAgICogQHBhcmFtIGlucHV0VGFyZ2V0VmFsdWUgZXZlbnQudGFyZ2V0LnZhbHVlXHJcbiAgICovXHJcbiAgcHVibGljIHRvVGV4dChpbnB1dFRhcmdldFZhbHVlKSB7XHJcbiAgICBpZiAoU0hDdGxDb21tb24uaXNCbGFuayhpbnB1dFRhcmdldFZhbHVlKSkge1xyXG4gICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dFRhcmdldFZhbHVlLmxlbmd0aCA9PT0gOCkge1xyXG4gICAgICByZXR1cm4gaW5wdXRUYXJnZXRWYWx1ZS5zdWJzdHIoMik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5wdXRUYXJnZXRWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOBsuOCieOBjOOBquOCkuOCq+OCv+OCq+ODiuOBq+WkieaPm1xyXG4gICAqIEBwYXJhbSBpbnB1dFZhbHVlXHJcbiAgICovXHJcbiAgcHVibGljIGhpcmFnYW5hVG9LYXRhZ2FuYShpbnB1dFZhbHVlKSB7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZS5yZXBsYWNlKC9bXFx1MzA0MS1cXHUzMDk2XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcclxuICAgICAgdmFyIGNociA9IG1hdGNoLmNoYXJDb2RlQXQoMCkgKyAweDYwO1xyXG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlhaXlipvmloflrZfjgpLljYrop5Ljgqvjg4rjgavlpInmj5tcclxuICAgKiBAcGFyYW0gaW5wdXRWYWx1ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0hhbmtha3UoaW5wdXRWYWx1ZSkge1xyXG4gICAgbGV0IGhhbGYgPSBcIjAxMjM0NTY3ODlcIjtcclxuICAgIGhhbGYgKz0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xyXG4gICAgaGFsZiArPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XHJcbiAgICBoYWxmICs9IFwi772h772k772iXFxcXO+9ozs6772lLSt8X0AuLCBcIjtcclxuICAgIGhhbGYgKz0gXCLvvbHvvbLvvbPvvbTvvbXvvbbvvbfvvbjvvbnvvbrvvbvvvbzvvb3vvb7vvb/vvoDvvoHvvoLvvoPvvoTvvoXvvobvvofvvojvvonvvorvvovvvozvvo3vvo7vvo/vvpDvvpHvvpLvvpPvvpTvvpXvvpbvvpfvvpjvvpnvvprvvpvvvpzvvabvvp3vvafvvajvvanvvarvvavvva/vvazvva3vva7vvbBcIjtcclxuICAgIGxldCBoYWxmQXJyID0gbmV3IEFycmF5KFxyXG4gICAgICBcIu+9s+++nlwiLFxyXG4gICAgICBcIu+9tu++nlwiLFxyXG4gICAgICBcIu+9t+++nlwiLFxyXG4gICAgICBcIu+9uO++nlwiLFxyXG4gICAgICBcIu+9ue++nlwiLFxyXG4gICAgICBcIu+9uu++nlwiLFxyXG4gICAgICBcIu+9u+++nlwiLFxyXG4gICAgICBcIu+9vO++nlwiLFxyXG4gICAgICBcIu+9ve++nlwiLFxyXG4gICAgICBcIu+9vu++nlwiLFxyXG4gICAgICBcIu+9v+++nlwiLFxyXG4gICAgICBcIu++gO++nlwiLFxyXG4gICAgICBcIu++ge++nlwiLFxyXG4gICAgICBcIu++gu++nlwiLFxyXG4gICAgICBcIu++g+++nlwiLFxyXG4gICAgICBcIu++hO++nlwiLFxyXG4gICAgICBcIu++iu++nlwiLFxyXG4gICAgICBcIu++i+++nlwiLFxyXG4gICAgICBcIu++jO++nlwiLFxyXG4gICAgICBcIu++je++nlwiLFxyXG4gICAgICBcIu++ju++nlwiLFxyXG4gICAgICBcIu++iu++n1wiLFxyXG4gICAgICBcIu++i+++n1wiLFxyXG4gICAgICBcIu++jO++n1wiLFxyXG4gICAgICBcIu++je++n1wiLFxyXG4gICAgICBcIu++ju++n1wiXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBmdWxsID0gXCLvvJDvvJHvvJLvvJPvvJTvvJXvvJbvvJfvvJjvvJlcIjtcclxuICAgIGZ1bGwgKz0gXCLvvKHvvKLvvKPvvKTvvKXvvKbvvKfvvKjvvKnvvKrvvKvvvKzvvK3vvK7vvK/vvLDvvLHvvLLvvLPvvLTvvLXvvLbvvLfvvLjvvLnvvLpcIjtcclxuICAgIGZ1bGwgKz0gXCLvvYHvvYLvvYPvvYTvvYXvvYbvvYfvvYjvvYnvvYrvvYvvvYzvvY3vvY7vvY/vvZDvvZHvvZLvvZPvvZTvvZXvvZbvvZfvvZjvvZnvvZpcIjtcclxuICAgIGZ1bGwgKz0gXCLjgILjgIHjgIzvv6XjgI3vvJvvvJrjg7vvvI3vvIvvvZzvvL/vvKDvvI7vvIzjgIBcIjtcclxuICAgIGZ1bGwgKz1cclxuICAgICAgXCLjgqLjgqTjgqbjgqjjgqrjgqvjgq3jgq/jgrHjgrPjgrXjgrfjgrnjgrvjgr3jgr/jg4Hjg4Tjg4bjg4jjg4rjg4vjg4zjg43jg47jg4/jg5Ljg5Xjg5jjg5vjg57jg5/jg6Djg6Hjg6Ljg6Tjg6bjg6jjg6njg6rjg6vjg6zjg63jg6/jg7Ljg7PjgqHjgqPjgqXjgqfjgqnjg4Pjg6Pjg6Xjg6fjg7xcIjtcclxuICAgIGxldCBmdWxsQXJyID0gbmV3IEFycmF5KFxyXG4gICAgICBcIuODtFwiLFxyXG4gICAgICBcIuOCrFwiLFxyXG4gICAgICBcIuOCrlwiLFxyXG4gICAgICBcIuOCsFwiLFxyXG4gICAgICBcIuOCslwiLFxyXG4gICAgICBcIuOCtFwiLFxyXG4gICAgICBcIuOCtlwiLFxyXG4gICAgICBcIuOCuFwiLFxyXG4gICAgICBcIuOCulwiLFxyXG4gICAgICBcIuOCvFwiLFxyXG4gICAgICBcIuOCvlwiLFxyXG4gICAgICBcIuODgFwiLFxyXG4gICAgICBcIuODglwiLFxyXG4gICAgICBcIuODhVwiLFxyXG4gICAgICBcIuODh1wiLFxyXG4gICAgICBcIuODiVwiLFxyXG4gICAgICBcIuODkFwiLFxyXG4gICAgICBcIuODk1wiLFxyXG4gICAgICBcIuODllwiLFxyXG4gICAgICBcIuODmVwiLFxyXG4gICAgICBcIuODnFwiLFxyXG4gICAgICBcIuODkVwiLFxyXG4gICAgICBcIuODlFwiLFxyXG4gICAgICBcIuODl1wiLFxyXG4gICAgICBcIuODmlwiLFxyXG4gICAgICBcIuODnVwiXHJcbiAgICApO1xyXG5cclxuICAgIGxldCBzdHIgPSBcIlwiO1xyXG4gICAgLy/ljYrop5Ljgqvjg4rnlKhcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFsZkFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgcmVnID0gbmV3IFJlZ0V4cChmdWxsQXJyW2ldLCBcImdcIik7XHJcbiAgICAgIGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnJlcGxhY2UocmVnLCBoYWxmQXJyW2ldKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRWYWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBsZXQgb25lU3RyID0gaW5wdXRWYWx1ZS5jaGFyQXQoaSk7XHJcbiAgICAgIGxldCBudW0gPSBmdWxsLmluZGV4T2Yob25lU3RyLCAwKTtcclxuICAgICAgb25lU3RyID0gbnVtID49IDAgPyBoYWxmLmNoYXJBdChudW0pIDogb25lU3RyO1xyXG4gICAgICBzdHIgKz0gb25lU3RyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxuICB9XHJcbn1cclxuIl19