/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter, ViewChild, ElementRef, } from "@angular/core";
import { SHCtlCommon } from '../components/sh-ctl-common';
import { MaxByteLengthHistory } from "./MaxByteLengthHistory";
/**
 * @template T
 */
export class SHFormControl {
    constructor() {
        //要素コントロール名
        this.ctlName = "SHFormControl";
        //表示レイアウト切り替えフラグ(true:閲覧専用/false:編集可能)
        this.isDisabled = false;
        //値バインド変数
        this.value = null;
        //タイトル名
        this.title = " ";
        //コントロール挙動(auto/always/nevwer)
        this.floatLabel = "auto";
        //閲覧専用画面でのラベル幅(px)
        this.labelWidth = "150";
        //input要素に対するstyleの指定(形式：{ color: "red" })
        this.styles = {};
        //input要素に対するclassの指定(形式：{ "className": true } or "className className2")
        this.classes = {};
        //input要素に対する必須入力フラグ
        this.required = false;
        //input要素に対する状態の指定
        this.state = "";
        //input要素に対する文言の指定
        this.message = [""];
        //input要素に対する必須入力フラグ
        this.disabled = false;
        //値バインド結果の返却を担う
        this.valueChange = new EventEmitter();
        //BeforeClickイベント返却
        this.beforeClick = new EventEmitter();
        //AfterClickイベント返却
        this.afterClick = new EventEmitter();
        //BeforeFocusイベント返却
        this.beforeFocus = new EventEmitter();
        //AfterFocusイベント返却
        this.afterFocus = new EventEmitter();
        //BeforeBlurイベント返却
        this.beforeBlur = new EventEmitter();
        //AfterBlurイベント返却
        this.afterBlur = new EventEmitter();
        //BeforeChangeイベント返却
        this.beforeChange = new EventEmitter();
        //AfterChangeイベント返却
        this.afterChange = new EventEmitter();
        this.objClass = {};
        this.strClass = "";
        this.isComp = false;
        this.array = [];
        //forcusの保持変数
        this.isfocused = false;
        this.onlyField = false;
    }
    /**
     * @return {?}
     */
    onInit() {
        //クラスの指定方法によって分岐する
        if (typeof this.classes === "string") {
            this.strClass = this.classes;
            this.objClass = null;
        }
        else {
            this.strClass = "";
            this.objClass = this.classes;
        }
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) { }
    /**
     * onKeyDown
     * @param {?} event keydown
     * @return {?}
     */
    onKeyDown(event) { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.maxByteLength)
            return;
        if (this.selfInputElm) {
            this.selfInputElm.nativeElement.addEventListener("keydown", this.handleKeydown.bind(this));
            this.selfInputElm.nativeElement.addEventListener("input", this.handleInput.bind(this));
            this.selfInputElm.nativeElement.addEventListener("compositionstart", this.handleCompositionStart.bind(this));
            this.selfInputElm.nativeElement.addEventListener("compositionend", this.handleCompositionEnd.bind(this));
        }
    }
    /**
     * maxByteLengthの制御
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleKeydown(e) {
        if (!this.maxByteLength)
            return;
        /** @type {?} */
        const value = e.target.value;
        if (value &&
            !this.maxByteLengthHistory &&
            !MaxByteLengthHistory.isAllowOperation(e)) {
            this.maxByteLengthHistory = new MaxByteLengthHistory(value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
    }
    /**
     * \@ あと何byte許容できるかを更新
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleInput(e) {
        if (!this.maxByteLength)
            return;
        this.maxlength = undefined;
        if (!this.maxByteLengthHistory && e.target.value) {
            this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
        if (this.maxByteLengthHistory) {
            this.maxByteLengthHistory.changeEnterableBytes(e.target.value);
            if (!this.maxByteLengthHistory.getEnterableBytes() && !this.isComp) {
                /** @type {?} */
                const maxLen = this.maxByteLengthHistory.getMaxLength(e.target.value);
                this.maxlength = maxLen;
                if (e.target.value.length > maxLen) {
                    e.target.value = e.target.value.substr(0, maxLen);
                    this.valueChange.emit(e.target.value);
                }
            }
        }
    }
    /**
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleCompositionStart(e) {
        if (!this.maxByteLength)
            return;
        this.isComp = true;
        this.maxlength = undefined;
        if (e.target.value) {
            this.maxByteLengthHistory = this.maxByteLengthHistory = new MaxByteLengthHistory(e.target.value, this.selfInputElm.nativeElement.selectionStart, this.maxByteLength);
        }
        else {
            this.isComp = false;
        }
    }
    /**
     * @protected
     * @param {?} e
     * @return {?}
     */
    handleCompositionEnd(e) {
        if (!this.maxByteLength)
            return;
        /** @type {?} */
        const result = this.maxByteLengthHistory.getResult(e.data, e.target.value.replace(/\n/g, '##')).replace(/##/g, '\n');
        e.target.value = result;
        this.valueChange.emit(result);
        this.maxByteLengthHistory = null;
        this.isComp = false;
    }
    /**
     * onFocusin
     * @param {?} event focusin
     * @return {?}
     */
    onFocusin(event) {
        this.isfocused = true;
    }
    /**
     * onFocusout
     * @param {?} event focusout
     * @return {?}
     */
    onFocusout(event) {
        this.isfocused = false;
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!this.isfocused)
                this.onBlur(event);
        }), 0);
    }
    /**
     * clickClearButton
     * @param {?} event keydown
     * @return {?}
     */
    clickClearButton(event) {
        if (event.keyCode == SHCtlCommon.Const.keyCodes.enter ||
            event.keyCode == SHCtlCommon.Const.keyCodes.space) {
            //エンターキーで別コントロールにフォーカスが移動しないようにフォーカスを当て直す
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let inputValue = (/** @type {?} */ (document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`)));
                inputValue.dispatchEvent(new Event('focus'));
            }), 0);
            this.clearValue();
            return false;
        }
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.valueChange.emit(this.value);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        event.target.select();
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) { }
    /**
     * onBeforeClick
     * @param {?} event
     * @return {?}
     */
    onBeforeClick(event) {
        this.beforeClick.emit(event);
    }
    /**
     * onAfterClick
     * @param {?} event
     * @return {?}
     */
    onAfterClick(event) {
        this.afterClick.emit(event);
    }
    /**
     * onBeforeFocus
     * @param {?} event
     * @return {?}
     */
    onBeforeFocus(event) {
        this.beforeFocus.emit(event);
    }
    /**
     * onAfterFocus
     * @param {?} event
     * @return {?}
     */
    onAfterFocus(event) {
        this.afterFocus.emit(event);
    }
    /**
     * onBeforeBlur
     * @param {?} event
     * @return {?}
     */
    onBeforeBlur(event) {
        this.beforeBlur.emit(event);
    }
    /**
     * onAfterBlur
     * @param {?} event
     * @return {?}
     */
    onAfterBlur(event) {
        this.afterBlur.emit(event);
    }
    /**
     * onBeforeChange
     * @param {?} event
     * @return {?}
     */
    onBeforeChange(event) {
        this.beforeChange.emit(event);
    }
    /**
     * onAfterChange
     * @param {?} event
     * @return {?}
     */
    onAfterChange(event) {
        this.afterChange.emit(event);
    }
    /**
     * 値のクリア
     * @return {?}
     */
    clearValue() {
        this.value = null;
        /** @type {?} */
        let inputValue = (/** @type {?} */ ((document.querySelector(`textarea[name=` + this.ctlName + `], input[name=` + this.ctlName + `]`))));
        //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
        setTimeout((/**
         * @return {?}
         */
        function () {
            inputValue.dispatchEvent(new Event('change'));
            inputValue.dispatchEvent(new Event('focus'));
        }), 10);
    }
}
SHFormControl.propDecorators = {
    ctlName: [{ type: Input }],
    isDisabled: [{ type: Input }],
    value: [{ type: Input }],
    title: [{ type: Input }],
    floatLabel: [{ type: Input }],
    labelWidth: [{ type: Input }],
    maxlength: [{ type: Input }],
    maxByteLength: [{ type: Input }],
    styles: [{ type: Input }],
    classes: [{ type: Input }],
    required: [{ type: Input }],
    state: [{ type: Input }],
    message: [{ type: Input }],
    items: [{ type: Input }],
    disabled: [{ type: Input }],
    valueChange: [{ type: Output }],
    beforeClick: [{ type: Output }],
    afterClick: [{ type: Output }],
    beforeFocus: [{ type: Output }],
    afterFocus: [{ type: Output }],
    beforeBlur: [{ type: Output }],
    afterBlur: [{ type: Output }],
    beforeChange: [{ type: Output }],
    afterChange: [{ type: Output }],
    selfInputElm: [{ type: ViewChild, args: [`inputElm`, { static: false },] }],
    onlyField: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHFormControl.prototype.ctlName;
    /** @type {?} */
    SHFormControl.prototype.isDisabled;
    /** @type {?} */
    SHFormControl.prototype.value;
    /** @type {?} */
    SHFormControl.prototype.title;
    /** @type {?} */
    SHFormControl.prototype.floatLabel;
    /** @type {?} */
    SHFormControl.prototype.labelWidth;
    /** @type {?} */
    SHFormControl.prototype.maxlength;
    /** @type {?} */
    SHFormControl.prototype.maxByteLength;
    /** @type {?} */
    SHFormControl.prototype.styles;
    /** @type {?} */
    SHFormControl.prototype.classes;
    /** @type {?} */
    SHFormControl.prototype.required;
    /** @type {?} */
    SHFormControl.prototype.state;
    /** @type {?} */
    SHFormControl.prototype.message;
    /** @type {?} */
    SHFormControl.prototype.items;
    /** @type {?} */
    SHFormControl.prototype.disabled;
    /** @type {?} */
    SHFormControl.prototype.valueChange;
    /** @type {?} */
    SHFormControl.prototype.beforeClick;
    /** @type {?} */
    SHFormControl.prototype.afterClick;
    /** @type {?} */
    SHFormControl.prototype.beforeFocus;
    /** @type {?} */
    SHFormControl.prototype.afterFocus;
    /** @type {?} */
    SHFormControl.prototype.beforeBlur;
    /** @type {?} */
    SHFormControl.prototype.afterBlur;
    /** @type {?} */
    SHFormControl.prototype.beforeChange;
    /** @type {?} */
    SHFormControl.prototype.afterChange;
    /** @type {?} */
    SHFormControl.prototype.selfInputElm;
    /** @type {?} */
    SHFormControl.prototype.objClass;
    /** @type {?} */
    SHFormControl.prototype.strClass;
    /** @type {?} */
    SHFormControl.prototype.isComp;
    /** @type {?} */
    SHFormControl.prototype.array;
    /** @type {?} */
    SHFormControl.prototype.maxByteLengthHistory;
    /** @type {?} */
    SHFormControl.prototype.isfocused;
    /** @type {?} */
    SHFormControl.prototype.onlyField;
}
//# sourceMappingURL=data:application/json;base64,