/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { SHCtlCommon } from "../components/sh-ctl-common";
import { ShCtlConst } from "../constShCtl";
import { SHFormControl } from "./ShFormControl";
import { SHCtlPopupDialogComponent } from "../components/sh-ctl-popup-dialog/sh-ctl-popup-dialog.component";
export class SHFormPopup extends SHFormControl {
    /**
     * @param {?} SmplPopupService
     * @param {?} dialog
     * @param {?} bindCtlService
     * @param {?} lockScreenService
     */
    constructor(SmplPopupService, dialog, bindCtlService, lockScreenService) {
        super();
        this.SmplPopupService = SmplPopupService;
        this.dialog = dialog;
        this.bindCtlService = bindCtlService;
        this.lockScreenService = lockScreenService;
        //データタイトル名
        this.dataTitle = "";
        //データ区分名
        this.dataKbnName = "";
        //API URL
        this.apiUrl = "/api/";
        //入力コントロールに紐づく列番号
        this.bindColumnKey = 1;
        //ラベルコントロールに紐づく列番号
        this.bindColumnValue = 2;
        //入力コントロールを非表示にするモードフラグ
        this.hiddenInput = false;
        //ラベルを非表示にするモードフラグ
        this.hiddenLabel = false;
        //虫眼鏡アイコンを非表示にするモードフラグ
        this.hiddenPopupButton = false;
        //データキャッシュON/OFF機能フラグ
        this.dataCache = false;
        //ポップアップ上非表示となる列番号
        this.hiddenColumns = [];
        this.name = "";
        this.codes = [];
        this.codesHeader = [];
        this.extendWidth = ShCtlConst.DIALOG_WIDTH;
        //Dialogの結果を受け取る
        this.dialogRef = null;
        // 初回通信用フラグ
        this.initFetchFlg = false;
        // bindColumnArrayを利用し値が設定された場合にチェンジを止める
        this.noChangeFlg = `OFF`;
        // 通信中かどうか
        this.isBusy = false;
        this.ctlName = "SHCtlPopup";
    }
    // bindColumnArrayを利用し値が設定された場合にチェンジを止める
    /**
     * @return {?}
     */
    get noChangeFlgCtlName() {
        return `${this.ctlName}_${ShCtlConst.NO_CHANGE.FLG_SUFFIX}`;
    }
    // inputの参照
    /**
     * @return {?}
     */
    get ownValueInputElm() {
        return ((/** @type {?} */ ((document.querySelector(`textarea[name=${this.ctlName}], input[name=${this.ctlName}]`)))) || null);
    }
    /**
     * @return {?}
     */
    get ownLabelInputElm() {
        return (/** @type {?} */ (((document.querySelector(`textarea[name=${this.popupLabelName}], input[name=${this.popupLabelName}]`) || null))));
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    noChangeFlgChange(event) {
        this.noChangeFlg = event.target.value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.noChangeFlg = `OFF`;
        }), 1000);
    }
    /**
     * 入力コントロールの幅を指定
     * @return {?}
     */
    setInputWidth() {
        return this.hiddenLabel ? { width: "100%" } : { width: "33.3%" };
    }
    /**
     * ラベルコントロールの幅を指定
     * @return {?}
     */
    setLabelWidth() {
        return this.hiddenInput ? { width: "100%" } : { width: "66.6%" };
    }
    /**
     * データバインドされた値を再設定する際に値を検証し
     * 親コンポーネントに渡す
     * @param {?} changes 現在の値と直前の値を取得出来る
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.currentValue) {
            this.name = "";
            this.value = "";
            return;
        }
        if (this.noChangeFlg == "OFF") {
            if (changes.value && changes.value.currentValue) {
                if (changes.value.currentValue != changes.value.previousValue) {
                    this.fetchCodes(this.apiUrl);
                    return;
                }
            }
            if (changes.value && changes.value.firstChange) {
                this.initFetchFlg = true;
            }
            if (this.initFetchFlg) {
                if (!this.value || !changes.value.currentValue)
                    return;
                this.fetchCodes(this.apiUrl);
                this.initFetchFlg = false;
            }
            if (changes.apiUrl &&
                changes.apiUrl.previousValue != changes.apiUrl.currentValue &&
                !this.isBindInputNull(this.bindColumnArray)) {
                if (this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)
                    .length == 0) {
                    if (changes.value &&
                        changes.value.currentValue == changes.value.previousValue)
                        return;
                    this.fetchCodes(changes.apiUrl.currentValue);
                }
                else {
                    this.codes = Object(this.SmplPopupService.getMasterData(changes.apiUrl.currentValue)).data;
                    this.value = this.setName(this.value);
                }
            }
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.noChangeFlg = `OFF`;
            }), 1000);
        }), 0);
    }
    /**
     * プロパティの初期化
     * 通常サービスにキャッシュしているが、無ければ再度マスタより取得
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
        if (this.popupWidth) {
            this.extendWidth = this.popupWidth;
        }
        // //ユニークな文字列
        if (this.isDisabled) {
            if (this.SmplPopupService.getMasterData(this.apiUrl).length <= 0) {
                this.SmplPopupService.fetchAll(this.apiUrl).then((/**
                 * @param {?} response
                 * @return {?}
                 */
                (response) => {
                    this.codes = response.data;
                    this.codesHeader = Object.values(response.header);
                }));
            }
        }
    }
    /**
     * api 通信 マスタから取得
     * @param {?} url
     * @param {?=} value
     * @return {?}
     */
    fetchCodes(url, value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.isBusy)
                return;
            this.isBusy = true;
            this.lockScreenService.lockScreen();
            ((/** @type {?} */ (document.activeElement))).blur();
            return Promise.resolve(this.SmplPopupService.fetchAll(url)).catch((/**
             * @param {?} _
             * @return {?}
             */
            _ => { this.lockScreenService.unlock(); })).then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.codes = response.data;
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
                /** @type {?} */
                const ok = this.checkValue(value || this.value);
                /** @type {?} */
                let result = "";
                if (ok) {
                    if (value || this.value) {
                        result = this.setName(value || this.value);
                    }
                    if (this.dataCache) {
                        this.SmplPopupService.setMasterData(url, response);
                    }
                }
                this.isBusy = false;
                return new Promise((/**
                 * @param {?} resolve
                 * @return {?}
                 */
                (resolve) => {
                    resolve(result);
                    this.lockScreenService.unlock();
                }));
            }));
        });
    }
    /**
     * onInput
     * @param {?} event input
     * @return {?}
     */
    onInput(event) {
        SHCtlCommon.replaceSpace(event);
        SHCtlCommon.replaceFullWidth(event);
        SHCtlCommon.replaceSign(event);
    }
    /**
     * ダイアログを開いて閉じる時に値を親に返す
     * @return {?}
     */
    openDialog() {
        // valueの値を一時対比　ダイアログを閉じる際に比較します
        /** @type {?} */
        const tmp = this.value;
        if (!this.popupWidth &&
            this.codes.length != 0 &&
            Object.values(this.codes[0]).length >= 4) {
            this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
        }
        this.dialogRef = this.dialog.open(SHCtlPopupDialogComponent, {
            height: ShCtlConst.DIALOG_HEIGHT,
            width: this.extendWidth,
            data: {
                dataTitle: this.dataTitle,
                codes: this.codes,
                codesHeader: this.codesHeader,
                hiddenColumns: this.hiddenColumns,
            },
        });
        this.dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            if (result) {
                this.setValueName(result);
                //this.allocateToInputValue(result);
                this.bindCtlService.setNoChangeFlg({
                    bindColumnArray: this.bindColumnArray,
                    record: result,
                });
                this.bindCtlService.setBindValue({
                    bindColumnArray: this.bindColumnArray,
                    record: result,
                });
                this.noChangeFlg = `ON`;
                //changeイベント経由でemitすると無条件でafterChangeイベントが呼ばれるので
                //値を比較し変更がなければこのタイミングでemitする
                /** @type {?} */
                const resultValues = Object.values(result);
                if (resultValues && resultValues.includes(tmp)) {
                    this.valueChange.emit(this.value);
                    return;
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dispatchOwnValueInputChangeEvent();
                }), 0);
            }
        }));
    }
    /**
     * \@ 自身のvalueに紐づくinputのチェンジイベントを発火
     * @private
     * @return {?}
     */
    dispatchOwnValueInputChangeEvent() {
        if (this.ownValueInputElm) {
            this.ownValueInputElm.dispatchEvent(new Event("change"));
        }
    }
    /**
     * \@ bind先のinputがnullかどうか
     * @param {?} bindColumnArray
     * @return {?}
     */
    isBindInputNull(bindColumnArray) {
        if (!bindColumnArray || bindColumnArray.length == 0)
            return true;
        return bindColumnArray
            .map((/**
         * @param {?} bindColumnData
         * @return {?}
         */
        (bindColumnData) => {
            return (/** @type {?} */ (document.querySelector(`input[name=${Object.keys(bindColumnData)[0]}]`)));
        }))
            .map((/**
         * @param {?} bindInput
         * @return {?}
         */
        (bindInput) => {
            if (!bindInput)
                return false;
            return !!bindInput.value;
        }))
            .includes(false);
    }
    /**
     * onClick
     * @param {?} event click
     * @return {?}
     */
    onClick(event) {
        this.onBeforeClick(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterClick(event);
        }), 0);
    }
    /**
     * onFocus
     * @param {?} event focus
     * @return {?}
     */
    onFocus(event) {
        this.onBeforeFocus(event);
        event.target.select();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterFocus(event);
        }), 0);
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.value = "";
        this.name = "";
        if (this.ownLabelInputElm) {
            this.ownLabelInputElm.value = "";
        }
        this.valueChange.emit("");
    }
    /**
     * onChange
     * @param {?} event change
     * @return {?}
     */
    onChange(event) {
        this.onBeforeChange(event);
        if (!event.target.value) {
            this.clearAll();
        }
        /** @type {?} */
        let flg = false;
        if (this.noChangeFlg == "OFF") {
            flg = true;
            if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0 &&
                event.target.value) {
                this.noChangeFlg = "ON";
                this.fetchCodes(this.apiUrl, this.toText(event.target.value)).then((/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => {
                    this.valueChange.emit(value);
                    event.target.value = this.toText(event.target.value);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.onAfterChange(event);
                    }), 0);
                }));
            }
            else {
                event.target.value = this.setName(event.target.value);
                this.valueChange.emit(event.target.value);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.onAfterChange(event);
                }), 0);
            }
        }
        if (!flg) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.valueChange.emit(event.target.value);
                this.onAfterChange(event);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.noChangeFlg = `OFF`;
                }), 1000);
            }), 0);
        }
    }
    /**
     * onBlur
     * @param {?} event blur
     * @return {?}
     */
    onBlur(event) {
        this.onBeforeBlur(event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.onAfterBlur(event);
        }), 0);
    }
    /**
     * 手入力の値からの検索結果が複数あった場合はアラートを出す
     * @param {?} value
     * @return {?}
     */
    checkValue(value) {
        if (!value)
            return false;
        //let matchedArray = [];
        if (this.codes[0]) {
            /** @type {?} */
            const filterResult = this.codes.filter((/**
             * @param {?} element
             * @return {?}
             */
            (element) => 
            //this.hasMatchRecords(element, value)
            Object.values(element)[this.bindColumnKey - 1] == value));
            if (filterResult.length == 0) {
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
            if (filterResult.length >= 2) {
                alert(value + "に複数の候補が検出されました");
                this.clearValue();
                this.valueChange.emit("");
                return false;
            }
        }
        return true;
    }
    /**
     * マスタ情報よりコードを取得
     * @return {?}
     */
    getCodes() {
        this.openDialog();
        if (this.SmplPopupService.getMasterData(this.apiUrl).length == 0) {
            this.SmplPopupService.fetchAll(this.apiUrl).then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.codes = response.data;
                this.codesHeader = Object.values(response.header);
                this.dataTitle = response.title;
                if (this.dataCache)
                    this.SmplPopupService.setMasterData(this.apiUrl, response);
                if (!this.dialogRef)
                    return;
                if (this.dialogRef.componentInstance) {
                    this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                    this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                    this.dialogRef.componentInstance.codes = this.codes;
                    this.dialogRef.componentInstance.dataTitle = this.dataTitle;
                    if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                        this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                    }
                    this.dialogRef.updateSize(this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                    /** @type {?} */
                    let cols = [];
                    this.dialogRef.componentInstance
                        .getHashKeys()
                        .forEach((/**
                     * @param {?} name
                     * @param {?} idx
                     * @return {?}
                     */
                    (name, idx) => {
                        if (!this.hiddenColumns.find((/**
                         * @param {?} _
                         * @return {?}
                         */
                        (_) => _ == idx + 1)))
                            cols.push(name);
                    }));
                    this.dialogRef.componentInstance.displayedColumns = cols;
                }
            }));
        }
        else {
            this.codes = Object(this.SmplPopupService.getMasterData(this.apiUrl)).data;
            this.codesHeader = Object.values(Object(this.SmplPopupService.getMasterData(this.apiUrl)).header);
            if (this.dialogRef.componentInstance) {
                this.dialogRef.componentInstance.codesHeader = this.codesHeader;
                this.dialogRef.componentInstance.unchangeableCodes = this.codes;
                this.dialogRef.componentInstance.codes = this.codes;
                this.dialogRef.componentInstance.dataTitle = this.dataTitle;
                if (!this.popupWidth && Object.values(this.codes[0]).length >= 4) {
                    this.extendWidth = ShCtlConst.DIALOG_MAX_WIDTH;
                }
                this.dialogRef.updateSize(this.extendWidth, ShCtlConst.DIALOG_HEIGHT);
                /** @type {?} */
                let cols = [];
                this.dialogRef.componentInstance.getHashKeys().forEach((/**
                 * @param {?} name
                 * @param {?} idx
                 * @return {?}
                 */
                (name, idx) => {
                    if (!this.hiddenColumns.find((/**
                     * @param {?} _
                     * @return {?}
                     */
                    (_) => _ == idx + 1)))
                        cols.push(name);
                }));
                this.dialogRef.componentInstance.displayedColumns = cols;
            }
        }
    }
    /**
     * 自コントロールのinput value に値を渡す
     * @param {?} matchedArray
     * @return {?}
     */
    setValueName(matchedArray) {
        if (Object.values(matchedArray)[this.bindColumnKey - 1]) {
            /** @type {?} */
            const val = Object.values(matchedArray)[this.bindColumnKey - 1].toString();
            this.value = val;
        }
        else {
            this.value = "";
        }
        if (Object.values(matchedArray)[this.bindColumnValue - 1]) {
            this.name = Object.values(matchedArray)[this.bindColumnValue - 1].toString();
        }
        else {
            this.name = "";
        }
    }
    /**
     * 親子関係になっているinputがある場合に検索対象を親まで広げる
     * @private
     * @param {?} element
     * @param {?} val
     * @return {?}
     */
    hasMatchRecords(element, val) {
        // 検索結果一行分の比較すべき列の値
        /** @type {?} */
        let searchs = [];
        // 現在の比較すべき値
        /** @type {?} */
        let values = [val];
        searchs.push(Object.values(element)[this.bindColumnKey - 1]);
        if (this.bindColumnArray && this.bindColumnArray.length != 0) {
            this.bindColumnArray.forEach((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                /** @type {?} */
                let bindIndex = ((/** @type {?} */ (Object.values(data)[0]))) - 1;
                searchs.push(Object.values(element)[bindIndex]);
                /** @type {?} */
                let targetInput = (/** @type {?} */ (document.querySelector(`input[name=${Object.keys(data)[0]}]`)));
                if (targetInput) {
                    if (targetInput.value) {
                        values.push(targetInput.value);
                    }
                    else {
                        searchs = searchs.filter((/**
                         * @param {?} val
                         * @return {?}
                         */
                        (val) => val != Object.values(element)[bindIndex]));
                    }
                }
            }));
        }
        /** @type {?} */
        const result = searchs.map((/**
         * @param {?} val
         * @return {?}
         */
        (val) => values.includes(val)));
        return !result.includes(false);
    }
    /**
     * 選択された区分コードに紐づく区分名を設定
     * @param {?} val
     * @return {?}
     */
    setName(val) {
        /** @type {?} */
        const record = this.codes
            ? this.codes.find((/**
             * @param {?} element
             * @return {?}
             */
            (element) => Object.values(element)[this.bindColumnKey - 1] == val))
            : null;
        if (record) {
            /** @type {?} */
            let kbnValue = Object.values(record)[this.bindColumnValue - 1];
            this.name = kbnValue ? kbnValue.toString() : "";
            this.bindCtlService.setBindValue({
                bindColumnArray: this.bindColumnArray,
                record,
            });
        }
        else {
            val = "";
            this.clearAll();
        }
        return val;
    }
    /**
     * 入力のクリア
     * @return {?}
     */
    clearValue() {
        this.value = "";
        this.name = "";
        if (this.ctlName) {
            this.ownValueInputElm.value = "";
            //タイミングを遅らせないとchangeイベント内のevent.target.valueが前の値になる
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.ownValueInputElm.dispatchEvent(new Event("change"));
                this.ownValueInputElm.dispatchEvent(new Event("focus"));
            }), 0);
        }
        if (this.popupLabelName) {
            this.ownLabelInputElm.value = "";
        }
    }
    /**
     * サブクラスでオーバーライドして使うので消さない
     * @param {?} s
     * @return {?}
     */
    toText(s) {
        return s;
    }
    /**
     * @param {?} result
     * @return {?}
     */
    extractBindValue(result) {
        if (!result)
            return;
        return Object.values(result)[this.bindColumnKey - 1];
    }
}
SHFormPopup.propDecorators = {
    dataTitle: [{ type: Input }],
    dataKbnName: [{ type: Input }],
    apiUrl: [{ type: Input }],
    bindColumnKey: [{ type: Input }],
    bindColumnValue: [{ type: Input }],
    ctlName: [{ type: Input }],
    popupLabelName: [{ type: Input }],
    bindColumnArray: [{ type: Input }],
    hiddenInput: [{ type: Input }],
    hiddenLabel: [{ type: Input }],
    hiddenPopupButton: [{ type: Input }],
    dataCache: [{ type: Input }],
    hiddenColumns: [{ type: Input }],
    popupWidth: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SHFormPopup.prototype.dataTitle;
    /** @type {?} */
    SHFormPopup.prototype.dataKbnName;
    /** @type {?} */
    SHFormPopup.prototype.apiUrl;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnKey;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnValue;
    /** @type {?} */
    SHFormPopup.prototype.ctlName;
    /** @type {?} */
    SHFormPopup.prototype.popupLabelName;
    /** @type {?} */
    SHFormPopup.prototype.bindColumnArray;
    /** @type {?} */
    SHFormPopup.prototype.hiddenInput;
    /** @type {?} */
    SHFormPopup.prototype.hiddenLabel;
    /** @type {?} */
    SHFormPopup.prototype.hiddenPopupButton;
    /** @type {?} */
    SHFormPopup.prototype.dataCache;
    /** @type {?} */
    SHFormPopup.prototype.hiddenColumns;
    /** @type {?} */
    SHFormPopup.prototype.popupWidth;
    /** @type {?} */
    SHFormPopup.prototype.name;
    /** @type {?} */
    SHFormPopup.prototype.event;
    /** @type {?} */
    SHFormPopup.prototype.codes;
    /** @type {?} */
    SHFormPopup.prototype.codesHeader;
    /** @type {?} */
    SHFormPopup.prototype.extendWidth;
    /** @type {?} */
    SHFormPopup.prototype.dialogRef;
    /** @type {?} */
    SHFormPopup.prototype.initFetchFlg;
    /** @type {?} */
    SHFormPopup.prototype.noChangeFlg;
    /** @type {?} */
    SHFormPopup.prototype.isBusy;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.SmplPopupService;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.bindCtlService;
    /**
     * @type {?}
     * @protected
     */
    SHFormPopup.prototype.lockScreenService;
}
//# sourceMappingURL=data:application/json;base64,