/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { MaxByteLengthService } from "../services/max-bytelength.service";
export class MaxByteLengthHistory {
    /**
     * @param {?} value
     * @param {?} startPoint
     * @param {?} maxByteLength
     */
    constructor(value, startPoint, maxByteLength) {
        this.enterableBytes = 0;
        this.service = new MaxByteLengthService();
        this.cache = value;
        this.startPoint = value.length == 1 && startPoint == 1 ? 0 : startPoint;
        this.maxByteLength = maxByteLength;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static isAllowOperation(e) {
        return MaxByteLengthService.isAllowOperation(e);
    }
    /**
     * \@ enterableBytesを書き換えます
     * @param {?} value
     * @return {?}
     */
    changeEnterableBytes(value) {
        /** @type {?} */
        const info = this.service.generateByteInfo(value);
        /** @type {?} */
        const entarableByte = this.maxByteLength - info.length;
        this.enterableBytes = entarableByte >= 0 ? entarableByte : 0;
    }
    /**
     * \@ 残りの入力可能byte数を返す
     * @return {?}
     */
    getEnterableBytes() {
        return this.enterableBytes;
    }
    /**
     * \@ inputにセットする値を返す
     * @param {?} data
     * @param {?} value
     * @return {?}
     */
    getResult(data, value) {
        if (!value)
            return "";
        // // 許容バイト数がまだある時
        if (this.enterableBytes)
            return value;
        if (this.startPoint === 0) {
            const { bytes } = this.service.generateByteInfo(value);
            /** @type {?} */
            const maxByteLength = this.service.calcMaxLength(bytes, this.maxByteLength);
            return value.substr(0, maxByteLength);
        }
        const { bytes } = this.service.generateByteInfo(data);
        const { length } = this.service.generateByteInfo(this.cache);
        /** @type {?} */
        const len = this.service.calcMaxLength(bytes, this.maxByteLength, length);
        /** @type {?} */
        const insertStr = data.substr(0, len);
        /** @type {?} */
        const h = this.cache.substr(0, this.startPoint);
        /** @type {?} */
        const f = this.cache.substring(this.startPoint);
        return h + insertStr + f;
    }
    /**
     * アルファベットや数字の入力時に標準のmaxlengthに設定するための値を返す
     * @param {?} value
     * @return {?}
     */
    getMaxLength(value) {
        const { bytes } = this.service.generateByteInfo(value);
        return this.service.calcMaxLength(bytes, this.maxByteLength);
    }
    /**
     * デバッグ用
     * @return {?}
     */
    toString() {
        return JSON.stringify({
            cache: this.cache,
            startPoint: this.startPoint,
            enterableBytes: this.enterableBytes,
            maxByteLength: this.maxByteLength,
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.startPoint;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.enterableBytes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.maxByteLength;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthHistory.prototype.service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF4Qnl0ZUxlbmd0aEhpc3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zaC1mb3JtLWNvbnRyb2wvIiwic291cmNlcyI6WyJsaWIvdXRpbGl0aWVzL01heEJ5dGVMZW5ndGhIaXN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUUxRSxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7SUFNL0IsWUFBWSxLQUFhLEVBQUUsVUFBa0IsRUFBRSxhQUFxQjtRQUg1RCxtQkFBYyxHQUFXLENBQUMsQ0FBQztRQUUzQixZQUFPLEdBQXlCLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUVqRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBQ00sTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQWdCO1FBQzdDLE9BQU8sb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Ozs7O0lBSU0sb0JBQW9CLENBQUMsS0FBYTs7Y0FDakMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOztjQUMzQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTTtRQUN0RCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7O0lBSU0saUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDOzs7Ozs7O0lBSU0sU0FBUyxDQUFDLElBQVksRUFBRSxLQUFhO1FBQzFDLElBQUksQ0FBQyxLQUFLO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFDdEIsa0JBQWtCO1FBQ2xCLElBQUksSUFBSSxDQUFDLGNBQWM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN0QyxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO2tCQUNuQixFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDOztrQkFDaEQsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUM5QyxLQUFLLEVBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FDbkI7WUFDRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZDO2NBQ0ssRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztjQUMvQyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQzs7Y0FDdEQsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQzs7Y0FDbkUsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQzs7Y0FDL0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDOztjQUN6QyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUlNLFlBQVksQ0FBQyxLQUFLO2NBQ2pCLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7UUFDdEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FDN0IsS0FBSyxFQUNMLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7SUFDTixDQUFDOzs7OztJQUlNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQ2xDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjs7Ozs7O0lBdkVDLHFDQUFzQjs7Ozs7SUFDdEIsMENBQTJCOzs7OztJQUMzQiw4Q0FBbUM7Ozs7O0lBQ25DLDZDQUE4Qjs7Ozs7SUFDOUIsdUNBQW1FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWF4Qnl0ZUxlbmd0aFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZXMvbWF4LWJ5dGVsZW5ndGguc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1heEJ5dGVMZW5ndGhIaXN0b3J5IHtcclxuICBwcml2YXRlIGNhY2hlOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBzdGFydFBvaW50OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBlbnRlcmFibGVCeXRlczogbnVtYmVyID0gMDtcclxuICBwcml2YXRlIG1heEJ5dGVMZW5ndGg6IG51bWJlcjtcclxuICBwcml2YXRlIHNlcnZpY2U6IE1heEJ5dGVMZW5ndGhTZXJ2aWNlID0gbmV3IE1heEJ5dGVMZW5ndGhTZXJ2aWNlKCk7XHJcbiAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgc3RhcnRQb2ludDogbnVtYmVyLCBtYXhCeXRlTGVuZ3RoOiBudW1iZXIpIHtcclxuICAgIHRoaXMuY2FjaGUgPSB2YWx1ZTtcclxuICAgIHRoaXMuc3RhcnRQb2ludCA9IHZhbHVlLmxlbmd0aCA9PSAxICYmIHN0YXJ0UG9pbnQgPT0gMSA/IDAgOiBzdGFydFBvaW50O1xyXG4gICAgdGhpcy5tYXhCeXRlTGVuZ3RoID0gbWF4Qnl0ZUxlbmd0aDtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBpc0FsbG93T3BlcmF0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIHJldHVybiBNYXhCeXRlTGVuZ3RoU2VydmljZS5pc0FsbG93T3BlcmF0aW9uKGUpO1xyXG4gIH1cclxuICAvKipcclxuICAgKkAgZW50ZXJhYmxlQnl0ZXPjgpLmm7jjgY3mj5vjgYjjgb7jgZlcclxuICAgKi9cclxuICBwdWJsaWMgY2hhbmdlRW50ZXJhYmxlQnl0ZXModmFsdWU6IHN0cmluZykge1xyXG4gICAgY29uc3QgaW5mbyA9IHRoaXMuc2VydmljZS5nZW5lcmF0ZUJ5dGVJbmZvKHZhbHVlKTtcclxuICAgIGNvbnN0IGVudGFyYWJsZUJ5dGUgPSB0aGlzLm1heEJ5dGVMZW5ndGggLSBpbmZvLmxlbmd0aDtcclxuICAgIHRoaXMuZW50ZXJhYmxlQnl0ZXMgPSBlbnRhcmFibGVCeXRlID49IDAgPyBlbnRhcmFibGVCeXRlIDogMDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICpAIOaui+OCiuOBruWFpeWKm+WPr+iDvWJ5dGXmlbDjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RW50ZXJhYmxlQnl0ZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnRlcmFibGVCeXRlcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICpAIGlucHV044Gr44K744OD44OI44GZ44KL5YCk44KS6L+U44GZIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRSZXN1bHQoZGF0YTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gXCJcIjtcclxuICAgIC8vIC8vIOioseWuueODkOOCpOODiOaVsOOBjOOBvuOBoOOBguOCi+aZglxyXG4gICAgaWYgKHRoaXMuZW50ZXJhYmxlQnl0ZXMpIHJldHVybiB2YWx1ZTtcclxuICAgIGlmICh0aGlzLnN0YXJ0UG9pbnQgPT09IDApIHtcclxuICAgICAgY29uc3QgeyBieXRlcyB9ID0gdGhpcy5zZXJ2aWNlLmdlbmVyYXRlQnl0ZUluZm8odmFsdWUpO1xyXG4gICAgICBjb25zdCBtYXhCeXRlTGVuZ3RoID0gdGhpcy5zZXJ2aWNlLmNhbGNNYXhMZW5ndGgoXHJcbiAgICAgICAgYnl0ZXMsXHJcbiAgICAgICAgdGhpcy5tYXhCeXRlTGVuZ3RoXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoMCwgbWF4Qnl0ZUxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGJ5dGVzIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyhkYXRhKTtcclxuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyh0aGlzLmNhY2hlKTtcclxuICAgIGNvbnN0IGxlbiA9IHRoaXMuc2VydmljZS5jYWxjTWF4TGVuZ3RoKGJ5dGVzLCB0aGlzLm1heEJ5dGVMZW5ndGgsIGxlbmd0aCk7XHJcbiAgICBjb25zdCBpbnNlcnRTdHIgPSBkYXRhLnN1YnN0cigwLCBsZW4pO1xyXG4gICAgY29uc3QgaCA9IHRoaXMuY2FjaGUuc3Vic3RyKDAsIHRoaXMuc3RhcnRQb2ludCk7XHJcbiAgICBjb25zdCBmID0gdGhpcy5jYWNoZS5zdWJzdHJpbmcodGhpcy5zdGFydFBvaW50KTtcclxuICAgIHJldHVybiBoICsgaW5zZXJ0U3RyICsgZjtcclxuICB9XHJcbiAgLyoqXHJcbiAgICrjgqLjg6vjg5XjgqHjg5njg4Pjg4jjgoTmlbDlrZfjga7lhaXlipvmmYLjgavmqJnmupbjga5tYXhsZW5ndGjjgavoqK3lrprjgZnjgovjgZ/jgoHjga7lgKTjgpLov5TjgZlcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0TWF4TGVuZ3RoKHZhbHVlKSB7XHJcbiAgICBjb25zdCB7IGJ5dGVzIH0gPSB0aGlzLnNlcnZpY2UuZ2VuZXJhdGVCeXRlSW5mbyh2YWx1ZSk7XHJcbiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmNhbGNNYXhMZW5ndGgoXHJcbiAgICAgICAgYnl0ZXMsXHJcbiAgICAgICAgdGhpcy5tYXhCeXRlTGVuZ3RoXHJcbiAgICAgICk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAq44OH44OQ44OD44Kw55SoXHJcbiAgICovXHJcbiAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgY2FjaGU6IHRoaXMuY2FjaGUsXHJcbiAgICAgIHN0YXJ0UG9pbnQ6IHRoaXMuc3RhcnRQb2ludCxcclxuICAgICAgZW50ZXJhYmxlQnl0ZXM6IHRoaXMuZW50ZXJhYmxlQnl0ZXMsXHJcbiAgICAgIG1heEJ5dGVMZW5ndGg6IHRoaXMubWF4Qnl0ZUxlbmd0aCxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=