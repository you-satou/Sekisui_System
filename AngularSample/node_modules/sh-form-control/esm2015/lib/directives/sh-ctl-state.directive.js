/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
export class ShCtlStateDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.state = "";
        this.onlyField = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addShCtlStateClass();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.addShCtlStateClass();
    }
    /**
     * @return {?}
     */
    addShCtlStateClass() {
        /** @type {?} */
        let qs = this.el.nativeElement.querySelectorAll('mat-form-field');
        for (var e of qs) {
            /** @type {?} */
            let classList = (e) ? e.className.split(' ') : [];
            classList.forEach((/**
             * @param {?} className
             * @return {?}
             */
            className => {
                if (className.startsWith("sh-ctl-state-"))
                    e.classList.remove(className);
            }));
            e.classList.add("sh-ctl-state-" + this.state);
        }
        if (this.onlyField) {
            /** @type {?} */
            let qsOnlyField = this.el.nativeElement.querySelectorAll('.only-field');
            for (var e of qsOnlyField) {
                /** @type {?} */
                let classList = (e) ? e.className.split(' ') : [];
                classList.forEach((/**
                 * @param {?} className
                 * @return {?}
                 */
                className => {
                    if (className.startsWith("only-field-")) {
                        e.classList.remove(className);
                    }
                }));
                e.classList.add("only-field-" + this.state);
            }
        }
        qs = this.el.nativeElement.querySelectorAll('span,label');
        for (var e of qs) {
            /** @type {?} */
            let classList = (e) ? e.className.split(' ') : [];
            classList.forEach((/**
             * @param {?} className
             * @return {?}
             */
            className => {
                if (className.startsWith("sh-ctl-state-"))
                    e.classList.remove(className);
            }));
            e.classList.add("sh-ctl-state-" + this.state + "-message");
        }
    }
}
ShCtlStateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[state]'
            },] }
];
/** @nocollapse */
ShCtlStateDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShCtlStateDirective.propDecorators = {
    state: [{ type: Input, args: ['state',] }],
    onlyField: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ShCtlStateDirective.prototype.state;
    /** @type {?} */
    ShCtlStateDirective.prototype.onlyField;
    /**
     * @type {?}
     * @private
     */
    ShCtlStateDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY3RsLXN0YXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NoLWN0bC1zdGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUt4RSxNQUFNLE9BQU8sbUJBQW1COzs7O0lBRTlCLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBRWxCLFVBQUssR0FBVyxFQUFFLENBQUM7UUFDMUIsY0FBUyxHQUFZLEtBQUssQ0FBQztJQUhFLENBQUM7Ozs7SUFLdkMsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVELGtCQUFrQjs7WUFDWixFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDakUsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7O2dCQUNaLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRCxTQUFTLENBQUMsT0FBTzs7OztZQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUM1QixJQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO29CQUN2QyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0M7UUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7O2dCQUNkLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7WUFDdkUsS0FBSyxJQUFJLENBQUMsSUFBSSxXQUFXLEVBQUU7O29CQUNyQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pELFNBQVMsQ0FBQyxPQUFPOzs7O2dCQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUM1QixJQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUM7d0JBQ3JDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3FCQUMvQjtnQkFDSCxDQUFDLEVBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzdDO1NBQ0Y7UUFFRCxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUQsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7O2dCQUNaLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRCxTQUFTLENBQUMsT0FBTzs7OztZQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUM1QixJQUFJLFNBQVMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO29CQUN2QyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNsQyxDQUFDLEVBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQzs7O1lBbkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsU0FBUzthQUNwQjs7OztZQUptQixVQUFVOzs7b0JBUzNCLEtBQUssU0FBQyxPQUFPO3dCQUNiLEtBQUs7Ozs7SUFETixvQ0FBbUM7O0lBQ25DLHdDQUFvQzs7Ozs7SUFIeEIsaUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzdGF0ZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaEN0bFN0YXRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIEBJbnB1dCgnc3RhdGUnKSBzdGF0ZTogc3RyaW5nID0gXCJcIjtcclxuICBASW5wdXQoKSBvbmx5RmllbGQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5hZGRTaEN0bFN0YXRlQ2xhc3MoKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgdGhpcy5hZGRTaEN0bFN0YXRlQ2xhc3MoKTtcclxuICB9XHJcblxyXG4gIGFkZFNoQ3RsU3RhdGVDbGFzcygpIHtcclxuICAgIGxldCBxcyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdtYXQtZm9ybS1maWVsZCcpO1xyXG4gICAgZm9yICh2YXIgZSBvZiBxcykge1xyXG4gICAgICBsZXQgY2xhc3NMaXN0ID0gKGUpID8gZS5jbGFzc05hbWUuc3BsaXQoJyAnKSA6IFtdO1xyXG4gICAgICBjbGFzc0xpc3QuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xyXG4gICAgICAgIGlmIChjbGFzc05hbWUuc3RhcnRzV2l0aChcInNoLWN0bC1zdGF0ZS1cIikpXHJcbiAgICAgICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGUuY2xhc3NMaXN0LmFkZChcInNoLWN0bC1zdGF0ZS1cIiArIHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm9ubHlGaWVsZCkge1xyXG4gICAgICBsZXQgcXNPbmx5RmllbGQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm9ubHktZmllbGQnKTtcclxuICAgICAgZm9yICh2YXIgZSBvZiBxc09ubHlGaWVsZCkge1xyXG4gICAgICAgIGxldCBjbGFzc0xpc3QgPSAoZSkgPyBlLmNsYXNzTmFtZS5zcGxpdCgnICcpIDogW107XHJcbiAgICAgICAgY2xhc3NMaXN0LmZvckVhY2goY2xhc3NOYW1lID0+IHtcclxuICAgICAgICAgIGlmKGNsYXNzTmFtZS5zdGFydHNXaXRoKFwib25seS1maWVsZC1cIikpe1xyXG4gICAgICAgICAgICBlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBlLmNsYXNzTGlzdC5hZGQoXCJvbmx5LWZpZWxkLVwiICsgdGhpcy5zdGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBxcyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLGxhYmVsJyk7XHJcbiAgICBmb3IgKHZhciBlIG9mIHFzKSB7XHJcbiAgICAgIGxldCBjbGFzc0xpc3QgPSAoZSkgPyBlLmNsYXNzTmFtZS5zcGxpdCgnICcpIDogW107XHJcbiAgICAgIGNsYXNzTGlzdC5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XHJcbiAgICAgICAgaWYgKGNsYXNzTmFtZS5zdGFydHNXaXRoKFwic2gtY3RsLXN0YXRlLVwiKSlcclxuICAgICAgICAgIGUuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgZS5jbGFzc0xpc3QuYWRkKFwic2gtY3RsLXN0YXRlLVwiICsgdGhpcy5zdGF0ZSArIFwiLW1lc3NhZ2VcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=