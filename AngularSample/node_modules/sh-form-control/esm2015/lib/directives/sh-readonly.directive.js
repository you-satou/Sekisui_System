/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
export class ShReadOnlyDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.isReadOnly = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.addAttribute();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.addAttribute();
    }
    /**
     * @return {?}
     */
    addAttribute() {
        /** @type {?} */
        let qs = this.el.nativeElement.querySelectorAll('input,textarea,select');
        for (var e of qs) {
            e.readOnly = this.isReadOnly;
        }
        qs = this.el.nativeElement.querySelectorAll('button,mat-icon');
        if (this.isReadOnly) {
            for (var e of qs) {
                e.style.display = "none";
            }
        }
        else {
            for (var e of qs) {
                e.style.display = "inline";
            }
        }
    }
}
ShReadOnlyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[readonly]'
            },] }
];
/** @nocollapse */
ShReadOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShReadOnlyDirective.propDecorators = {
    isReadOnly: [{ type: Input, args: ['readonly',] }]
};
if (false) {
    /** @type {?} */
    ShReadOnlyDirective.prototype.isReadOnly;
    /**
     * @type {?}
     * @private
     */
    ShReadOnlyDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtcmVhZG9ubHkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtZm9ybS1jb250cm9sLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvc2gtcmVhZG9ubHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBS3ZGLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFFOUIsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFFZixlQUFVLEdBQVksSUFBSSxDQUFDO0lBRlIsQ0FBQzs7OztJQUl2QyxlQUFlO1FBQ2IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxZQUFZOztZQUNOLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQztRQUN4RSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNoQixDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDOUI7UUFFRCxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ2hCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzthQUMxQjtTQUNGO2FBQ0k7WUFDSCxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDaEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO2FBQzVCO1NBQ0Y7SUFDSCxDQUFDOzs7WUFsQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2FBQ3ZCOzs7O1lBSm1CLFVBQVU7Ozt5QkFTM0IsS0FBSyxTQUFDLFVBQVU7Ozs7SUFBakIseUNBQThDOzs7OztJQUZsQyxpQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3JlYWRvbmx5XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNoUmVhZE9ubHlEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgQElucHV0KCdyZWFkb25seScpIGlzUmVhZE9ubHk6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmFkZEF0dHJpYnV0ZSgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICB0aGlzLmFkZEF0dHJpYnV0ZSgpO1xyXG4gIH1cclxuXHJcbiAgYWRkQXR0cmlidXRlKCkge1xyXG4gICAgbGV0IHFzID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHRleHRhcmVhLHNlbGVjdCcpO1xyXG4gICAgZm9yICh2YXIgZSBvZiBxcykge1xyXG4gICAgICBlLnJlYWRPbmx5ID0gdGhpcy5pc1JlYWRPbmx5O1xyXG4gICAgfVxyXG5cclxuICAgIHFzID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbixtYXQtaWNvbicpO1xyXG4gICAgaWYgKHRoaXMuaXNSZWFkT25seSkge1xyXG4gICAgICBmb3IgKHZhciBlIG9mIHFzKSB7XHJcbiAgICAgICAgZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBmb3IgKHZhciBlIG9mIHFzKSB7XHJcbiAgICAgICAgZS5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=