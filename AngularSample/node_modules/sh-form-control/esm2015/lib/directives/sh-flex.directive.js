/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
export class ShFlexDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /**
         * 最大
         */
        this.colLg = 16.6;
        this.ctlLgFlex = `1 1 ${this.colLg}%`;
        this.ctlLgMaxWidth = `${this.colLg}%`;
        /**
         * ipad ~ p
         */
        this.colMd = 33.3;
        this.ctlMdFlex = `1 1 ${this.colMd}%`;
        this.ctlMdMaxWidth = `${this.colMd}%`;
        /**
         * mobile
         */
        this.colSm = 100;
        this.ctlSmFlex = `1 1 ${this.colSm}%`;
        this.ctlSmMaxWidth = `${this.colSm}%`;
        //メディアクエリ閾値
        this.mediaSm = "(max-width: 768px)";
        this.mediaMd = "(max-width: 1024px)";
        //その他設定しておきたいスタイル
        this.ctlWidth = "100%";
        this.ctlBoxSizing = "border-box";
        this.ctlPadding = "0px 1rem 1rem 0px";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //上から任意の値を設定した場合ここで値を再設定しておかないと
        //意図した挙動にならないので消さない
        this.initParam();
        this.initStyle();
        window.addEventListener('resize', (/**
         * @return {?}
         */
        () => {
            this.initStyle();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initParam() {
        this.ctlLgFlex = `1 1 ${this.colLg}%`;
        this.ctlLgMaxWidth = `${this.colLg}%`;
        this.ctlMdFlex = `1 1 ${this.colMd}%`;
        this.ctlMdMaxWidth = `${this.colMd}%`;
        this.ctlSmFlex = `1 1 ${this.colSm}%`;
        this.ctlSmMaxWidth = `${this.colSm}%`;
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
    }
    /**
     * @private
     * @return {?}
     */
    initStyle() {
        /** @type {?} */
        const sm = window.matchMedia(this.mediaSm);
        /** @type {?} */
        const md = window.matchMedia(this.mediaMd);
        if (sm.matches) {
            this.smStyleInit();
        }
        else if (md.matches) {
            this.mdStyleInit();
        }
        else {
            this.defaultStyleInit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    smStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlSmFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlSmMaxWidth;
    }
    /**
     * @private
     * @return {?}
     */
    mdStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlMdFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlMdMaxWidth;
    }
    /**
     * @private
     * @return {?}
     */
    defaultStyleInit() {
        this.el.nativeElement.style.padding = this.ctlPadding;
        this.el.nativeElement.style.width = this.ctlWidth;
        this.el.nativeElement.style.flex = this.ctlLgFlex;
        this.el.nativeElement.style.boxSizing = this.ctlBoxSizing;
        this.el.nativeElement.style.maxWidth = this.ctlLgMaxWidth;
    }
}
ShFlexDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ShFlex]'
            },] }
];
/** @nocollapse */
ShFlexDirective.ctorParameters = () => [
    { type: ElementRef }
];
ShFlexDirective.propDecorators = {
    colLg: [{ type: Input }],
    colMd: [{ type: Input }],
    colSm: [{ type: Input }]
};
if (false) {
    /**
     * 最大
     * @type {?}
     */
    ShFlexDirective.prototype.colLg;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlLgFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlLgMaxWidth;
    /**
     * ipad ~ p
     * @type {?}
     */
    ShFlexDirective.prototype.colMd;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlMdFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlMdMaxWidth;
    /**
     * mobile
     * @type {?}
     */
    ShFlexDirective.prototype.colSm;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlSmFlex;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlSmMaxWidth;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.mediaSm;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.mediaMd;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlWidth;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlBoxSizing;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.ctlPadding;
    /**
     * @type {?}
     * @private
     */
    ShFlexDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,