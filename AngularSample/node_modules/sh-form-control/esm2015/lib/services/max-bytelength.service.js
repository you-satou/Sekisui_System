/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
export class MaxByteLengthService {
    constructor() { }
    /**
     * @param {?} value
     * @return {?}
     */
    generateByteInfo(value) {
        /** @type {?} */
        var length = 0;
        /** @type {?} */
        let bytes = [];
        if (!value)
            return { length, bytes };
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var c = value.charCodeAt(i);
            if ((c >= 0x0 && c < 0x81) ||
                c === 0xf8f0 ||
                (c >= 0xff61 && c < 0xffa0) ||
                (c >= 0xf8f1 && c < 0xf8f4)) {
                length += 1;
                bytes.push(1);
            }
            else {
                length += 2;
                bytes.push(2);
            }
        }
        return { length, bytes };
    }
    /**
     * @param {?} bytes
     * @param {?} maxBytelength
     * @param {?=} total
     * @return {?}
     */
    calcMaxLength(bytes, maxBytelength, total = 0) {
        /** @type {?} */
        let i;
        for (i = 0; i < bytes.length; i++) {
            total += bytes[i];
            if (total >= maxBytelength) {
                break;
            }
        }
        return (total - maxBytelength) > 0 ? i : i + 1;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    static isAllowOperation(e) {
        if (e.ctrlKey && MaxByteLengthService.isAllowWithCtlKey(e.key))
            return true;
        if (e.shiftKey && MaxByteLengthService.isAllowWithShiftKey(e.key))
            return true;
        if (MaxByteLengthService.isAllowCodes(e.code))
            return true;
        if (MaxByteLengthService.isAllowKey(e.key))
            return true;
        return false;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static isAllowKey(key) {
        if (MaxByteLengthService.allowKeys.includes(key))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    static isAllowCodes(code) {
        if (MaxByteLengthService.allowCodes.includes(code))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    static isAllowWithCtlKey(key) {
        if (MaxByteLengthService.allowWithCtlKey.includes(key))
            return true;
        return false;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    static isAllowWithShiftKey(key) {
        if (MaxByteLengthService.allowWithShiftKey.includes(key))
            return true;
        return false;
    }
}
MaxByteLengthService.allowKeys = ["ArrowRight", "ArrowLeft", "Backspace", "ArrowDown", "ArrowUp"];
MaxByteLengthService.allowCodes = ["Enter", "Tab"];
MaxByteLengthService.allowWithCtlKey = ["a", "Home", "End"];
MaxByteLengthService.allowWithShiftKey = ["Home", "End"];
MaxByteLengthService.decorators = [
    { type: Injectable, args: [{
                providedIn: `root`,
            },] }
];
/** @nocollapse */
MaxByteLengthService.ctorParameters = () => [];
/** @nocollapse */ MaxByteLengthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MaxByteLengthService_Factory() { return new MaxByteLengthService(); }, token: MaxByteLengthService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowKeys;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowCodes;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithCtlKey;
    /**
     * @type {?}
     * @private
     */
    MaxByteLengthService.allowWithShiftKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LWJ5dGVsZW5ndGguc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tYXgtYnl0ZWxlbmd0aC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sb0JBQW9CO0lBSy9CLGdCQUFlLENBQUM7Ozs7O0lBRVQsZ0JBQWdCLENBQUMsS0FBYTs7WUFDL0IsTUFBTSxHQUFHLENBQUM7O1lBQ1YsS0FBSyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUNqQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFDRSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztnQkFDdEIsQ0FBQyxLQUFLLE1BQU07Z0JBQ1osQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7Z0JBQzNCLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQzNCO2dCQUNBLE1BQU0sSUFBSSxDQUFDLENBQUM7Z0JBQ1osS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxDQUFDLENBQUM7Z0JBQ1osS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNmO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7Ozs7SUFFTSxhQUFhLENBQUMsS0FBZSxFQUFFLGFBQXFCLEVBQUUsUUFBZ0IsQ0FBQzs7WUFDeEUsQ0FBUztRQUNiLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxLQUFLLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLElBQUksS0FBSyxJQUFJLGFBQWEsRUFBRTtnQkFDMUIsTUFBTTthQUNQO1NBQ0Y7UUFDRCxPQUFPLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7O0lBQ00sTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQWdCO1FBQzdDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDNUUsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUMvRSxJQUFJLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDM0QsSUFBRyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ3ZELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFDTSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDbEMsSUFBSSxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQzlELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBQ08sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFZO1FBQ3RDLElBQUksb0JBQW9CLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNoRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUNPLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFXO1FBQzFDLElBQUksb0JBQW9CLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNwRSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUNPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFXO1FBQzVDLElBQUksb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ3RFLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7QUE1RHVCLDhCQUFTLEdBQWEsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkYsK0JBQVUsR0FBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN4QyxvQ0FBZSxHQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNqRCxzQ0FBaUIsR0FBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQzs7WUFQdkUsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7Ozs7O0lBRUMsK0JBQStHOzs7OztJQUMvRyxnQ0FBZ0U7Ozs7O0lBQ2hFLHFDQUF5RTs7Ozs7SUFDekUsdUNBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogYHJvb3RgLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTWF4Qnl0ZUxlbmd0aFNlcnZpY2Uge1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsbG93S2V5czogc3RyaW5nW10gPSBbXCJBcnJvd1JpZ2h0XCIsIFwiQXJyb3dMZWZ0XCIsIFwiQmFja3NwYWNlXCIsIFwiQXJyb3dEb3duXCIsIFwiQXJyb3dVcFwiXTtcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhbGxvd0NvZGVzOiBzdHJpbmdbXSA9IFtcIkVudGVyXCIsIFwiVGFiXCJdO1xyXG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsbG93V2l0aEN0bEtleTogc3RyaW5nW10gPSBbXCJhXCIsIFwiSG9tZVwiLCBcIkVuZFwiXTtcclxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBhbGxvd1dpdGhTaGlmdEtleTogc3RyaW5nW10gPSBbXCJIb21lXCIsIFwiRW5kXCJdO1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgcHVibGljIGdlbmVyYXRlQnl0ZUluZm8odmFsdWU6IHN0cmluZykge1xyXG4gICAgdmFyIGxlbmd0aCA9IDA7XHJcbiAgICBsZXQgYnl0ZXMgPSBbXTtcclxuICAgIGlmICghdmFsdWUpIHJldHVybiB7IGxlbmd0aCwgYnl0ZXMgfTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgKGMgPj0gMHgwICYmIGMgPCAweDgxKSB8fFxyXG4gICAgICAgIGMgPT09IDB4ZjhmMCB8fFxyXG4gICAgICAgIChjID49IDB4ZmY2MSAmJiBjIDwgMHhmZmEwKSB8fFxyXG4gICAgICAgIChjID49IDB4ZjhmMSAmJiBjIDwgMHhmOGY0KVxyXG4gICAgICApIHtcclxuICAgICAgICBsZW5ndGggKz0gMTtcclxuICAgICAgICBieXRlcy5wdXNoKDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxlbmd0aCArPSAyO1xyXG4gICAgICAgIGJ5dGVzLnB1c2goMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7IGxlbmd0aCwgYnl0ZXMgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBjYWxjTWF4TGVuZ3RoKGJ5dGVzOiBudW1iZXJbXSwgbWF4Qnl0ZWxlbmd0aDogbnVtYmVyLCB0b3RhbDogbnVtYmVyID0gMCkge1xyXG4gICAgbGV0IGk6IG51bWJlcjtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0b3RhbCArPSBieXRlc1tpXTtcclxuICAgICAgaWYgKHRvdGFsID49IG1heEJ5dGVsZW5ndGgpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICh0b3RhbCAtIG1heEJ5dGVsZW5ndGgpID4gMCA/IGkgOiBpICsgMTtcclxuICB9XHJcbiAgcHVibGljIHN0YXRpYyBpc0FsbG93T3BlcmF0aW9uKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmIChlLmN0cmxLZXkgJiYgTWF4Qnl0ZUxlbmd0aFNlcnZpY2UuaXNBbGxvd1dpdGhDdGxLZXkoZS5rZXkpKSByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChlLnNoaWZ0S2V5ICYmIE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmlzQWxsb3dXaXRoU2hpZnRLZXkoZS5rZXkpKSByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChNYXhCeXRlTGVuZ3RoU2VydmljZS5pc0FsbG93Q29kZXMoZS5jb2RlKSkgcmV0dXJuIHRydWU7XHJcbiAgICBpZihNYXhCeXRlTGVuZ3RoU2VydmljZS5pc0FsbG93S2V5KGUua2V5KSkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGF0aWMgaXNBbGxvd0tleShrZXk6IHN0cmluZykge1xyXG4gICAgaWYgKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmFsbG93S2V5cy5pbmNsdWRlcyhrZXkpKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaXNBbGxvd0NvZGVzKGNvZGU6IHN0cmluZykge1xyXG4gICAgaWYgKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmFsbG93Q29kZXMuaW5jbHVkZXMoY29kZSkpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICBwcml2YXRlIHN0YXRpYyBpc0FsbG93V2l0aEN0bEtleShrZXk6IHN0cmluZykge1xyXG4gICAgaWYgKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmFsbG93V2l0aEN0bEtleS5pbmNsdWRlcyhrZXkpKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaXNBbGxvd1dpdGhTaGlmdEtleShrZXk6IHN0cmluZykge1xyXG4gICAgaWYgKE1heEJ5dGVMZW5ndGhTZXJ2aWNlLmFsbG93V2l0aFNoaWZ0S2V5LmluY2x1ZGVzKGtleSkpIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG4iXX0=