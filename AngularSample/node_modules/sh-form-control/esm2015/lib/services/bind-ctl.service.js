/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { ShCtlConst } from "../constShCtl";
import { NoChangeFlg } from '../types/NoChangeFlg';
import * as i0 from "@angular/core";
export class BindCtlService {
    constructor() {
        this.NO_CHANGE_FLG_SUFFIX = ShCtlConst.NO_CHANGE.FLG_SUFFIX;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setNoChangeFlg(param) {
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        const info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const targetInput = (/** @type {?} */ (document.querySelector(`input[name=${data.ctlName}_${this.NO_CHANGE_FLG_SUFFIX}],textarea[name=${data.ctlName}_${this.NO_CHANGE_FLG_SUFFIX}]`)));
            if (!targetInput)
                return;
            targetInput.value = NoChangeFlg.ON;
            targetInput.dispatchEvent(new Event(`change`));
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setBindValue(param) {
        if (this.isParamEmpty(param))
            return;
        /** @type {?} */
        const info = this.generateBindInputInfo(param);
        info.forEach((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const targetInput = (/** @type {?} */ (document.querySelector(`input[name=${data.ctlName}],textarea[name=${data.ctlName}]`)));
            if (!targetInput)
                return;
            targetInput.value = data.value;
            targetInput.dispatchEvent(new Event(`change`));
        }));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    generateBindInputInfo(param) {
        return param.bindColumnArray.map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const column = Number(Object.values(data)[0]);
            return {
                ctlName: Object.keys(data)[0],
                value: isNaN(Number(column)) ? `` : (/** @type {?} */ (Object.values(param.record)[column - 1])),
            };
        }));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    isParamEmpty(param) {
        if (!param.bindColumnArray || param.bindColumnArray.length == 0)
            return true;
        if (!param.record)
            return true;
        return false;
    }
}
BindCtlService.decorators = [
    { type: Injectable, args: [{
                providedIn: `root`,
            },] }
];
/** @nocollapse */
BindCtlService.ctorParameters = () => [];
/** @nocollapse */ BindCtlService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function BindCtlService_Factory() { return new BindCtlService(); }, token: BindCtlService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    BindCtlService.prototype.NO_CHANGE_FLG_SUFFIX;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC1jdGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NoLWZvcm0tY29udHJvbC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9iaW5kLWN0bC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFBOztBQVVsRCxNQUFNLE9BQU8sY0FBYztJQUl6QjtRQUZpQix5QkFBb0IsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUV6RCxDQUFDOzs7OztJQUVULGNBQWMsQ0FBQyxLQUFZO1FBQ2hDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPOztjQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTzs7OztRQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7O2tCQUNkLFdBQVcsR0FBRyxtQkFBQSxRQUFRLENBQUMsYUFBYSxDQUN4QyxjQUFjLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLG9CQUFvQixtQkFBbUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FDdkgsRUFBb0I7WUFDckIsSUFBRyxDQUFDLFdBQVc7Z0JBQUUsT0FBTztZQUN4QixXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDbkMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxZQUFZLENBQUMsS0FBWTtRQUM5QixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTzs7Y0FDL0IsSUFBSSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLElBQUksRUFBRSxFQUFFOztrQkFDWixXQUFXLEdBQUcsbUJBQUEsUUFBUSxDQUFDLGFBQWEsQ0FDeEMsY0FBYyxJQUFJLENBQUMsT0FBTyxtQkFBbUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUM3RCxFQUFvQjtZQUNyQixJQUFHLENBQUMsV0FBVztnQkFBRSxPQUFPO1lBQ3hCLFdBQVcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7SUFFTyxxQkFBcUIsQ0FDM0IsS0FBWTtRQUVaLE9BQU8sS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTs7a0JBQ2xDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxPQUFPO2dCQUNMLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQkFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQVU7YUFDdEYsQ0FBQztRQUNKLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLEtBQVk7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxNQUFNLElBQUksQ0FBQztZQUM3RCxPQUFPLElBQUksQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQy9CLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBcERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUdDLDhDQUF3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBTaEN0bENvbnN0IH0gZnJvbSBcIi4uL2NvbnN0U2hDdGxcIjtcclxuaW1wb3J0IHsgTm9DaGFuZ2VGbGcgfSBmcm9tICcuLi90eXBlcy9Ob0NoYW5nZUZsZydcclxuXHJcbnR5cGUgUGFyYW0gPSB7XHJcbiAgYmluZENvbHVtbkFycmF5OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9W107XHJcbiAgcmVjb3JkOiBhbnk7XHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogYHJvb3RgLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQmluZEN0bFNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IE5PX0NIQU5HRV9GTEdfU1VGRklYID0gU2hDdGxDb25zdC5OT19DSEFOR0UuRkxHX1NVRkZJWDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBwdWJsaWMgc2V0Tm9DaGFuZ2VGbGcocGFyYW06IFBhcmFtKSB7XHJcbiAgICBpZiAodGhpcy5pc1BhcmFtRW1wdHkocGFyYW0pKSByZXR1cm47XHJcbiAgICBjb25zdCBpbmZvID0gdGhpcy5nZW5lcmF0ZUJpbmRJbnB1dEluZm8ocGFyYW0pO1xyXG4gICAgaW5mby5mb3JFYWNoKChkYXRhKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgaW5wdXRbbmFtZT0ke2RhdGEuY3RsTmFtZX1fJHt0aGlzLk5PX0NIQU5HRV9GTEdfU1VGRklYfV0sdGV4dGFyZWFbbmFtZT0ke2RhdGEuY3RsTmFtZX1fJHt0aGlzLk5PX0NIQU5HRV9GTEdfU1VGRklYfV1gXHJcbiAgICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgICAgaWYoIXRhcmdldElucHV0KSByZXR1cm47XHJcbiAgICAgIHRhcmdldElucHV0LnZhbHVlID0gTm9DaGFuZ2VGbGcuT047XHJcbiAgICAgIHRhcmdldElucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KGBjaGFuZ2VgKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRCaW5kVmFsdWUocGFyYW06IFBhcmFtKSB7XHJcbiAgICBpZiAodGhpcy5pc1BhcmFtRW1wdHkocGFyYW0pKSByZXR1cm47XHJcbiAgICBjb25zdCBpbmZvID0gdGhpcy5nZW5lcmF0ZUJpbmRJbnB1dEluZm8ocGFyYW0pO1xyXG4gICAgaW5mby5mb3JFYWNoKChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgYGlucHV0W25hbWU9JHtkYXRhLmN0bE5hbWV9XSx0ZXh0YXJlYVtuYW1lPSR7ZGF0YS5jdGxOYW1lfV1gXHJcbiAgICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICAgIGlmKCF0YXJnZXRJbnB1dCkgcmV0dXJuO1xyXG4gICAgICAgIHRhcmdldElucHV0LnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICB0YXJnZXRJbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChgY2hhbmdlYCkpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2VuZXJhdGVCaW5kSW5wdXRJbmZvKFxyXG4gICAgcGFyYW06IFBhcmFtXHJcbiAgKTogeyBjdGxOYW1lOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfVtdIHtcclxuICAgIHJldHVybiBwYXJhbS5iaW5kQ29sdW1uQXJyYXkubWFwKChkYXRhKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbHVtbiA9IE51bWJlcihPYmplY3QudmFsdWVzKGRhdGEpWzBdKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjdGxOYW1lOiBPYmplY3Qua2V5cyhkYXRhKVswXSxcclxuICAgICAgICB2YWx1ZTogaXNOYU4oTnVtYmVyKGNvbHVtbikpID8gYGAgOiBPYmplY3QudmFsdWVzKHBhcmFtLnJlY29yZClbY29sdW1uIC0gMV0gYXMgc3RyaW5nLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzUGFyYW1FbXB0eShwYXJhbTogUGFyYW0pIHtcclxuICAgIGlmICghcGFyYW0uYmluZENvbHVtbkFycmF5IHx8IHBhcmFtLmJpbmRDb2x1bW5BcnJheS5sZW5ndGggPT0gMClcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAoIXBhcmFtLnJlY29yZCkgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==