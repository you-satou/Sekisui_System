/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShCtlApiService } from './sh-ctl-api.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./sh-ctl-api.service";
/**
 * 区分マスタの情報を取得
 */
export class SmplPopupService {
    /**
     * @param {?} apiComService
     */
    constructor(apiComService) {
        this.apiComService = apiComService;
        this.popupCdSubject = new Subject();
        this.popupCdState = this.popupCdSubject.asObservable();
        //汎用マスタ
        this.masterCache = [];
    }
    /**
     * 汎用マスタ取得
     * @param {?} url
     * @return {?}
     */
    fetchAll(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.apiComService.get(url);
        });
    }
    /**
     * 指定したマスタのキャッシュしているデータを取得
     * @param {?} key マスタの名前
     * @return {?}
     */
    getMasterData(key) {
        /** @type {?} */
        let cache = this.masterCache.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.masterName == key;
        }));
        return cache.length > 0 ? cache[0].masterCache : [];
    }
    /**
     * マスタデータをキャッシュする
     * @param {?} key マスタの名前
     * @param {?} masterData マスタデータ
     * @return {?}
     */
    setMasterData(key, masterData) {
        if (this.masterCache.length > 0) {
            for (let item of this.masterCache) {
                if (item.masterName == key) {
                    item.masterCache = masterData;
                    break;
                }
            }
        }
        this.masterCache = this.masterCache.concat([{ masterName: key, masterCache: masterData }]);
    }
}
SmplPopupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SmplPopupService.ctorParameters = () => [
    { type: ShCtlApiService }
];
/** @nocollapse */ SmplPopupService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SmplPopupService_Factory() { return new SmplPopupService(i0.ɵɵinject(i1.ShCtlApiService)); }, token: SmplPopupService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.popupCdSubject;
    /** @type {?} */
    SmplPopupService.prototype.popupCdState;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.masterCache;
    /**
     * @type {?}
     * @private
     */
    SmplPopupService.prototype.apiComService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21wbC1wb3B1cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtZm9ybS1jb250cm9sLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NtcGwtcG9wdXAuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQVEvQixNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBRzNCLFlBQ1UsYUFBOEI7UUFBOUIsa0JBQWEsR0FBYixhQUFhLENBQWlCO1FBSGhDLG1CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQVUsQ0FBQztRQUN4QyxpQkFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7O1FBTWpELGdCQUFXLEdBQVUsRUFBRSxDQUFDO0lBSDVCLENBQUM7Ozs7OztJQVFRLFFBQVEsQ0FBQyxHQUFXOztZQUMvQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRTVDLENBQUM7S0FBQTs7Ozs7O0lBTU0sYUFBYSxDQUFDLEdBQVc7O1lBQzFCLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksR0FBRyxDQUFBO1FBQy9CLENBQUMsRUFBQztRQUNGLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7O0lBT00sYUFBYSxDQUFDLEdBQVcsRUFBRSxVQUFpQjtRQUNqRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixLQUFLLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2pDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxHQUFHLEVBQUU7b0JBQzFCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFBO29CQUM3QixNQUFNO2lCQUNQO2FBQ0Y7U0FDRjtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDOzs7WUEvQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBUlEsZUFBZTs7Ozs7Ozs7SUFVdEIsMENBQStDOztJQUMvQyx3Q0FBeUQ7Ozs7O0lBTXpELHVDQUFnQzs7Ozs7SUFKOUIseUNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTaEN0bEFwaVNlcnZpY2UgfSBmcm9tICcuL3NoLWN0bC1hcGkuc2VydmljZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiDljLrliIbjg57jgrnjgr/jga7mg4XloLHjgpLlj5blvpdcclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNtcGxQb3B1cFNlcnZpY2Uge1xyXG4gIHByaXZhdGUgcG9wdXBDZFN1YmplY3QgPSBuZXcgU3ViamVjdDxzdHJpbmc+KCk7XHJcbiAgcHVibGljIHBvcHVwQ2RTdGF0ZSA9IHRoaXMucG9wdXBDZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFwaUNvbVNlcnZpY2U6IFNoQ3RsQXBpU2VydmljZSxcclxuICApIHsgfVxyXG5cclxuICAvL+axjueUqOODnuOCueOCv1xyXG4gIHByaXZhdGUgbWFzdGVyQ2FjaGU6IGFueVtdID0gW107XHJcblxyXG4gIC8qKlxyXG4gICAqIOaxjueUqOODnuOCueOCv+WPluW+l1xyXG4gICAqL1xyXG4gIHB1YmxpYyBhc3luYyBmZXRjaEFsbCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5hcGlDb21TZXJ2aWNlLmdldDxhbnlbXT4odXJsKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmjIflrprjgZfjgZ/jg57jgrnjgr/jga7jgq3jg6Pjg4Pjgrfjg6XjgZfjgabjgYTjgovjg4fjg7zjgr/jgpLlj5blvpdcclxuICAgKiBAcGFyYW0ga2V5IOODnuOCueOCv+OBruWQjeWJjVxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRNYXN0ZXJEYXRhKGtleTogc3RyaW5nKTogYW55W10ge1xyXG4gICAgbGV0IGNhY2hlID0gdGhpcy5tYXN0ZXJDYWNoZS5maWx0ZXIoaXRlbSA9PiB7XHJcbiAgICAgIHJldHVybiBpdGVtLm1hc3Rlck5hbWUgPT0ga2V5XHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIGNhY2hlLmxlbmd0aCA+IDAgPyBjYWNoZVswXS5tYXN0ZXJDYWNoZSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oe44K544K/44OH44O844K/44KS44Kt44Oj44OD44K344Ol44GZ44KLXHJcbiAgICogQHBhcmFtIGtleSDjg57jgrnjgr/jga7lkI3liY1cclxuICAgKiBAcGFyYW0gbWFzdGVyRGF0YSDjg57jgrnjgr/jg4fjg7zjgr9cclxuICAgKi9cclxuICBwdWJsaWMgc2V0TWFzdGVyRGF0YShrZXk6IHN0cmluZywgbWFzdGVyRGF0YTogYW55W10pIHtcclxuICAgIGlmICh0aGlzLm1hc3RlckNhY2hlLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLm1hc3RlckNhY2hlKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0ubWFzdGVyTmFtZSA9PSBrZXkpIHtcclxuICAgICAgICAgIGl0ZW0ubWFzdGVyQ2FjaGUgPSBtYXN0ZXJEYXRhXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMubWFzdGVyQ2FjaGUgPSB0aGlzLm1hc3RlckNhY2hlLmNvbmNhdChbeyBtYXN0ZXJOYW1lOiBrZXksIG1hc3RlckNhY2hlOiBtYXN0ZXJEYXRhIH1dKTtcclxuICB9XHJcbn1cclxuIl19