/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ShHttpClientService } from 'sh-http-client';
import * as i0 from "@angular/core";
import * as i1 from "sh-http-client";
/**
 * ShCtl　Api通信クラス
 */
export class ShCtlApiService {
    /**
     * @param {?} apiComService
     */
    constructor(apiComService) {
        this.apiComService = apiComService;
    }
    /**
     * API返却結果に応じて処理分岐を行い、ApplicationDataのみを返却する
     * @private
     * @template T
     * @param {?} apiResponseBody
     * @return {?} API返却結果のApplicationData
     */
    getApplicationData(apiResponseBody) {
        //バリデーション処理
        //アラート処理
        //システムに返す際は処理に必要なデータだけにする
        return apiResponseBody.applicationData;
    }
    /**
     * GET
     * @template T
     * @param {?} url ApiUrl
     * @return {?} API返却結果
     */
    get(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.get(url, false)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * POST
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @return {?} API返却結果
     */
    post(url, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.post(url, data)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * PUT
     * @template T
     * @param {?} url ApiUrl
     * @param {?} data データ
     * @return {?} API返却結果
     */
    put(url, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.put(url, data)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
    /**
     * DELETE
     * @template T
     * @param {?} url ApiUrl
     * @return {?} API返却結果
     */
    delete(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let ret = null;
            yield this.apiComService.delete(url)
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                ret = this.getApplicationData(response);
            }));
            return ret;
        });
    }
}
ShCtlApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShCtlApiService.ctorParameters = () => [
    { type: ShHttpClientService }
];
/** @nocollapse */ ShCtlApiService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ShCtlApiService_Factory() { return new ShCtlApiService(i0.ɵɵinject(i1.ShHttpClientService)); }, token: ShCtlApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ShCtlApiService.prototype.apiComService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY3RsLWFwaS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2gtZm9ybS1jb250cm9sLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3NoLWN0bC1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFtQixNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFTdEUsTUFBTSxPQUFPLGVBQWU7Ozs7SUFFMUIsWUFDVSxhQUFrQztRQUFsQyxrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7SUFDeEMsQ0FBQzs7Ozs7Ozs7SUFPRyxrQkFBa0IsQ0FBSSxlQUFtQztRQUMvRCxXQUFXO1FBQ1gsUUFBUTtRQUNSLHlCQUF5QjtRQUN6QixPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUM7SUFFekMsQ0FBQzs7Ozs7OztJQU9ZLEdBQUcsQ0FBSSxHQUFXOzs7Z0JBQ3pCLEdBQUcsR0FBTSxJQUFJO1lBQ2pCLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUksR0FBRyxFQUFFLEtBQUssQ0FBQztpQkFDeEMsSUFBSTs7OztZQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUMsQ0FBQyxFQUFDLENBQUM7WUFDTCxPQUFPLEdBQUcsQ0FBQztRQUViLENBQUM7S0FBQTs7Ozs7Ozs7SUFRWSxJQUFJLENBQUksR0FBVyxFQUFFLElBQVM7OztnQkFDckMsR0FBRyxHQUFNLElBQUk7WUFDakIsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBSSxHQUFHLEVBQUUsSUFBSSxDQUFDO2lCQUN4QyxJQUFJOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ2YsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMxQyxDQUFDLEVBQUMsQ0FBQztZQUNMLE9BQU8sR0FBRyxDQUFDO1FBRWIsQ0FBQztLQUFBOzs7Ozs7OztJQVFZLEdBQUcsQ0FBSSxHQUFXLEVBQUUsSUFBUzs7O2dCQUNwQyxHQUFHLEdBQU0sSUFBSTtZQUNqQixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFJLEdBQUcsRUFBRSxJQUFJLENBQUM7aUJBQ3ZDLElBQUk7Ozs7WUFBQyxRQUFRLENBQUMsRUFBRTtnQkFDZixHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzFDLENBQUMsRUFBQyxDQUFDO1lBQ0wsT0FBTyxHQUFHLENBQUM7UUFFYixDQUFDO0tBQUE7Ozs7Ozs7SUFPWSxNQUFNLENBQUksR0FBVzs7O2dCQUM1QixHQUFHLEdBQU0sSUFBSTtZQUNqQixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFJLEdBQUcsQ0FBQztpQkFDcEMsSUFBSTs7OztZQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUMsQ0FBQyxFQUFDLENBQUM7WUFDTCxPQUFPLEdBQUcsQ0FBQztRQUViLENBQUM7S0FBQTs7O1lBbEZGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVJRLG1CQUFtQjs7Ozs7Ozs7SUFZeEIsd0NBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTaEh0dHBDbGllbnRTZXJ2aWNlLCBBcGlSZXNwb25zZUJvZHkgfSBmcm9tICdzaC1odHRwLWNsaWVudCc7XHJcbmltcG9ydCB7IFNoQ3RsQ29uc3QgfSBmcm9tICcuLi9jb25zdFNoQ3RsJztcclxuXHJcbi8qKlxyXG4gKiBTaEN0bOOAgEFwaemAmuS/oeOCr+ODqeOCuVxyXG4gKi9cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hDdGxBcGlTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGFwaUNvbVNlcnZpY2U6IFNoSHR0cENsaWVudFNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgKiBBUEnov5TljbTntZDmnpzjgavlv5zjgZjjgablh6bnkIbliIblspDjgpLooYzjgYTjgIFBcHBsaWNhdGlvbkRhdGHjga7jgb/jgpLov5TljbTjgZnjgotcclxuICAqIEBwYXJhbSBhcGlSZXNwb25zZSBBUEnov5TljbTntZDmnpxcclxuICAqIEByZXR1cm4gQVBJ6L+U5Y2057WQ5p6c44GuQXBwbGljYXRpb25EYXRhXHJcbiAgKi9cclxuICBwcml2YXRlIGdldEFwcGxpY2F0aW9uRGF0YTxUPihhcGlSZXNwb25zZUJvZHk6IEFwaVJlc3BvbnNlQm9keTxUPik6IFQge1xyXG4gICAgLy/jg5Djg6rjg4fjg7zjgrfjg6fjg7Plh6bnkIZcclxuICAgIC8v44Ki44Op44O844OI5Yem55CGXHJcbiAgICAvL+OCt+OCueODhuODoOOBq+i/lOOBmemam+OBr+WHpueQhuOBq+W/heimgeOBquODh+ODvOOCv+OBoOOBkeOBq+OBmeOCi1xyXG4gICAgcmV0dXJuIGFwaVJlc3BvbnNlQm9keS5hcHBsaWNhdGlvbkRhdGE7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBHRVRcclxuICAqIEBwYXJhbSB1cmwgQXBpVXJsXHJcbiAgKiBAcmV0dXJuIEFQSei/lOWNtOe1kOaenFxyXG4gICovXHJcbiAgcHVibGljIGFzeW5jIGdldDxUPih1cmw6IHN0cmluZyk6IFByb21pc2U8VD4ge1xyXG4gICAgbGV0IHJldDogVCA9IG51bGw7XHJcbiAgICBhd2FpdCB0aGlzLmFwaUNvbVNlcnZpY2UuZ2V0PFQ+KHVybCwgZmFsc2UpXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICByZXQgPSB0aGlzLmdldEFwcGxpY2F0aW9uRGF0YShyZXNwb25zZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFBPU1RcclxuICAqIEBwYXJhbSB1cmwgQXBpVXJsXHJcbiAgKiBAcGFyYW0gZGF0YSDjg4fjg7zjgr9cclxuICAqIEByZXR1cm4gQVBJ6L+U5Y2057WQ5p6cXHJcbiAgKi9cclxuICBwdWJsaWMgYXN5bmMgcG9zdDxUPih1cmw6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxUPiB7XHJcbiAgICBsZXQgcmV0OiBUID0gbnVsbDtcclxuICAgIGF3YWl0IHRoaXMuYXBpQ29tU2VydmljZS5wb3N0PFQ+KHVybCwgZGF0YSlcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIHJldCA9IHRoaXMuZ2V0QXBwbGljYXRpb25EYXRhKHJlc3BvbnNlKTtcclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUFVUXHJcbiAgKiBAcGFyYW0gdXJsIEFwaVVybFxyXG4gICogQHBhcmFtIGRhdGEg44OH44O844K/XHJcbiAgKiBAcmV0dXJuIEFQSei/lOWNtOe1kOaenFxyXG4gICovXHJcbiAgcHVibGljIGFzeW5jIHB1dDxUPih1cmw6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxUPiB7XHJcbiAgICBsZXQgcmV0OiBUID0gbnVsbDtcclxuICAgIGF3YWl0IHRoaXMuYXBpQ29tU2VydmljZS5wdXQ8VD4odXJsLCBkYXRhKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgcmV0ID0gdGhpcy5nZXRBcHBsaWNhdGlvbkRhdGEocmVzcG9uc2UpO1xyXG4gICAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBERUxFVEVcclxuICAqIEBwYXJhbSB1cmwgQXBpVXJsXHJcbiAgKiBAcmV0dXJuIEFQSei/lOWNtOe1kOaenFxyXG4gICovXHJcbiAgcHVibGljIGFzeW5jIGRlbGV0ZTxUPih1cmw6IHN0cmluZyk6IFByb21pc2U8VD4ge1xyXG4gICAgbGV0IHJldDogVCA9IG51bGw7XHJcbiAgICBhd2FpdCB0aGlzLmFwaUNvbVNlcnZpY2UuZGVsZXRlPFQ+KHVybClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIHJldCA9IHRoaXMuZ2V0QXBwbGljYXRpb25EYXRhKHJlc3BvbnNlKTtcclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG5cclxuICB9XHJcbn1cclxuIl19